//! Various utilities to load MIR.
//! Allow to easily load the MIR code generated by a specific pass.

#![allow(dead_code)]
use rustc_hir::def_id::{DefId, LocalDefId};
use rustc_middle::mir::Body;
use rustc_middle::ty::{TyCtxt, WithOptConstParam};
use std::cell::Ref;

#[derive(Clone, Copy, PartialEq, Eq)]
pub enum MirLevel {
    /// Original MIR, directly translated from HIR.
    Built,
    /// Not sure what this is. Not well tested.
    Promoted,
    /// MIR after optimization passes. The last one before codegen.
    Optimized,
}

/// The level at which is queried the MIR.
pub const MIR_LEVEL: MirLevel = MirLevel::Built;

/// Indicates if the constants should be extracted in their own identifier,
/// or if they must be evaluated to a constant value.
pub const EXTRACT_CONSTANTS_AT_TOP_LEVEL: bool = match MIR_LEVEL {
    MirLevel::Built => true,
    MirLevel::Promoted => false,
    MirLevel::Optimized => false,
};

fn get_mir_for_def_id_and_level<'tcx>(
    tcx: TyCtxt<'tcx>,
    def_id: LocalDefId,
    level: MirLevel,
) -> &'tcx Body<'tcx> {
    match level {
        MirLevel::Built => {
            let body = tcx.mir_built(WithOptConstParam::unknown(def_id));
            // Rk.: leak is unstable
            Ref::leak(body.borrow())
        }
        MirLevel::Promoted => {
            let (body, _) = tcx.mir_promoted(WithOptConstParam::unknown(def_id));
            // Rk.: leak is unstable
            Ref::leak(body.borrow())
        }
        MirLevel::Optimized => {
            let def_id = DefId {
                krate: rustc_hir::def_id::LOCAL_CRATE,
                index: def_id.local_def_index,
            };
            tcx.optimized_mir(def_id)
        }
    }
}

pub fn get_mir_for_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Body<'tcx> {
    get_mir_for_def_id_and_level(tcx, def_id, MIR_LEVEL)
}
