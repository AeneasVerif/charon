# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
    non-dyn-compatible
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

// Full name: take_mut::take
pub fn take<'_0, T, F>(@1: &'_0 mut (T), @2: F)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: FnOnce<F, (T)>,
    @TraitClause2::Output = T,

// Full name: test_cargo_dependencies::main::silly_incr::closure
struct closure {}

// Full name: test_cargo_dependencies::main::silly_incr::{impl FnOnce<(u32)> for closure}::call_once
fn {impl FnOnce<(u32)> for closure}::call_once(@1: closure, @2: (u32)) -> u32
{
    let @0: u32; // return
    let @1: closure; // arg #1
    let tupled_args@2: (u32); // arg #2
    let y@3: u32; // local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local

    storage_live(y@3)
    storage_live(@5)
    y@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (y@3)
    @5 := copy (@4) panic.+ const (1 : u32)
    @0 := move (@5)
    storage_dead(@4)
    return
}

// Full name: test_cargo_dependencies::main::silly_incr::{impl FnOnce<(u32)> for closure}
impl FnOnce<(u32)> for closure {
    parent_clause0 = MetaSized<closure>
    parent_clause1 = Sized<(u32)>
    parent_clause2 = Tuple<(u32)>
    parent_clause3 = Sized<u32>
    type Output = u32
    fn call_once = {impl FnOnce<(u32)> for closure}::call_once
    non-dyn-compatible
}

// Full name: test_cargo_dependencies::main::silly_incr
fn silly_incr<'_0>(@1: &'_0 mut (u32))
{
    let @0: (); // return
    let x@1: &'_ mut (u32); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: closure; // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &two-phase-mut *(x@1)
    storage_live(@4)
    @4 := closure {  }
    @2 := take<'_, u32, closure>[Sized<u32>, Sized<closure>, {impl FnOnce<(u32)> for closure}](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_cargo_dependencies::main
fn main()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: &'_ mut (u32); // anonymous local
    let @5: (); // anonymous local
    let @6: (&'_ (u32), &'_ (u32)); // anonymous local
    let @7: &'_ (u32); // anonymous local
    let @8: &'_ (u32); // anonymous local
    let @9: u32; // anonymous local
    let left_val@10: &'_ (u32); // local
    let right_val@11: &'_ (u32); // local
    let @12: bool; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let kind@15: AssertKind; // local
    let @16: AssertKind; // anonymous local
    let @17: &'_ (u32); // anonymous local
    let @18: &'_ (u32); // anonymous local
    let @19: &'_ (u32); // anonymous local
    let @20: &'_ (u32); // anonymous local
    let @21: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local

    storage_live(kind@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(x@1)
    x@1 := const (0 : u32)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &mut x@1
    @3 := &two-phase-mut *(@4)
    @2 := silly_incr<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@4)
    storage_dead(@2)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := &x@1
    storage_live(@8)
    storage_live(@9)
    @9 := const (1 : u32)
    @8 := &@9
    @6 := (move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_live(left_val@10)
    left_val@10 := copy ((@6).0)
    storage_live(right_val@11)
    right_val@11 := copy ((@6).1)
    storage_live(@12)
    storage_live(@13)
    @13 := copy (*(left_val@10))
    storage_live(@14)
    @14 := copy (*(right_val@11))
    @12 := move (@13) == move (@14)
    if move (@12) {
    }
    else {
        storage_dead(@14)
        storage_dead(@13)
        storage_live(kind@15)
        kind@15 := AssertKind::Eq {  }
        storage_live(@16)
        @16 := move (kind@15)
        storage_live(@17)
        storage_live(@18)
        @18 := &*(left_val@10)
        @17 := &*(@18)
        storage_live(@19)
        storage_live(@20)
        @20 := &*(right_val@11)
        @19 := &*(@20)
        storage_live(@21)
        @21 := Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@14)
    storage_dead(@13)
    storage_dead(@12)
    storage_dead(right_val@11)
    storage_dead(left_val@10)
    storage_dead(@9)
    storage_dead(@6)
    storage_dead(@5)
    @0 := ()
    storage_dead(x@1)
    @0 := ()
    return
}



