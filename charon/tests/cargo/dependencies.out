# Final LLBC before serialization:

fn test_cargo_dependencies::silly_incr::closure(@1: (), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: (); // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local

    @3 := copy (y@2)
    @0 := move (@3) + const (1 : u32)
    drop @3
    return
}

trait core::marker::Sized<Self>

trait core::marker::Tuple<Self>

trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

fn take_mut::take<'_0, T, F>(@1: &'_0 mut (T), @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::ops::function::FnOnce<F, (T)>,
    @TraitClause2::Output = T,

fn test_cargo_dependencies::silly_incr<'_0>(@1: &'_0 mut (u32))
{
    let @0: (); // return
    let x@1: &'_ mut (u32); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: fn(u32) -> u32; // anonymous local
    let @5: (); // anonymous local

    @3 := &two-phase-mut *(x@1)
    @4 := {test_cargo_dependencies::silly_incr::closure} {}
    @2 := take_mut::take<'_, u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::FnOnce<fn(u32) -> u32, (u32)>](move (@3), move (@4))
    drop @4
    drop @3
    drop @2
    @5 := ()
    @0 := move (@5)
    @0 := ()
    return
}

enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn test_cargo_dependencies::main()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: &'_ mut (u32); // anonymous local
    let @5: (); // anonymous local
    let @6: (&'_ (u32), &'_ (u32)); // anonymous local
    let @7: &'_ (u32); // anonymous local
    let @8: &'_ (u32); // anonymous local
    let @9: u32; // anonymous local
    let left_val@10: &'_ (u32); // local
    let right_val@11: &'_ (u32); // local
    let @12: bool; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let kind@15: core::panicking::AssertKind; // local
    let @16: core::panicking::AssertKind; // anonymous local
    let @17: &'_ (u32); // anonymous local
    let @18: &'_ (u32); // anonymous local
    let @19: &'_ (u32); // anonymous local
    let @20: &'_ (u32); // anonymous local
    let @21: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local
    let @22: (); // anonymous local
    let @23: (); // anonymous local

    x@1 := const (0 : u32)
    @fake_read(x@1)
    @4 := &mut x@1
    @3 := &two-phase-mut *(@4)
    @2 := test_cargo_dependencies::silly_incr<'_>(move (@3))
    drop @3
    drop @4
    drop @2
    @7 := &x@1
    @9 := const (1 : u32)
    @8 := &@9
    @6 := (move (@7), move (@8))
    drop @8
    drop @7
    @fake_read(@6)
    left_val@10 := copy ((@6).0)
    right_val@11 := copy ((@6).1)
    @13 := copy (*(left_val@10))
    @14 := copy (*(right_val@11))
    @12 := move (@13) == move (@14)
    if move (@12) {
    }
    else {
        drop @14
        drop @13
        kind@15 := core::panicking::AssertKind::Eq {  }
        @fake_read(kind@15)
        @16 := move (kind@15)
        @18 := &*(left_val@10)
        @17 := &*(@18)
        @20 := &*(right_val@11)
        @19 := &*(@20)
        @21 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    drop @14
    drop @13
    @22 := ()
    @5 := move (@22)
    drop @12
    drop right_val@11
    drop left_val@10
    drop @9
    drop @6
    drop @5
    @23 := ()
    @0 := move (@23)
    drop x@1
    @0 := ()
    return
}

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



