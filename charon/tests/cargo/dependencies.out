# Final LLBC before serialization:

pub enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("format_arguments")]
pub opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn test_cargo_dependencies::main::silly_incr::closure(@1: (), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: (); // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local

    storage_live(@3)
    @3 := copy (y@2)
    @0 := move (@3) + const (1 : u32)
    storage_dead(@3)
    return
}

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

pub fn take_mut::take<'_0, T, F>(@1: &'_0 mut (T), @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::ops::function::FnOnce<F, (T)>,
    @TraitClause2::Output = T,

fn test_cargo_dependencies::main::silly_incr<'_0>(@1: &'_0 mut (u32))
{
    let @0: (); // return
    let x@1: &'_ mut (u32); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: fn(u32) -> u32; // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &two-phase-mut *(x@1)
    storage_live(@4)
    @4 := {test_cargo_dependencies::main::silly_incr::closure} {}
    @2 := take_mut::take<'_, u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::FnOnce<fn(u32) -> u32, (u32)> where Output  = u32](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

fn test_cargo_dependencies::main()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: &'_ mut (u32); // anonymous local
    let @5: (); // anonymous local
    let @6: (&'_ (u32), &'_ (u32)); // anonymous local
    let @7: &'_ (u32); // anonymous local
    let @8: &'_ (u32); // anonymous local
    let @9: u32; // anonymous local
    let left_val@10: &'_ (u32); // local
    let right_val@11: &'_ (u32); // local
    let @12: bool; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let kind@15: core::panicking::AssertKind; // local
    let @16: core::panicking::AssertKind; // anonymous local
    let @17: &'_ (u32); // anonymous local
    let @18: &'_ (u32); // anonymous local
    let @19: &'_ (u32); // anonymous local
    let @20: &'_ (u32); // anonymous local
    let @21: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local

    storage_live(kind@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(x@1)
    x@1 := const (0 : u32)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &mut x@1
    @3 := &two-phase-mut *(@4)
    @2 := test_cargo_dependencies::main::silly_incr<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@4)
    storage_dead(@2)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := &x@1
    storage_live(@8)
    storage_live(@9)
    @9 := const (1 : u32)
    @8 := &@9
    @6 := (move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_live(left_val@10)
    left_val@10 := copy ((@6).0)
    storage_live(right_val@11)
    right_val@11 := copy ((@6).1)
    storage_live(@12)
    storage_live(@13)
    @13 := copy (*(left_val@10))
    storage_live(@14)
    @14 := copy (*(right_val@11))
    @12 := move (@13) == move (@14)
    if move (@12) {
    }
    else {
        storage_dead(@14)
        storage_dead(@13)
        storage_live(kind@15)
        kind@15 := core::panicking::AssertKind::Eq {  }
        storage_live(@16)
        @16 := move (kind@15)
        storage_live(@17)
        storage_live(@18)
        @18 := &*(left_val@10)
        @17 := &*(@18)
        storage_live(@19)
        storage_live(@20)
        @20 := &*(right_val@11)
        @19 := &*(@20)
        storage_live(@21)
        @21 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@14)
    storage_dead(@13)
    storage_dead(@12)
    storage_dead(right_val@11)
    storage_dead(left_val@10)
    storage_dead(@9)
    storage_dead(@6)
    storage_dead(@5)
    @0 := ()
    storage_dead(x@1)
    @0 := ()
    return
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



