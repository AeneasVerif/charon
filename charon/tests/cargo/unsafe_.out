# Final LLBC before serialization:

#[lang_item("format_arguments")]
pub opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

pub fn core::fmt::{core::fmt::Arguments<'a>}#4::new_const<'a, const N : usize>(@1: &'a (Array<&'static (Str), const N : usize>)) -> core::fmt::Arguments<'a>

pub fn std::io::stdio::_print<'_0>(@1: core::fmt::Arguments<'_0>)

fn unsafe::main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: (); // anonymous local
    let @3: core::fmt::Arguments<'_>; // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @6: Array<&'_ (Str), 1 : usize>; // anonymous local

    @6 := [const ("Hello, world!\n")]
    @5 := &@6
    @4 := &*(@5)
    @3 := core::fmt::{core::fmt::Arguments<'a>}#4::new_const<'_, 1 : usize>(move (@4))
    drop @4
    @2 := std::io::stdio::_print<'_>(move (@3))
    drop @3
    drop @6
    drop @5
    drop @2
    drop @1
    @0 := ()
    @0 := ()
    return
}



