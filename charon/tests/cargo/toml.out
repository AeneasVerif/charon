# Final LLBC before serialization:

trait core::marker::Sized<Self>

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn core::option::{core::option::Option<T, @TraitClause0>}::is_some<'_0, T>(@1: &'_0 (core::option::Option<T, @TraitClause0>)) -> bool
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: bool; // return
    let self@1: &'_ (core::option::Option<T, @TraitClause0>); // arg #1

    match *(self@1) {
        1 => {
            @0 := const (true)
        },
        0 => {
            @0 := const (false)
        },
    }
    return
}

fn test_cargo_toml::main()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: &'_ (core::option::Option<bool, core::marker::Sized<bool>>); // anonymous local
    let @3: core::option::Option<bool, core::marker::Sized<bool>>; // anonymous local
    let @4: (); // anonymous local

    @3 := core::option::Option::Some { 0: const (false) }
    @2 := &@3
    @1 := core::option::{core::option::Option<T, @TraitClause0>}::is_some<bool>[core::marker::Sized<bool>](move (@2))
    drop @2
    @fake_read(@1)
    drop @3
    drop @1
    @4 := ()
    @0 := move (@4)
    @0 := ()
    return
}



