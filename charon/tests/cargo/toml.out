# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


pub fn core::option::{core::option::Option<T>[@TraitClause0]}::is_some<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: bool; // return
    let self@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let @2: isize; // anonymous local

    storage_live(@2)
    match *(self@1) {
        core::option::Option::None => {
            @2 := const (0 : isize)
        },
        core::option::Option::Some => {
            @2 := const (1 : isize)
        },
    }
    @0 := copy (@2) == const (1 : isize)
    return
}

fn test_cargo_toml::main()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: &'_ (core::option::Option<bool>[core::marker::Sized<bool>]); // anonymous local
    let @3: core::option::Option<bool>[core::marker::Sized<bool>]; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @3 := core::option::Option::Some { 0: const (false) }
    @2 := &@3
    @1 := core::option::{core::option::Option<T>[@TraitClause0]}::is_some<'_, bool>[core::marker::Sized<bool>](move (@2))
    storage_dead(@2)
    storage_dead(@3)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



