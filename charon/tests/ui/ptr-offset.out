# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::fmt::rt::Count
#[lang_item("format_count")]
pub enum Count {
  Is(u16),
  Param(usize),
  Implied,
}

// Full name: core::fmt::rt::Placeholder
#[lang_item("format_placeholder")]
pub struct Placeholder {
  position: usize,
  flags: u32,
  precision: Count,
  width: Count,
}

// Full name: core::fmt::rt::Argument
#[lang_item("format_argument")]
pub opaque type Argument<'a>

// Full name: core::intrinsics::cold_path
pub fn cold_path()

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::panicking::panic_nounwind_fmt
pub fn panic_nounwind_fmt<'_0>(@1: Arguments<'_0>, @2: bool) -> !

// Full name: core::ptr::const_ptr::{*const T}::offset::precondition_check
fn precondition_check(@1: *const (), @2: isize, @3: usize)
{
    let @0: (); // return
    let this@1: *const (); // arg #1
    let count@2: isize; // arg #2
    let size@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: !; // anonymous local
    let @6: Arguments<'_>; // anonymous local
    let pieces@7: &'_ (Array<&'_ (Str), 1 : usize>); // local
    let @8: Array<&'_ (Str), 1 : usize>; // anonymous local
    let rhs@9: isize; // local
    let self@10: usize; // local
    let @11: i64; // anonymous local
    let b@12: bool; // local
    let @13: (i64, bool); // anonymous local
    let @14: i64; // anonymous local
    let @15: i64; // anonymous local
    let byte_offset@16: isize; // local
    let @17: (); // anonymous local
    let @18: usize; // anonymous local
    let overflow@19: bool; // local
    let @20: bool; // anonymous local
    let @21: bool; // anonymous local
    let @22: (u64, bool); // anonymous local
    let @23: u64; // anonymous local
    let @24: u64; // anonymous local
    let @25: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @26: &'_ (Slice<Argument<'_>>); // anonymous local
    let @27: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @28: Option<&'_ (Slice<Placeholder>)>[Sized<&'_ (Slice<Placeholder>)>]; // anonymous local

    storage_live(@5)
    storage_live(pieces@7)
    storage_live(self@10)
    storage_live(byte_offset@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    storage_live(@23)
    storage_live(@24)
    storage_live(@27)
    storage_live(@28)
    storage_live(@4)
    storage_live(overflow@19)
    storage_live(rhs@9)
    rhs@9 := cast<usize, isize>(copy (size@3))
    storage_live(b@12)
    storage_live(@11)
    storage_live(@13)
    storage_live(@14)
    @14 := cast<isize, i64>(copy (count@2))
    storage_live(@15)
    @15 := cast<isize, i64>(copy (rhs@9))
    @13 := move (@14) checked.* move (@15)
    storage_dead(@15)
    storage_dead(@14)
    @11 := copy ((@13).0)
    b@12 := copy ((@13).1)
    storage_dead(@13)
    byte_offset@16 := cast<i64, isize>(copy (@11))
    storage_dead(@11)
    if copy (b@12) {
        @17 := cold_path()
        storage_dead(b@12)
        storage_dead(rhs@9)
        storage_dead(overflow@19)
    }
    else {
        storage_dead(b@12)
        storage_dead(rhs@9)
        storage_live(self@10)
        self@10 := transmute<*const (), usize>(copy (this@1))
        storage_live(@21)
        storage_live(@18)
        @18 := cast<isize, usize>(copy (byte_offset@16))
        storage_live(@22)
        storage_live(@23)
        @23 := cast<usize, u64>(copy (self@10))
        storage_live(@24)
        @24 := cast<usize, u64>(copy (@18))
        @22 := move (@23) checked.+ move (@24)
        storage_dead(@24)
        storage_dead(@23)
        @21 := copy ((@22).1)
        storage_dead(@22)
        storage_dead(@18)
        storage_live(@20)
        @20 := copy (byte_offset@16) < const (0 : isize)
        overflow@19 := copy (@21) ^ move (@20)
        storage_dead(@20)
        storage_dead(@21)
        storage_dead(self@10)
        @4 := ~(copy (overflow@19))
        storage_dead(overflow@19)
        if move (@4) {
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    storage_live(@6)
    storage_live(@8)
    @8 := [const ("unsafe precondition(s) violated: ptr::offset requires the address calculation to not overflow\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety.")]
    pieces@7 := &@8
    storage_live(@25)
    @25 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(copy (pieces@7))
    storage_live(@26)
    @27 := {promoted_const}<'_, 1 : usize>
    @26 := @ArrayToSliceShared<'_, Argument<'_>, 0 : usize>(move (@27))
    @28 := Option::None {  }
    @6 := Arguments { 0: move (@25), 1: move (@28), 2: move (@26) }
    storage_dead(@26)
    storage_dead(@25)
    @5 := panic_nounwind_fmt<'_>(move (@6), const (false))
}

// Full name: core::ptr::const_ptr::{*const T}::offset
pub unsafe fn offset<T>(@1: *const T, @2: isize) -> *const T
where
    [@TraitClause0]: Sized<T>,
{
    let @0: *const T; // return
    let self@1: *const T; // arg #1
    let count@2: isize; // arg #2
    let @3: (); // anonymous local
    let @4: *const (); // anonymous local
    let @5: usize; // anonymous local
    let @6: bool; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := ub_checks<bool>
    if copy (@6) {
        storage_live(@4)
        @4 := cast<*const T, *const ()>(copy (self@1))
        storage_live(@5)
        @5 := size_of<T>
        @3 := precondition_check(move (@4), copy (count@2), move (@5))
        storage_dead(@5)
        storage_dead(@4)
    }
    else {
    }
    @0 := copy (self@1) offset copy (count@2)
    return
}

// Full name: core::slice::{Slice<T>}::as_ptr
pub fn as_ptr<'_0, T>(@1: &'_0 (Slice<T>)) -> *const T
where
    [@TraitClause0]: Sized<T>,

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let s@1: Array<i32, 2 : usize>; // local
    let ptr@2: *const i32; // local
    let @3: &'_ (Slice<i32>); // anonymous local
    let @4: &'_ (Array<i32, 2 : usize>); // anonymous local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: i32; // anonymous local
    let @8: *const i32; // anonymous local
    let @9: *const i32; // anonymous local

    storage_live(s@1)
    s@1 := [const (11 : i32), const (42 : i32)]
    storage_live(ptr@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &s@1
    @3 := @ArrayToSliceShared<'_, i32, 2 : usize>(move (@4))
    storage_dead(@4)
    ptr@2 := as_ptr<'_, i32>[Sized<i32>](move (@3))
    storage_dead(@3)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := copy (ptr@2)
    @8 := offset<i32>[Sized<i32>](move (@9), const (1 : isize))
    storage_dead(@9)
    @7 := copy (*(@8))
    @6 := move (@7) == const (42 : i32)
    if move (@6) {
    }
    else {
        storage_dead(@7)
        storage_dead(@8)
        panic(core::panicking::panic)
    }
    storage_dead(@7)
    storage_dead(@8)
    storage_dead(@6)
    storage_dead(@5)
    @0 := ()
    storage_dead(ptr@2)
    storage_dead(s@1)
    @0 := ()
    return
}



