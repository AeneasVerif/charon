# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub fn core::slice::{Slice<T>}::as_ptr<'_0, T>(@1: &'_0 (Slice<T>)) -> *const T
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::intrinsics::cold_path()

#[lang_item("panic_nounwind")]
pub fn core::panicking::panic_nounwind(@1: &'static (Str)) -> !

fn core::ptr::const_ptr::{*const T}::offset::precondition_check(@1: *const (), @2: isize, @3: usize)
{
    let @0: (); // return
    let this@1: *const (); // arg #1
    let count@2: isize; // arg #2
    let size@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: !; // anonymous local
    let rhs@6: isize; // local
    let self@7: usize; // local
    let @8: i64; // anonymous local
    let b@9: bool; // local
    let @10: (i64, bool); // anonymous local
    let @11: i64; // anonymous local
    let @12: i64; // anonymous local
    let byte_offset@13: isize; // local
    let @14: (); // anonymous local
    let @15: usize; // anonymous local
    let overflow@16: bool; // local
    let @17: bool; // anonymous local
    let @18: bool; // anonymous local
    let @19: (u64, bool); // anonymous local
    let @20: u64; // anonymous local
    let @21: u64; // anonymous local

    storage_live(@5)
    storage_live(self@7)
    storage_live(byte_offset@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@4)
    storage_live(overflow@16)
    storage_live(rhs@6)
    rhs@6 := cast<usize, isize>(copy (size@3))
    storage_live(b@9)
    storage_live(@8)
    storage_live(@10)
    storage_live(@11)
    @11 := cast<isize, i64>(copy (count@2))
    storage_live(@12)
    @12 := cast<isize, i64>(copy (rhs@6))
    @10 := move (@11) checked.* move (@12)
    storage_dead(@12)
    storage_dead(@11)
    @8 := copy ((@10).0)
    b@9 := copy ((@10).1)
    storage_dead(@10)
    byte_offset@13 := cast<i64, isize>(copy (@8))
    storage_dead(@8)
    if copy (b@9) {
        @14 := core::intrinsics::cold_path()
        storage_dead(b@9)
        storage_dead(rhs@6)
        storage_dead(overflow@16)
    }
    else {
        storage_dead(b@9)
        storage_dead(rhs@6)
        storage_live(self@7)
        self@7 := transmute<*const (), usize>(copy (this@1))
        storage_live(@18)
        storage_live(@15)
        @15 := cast<isize, usize>(copy (byte_offset@13))
        storage_live(@19)
        storage_live(@20)
        @20 := cast<usize, u64>(copy (self@7))
        storage_live(@21)
        @21 := cast<usize, u64>(copy (@15))
        @19 := move (@20) checked.+ move (@21)
        storage_dead(@21)
        storage_dead(@20)
        @18 := copy ((@19).1)
        storage_dead(@19)
        storage_dead(@15)
        storage_live(@17)
        @17 := copy (byte_offset@13) < const (0 : isize)
        overflow@16 := copy (@18) ^ move (@17)
        storage_dead(@17)
        storage_dead(@18)
        storage_dead(self@7)
        @4 := ~(copy (overflow@16))
        storage_dead(overflow@16)
        if move (@4) {
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    @5 := core::panicking::panic_nounwind(const ("unsafe precondition(s) violated: ptr::offset requires the address calculation to not overflow\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety."))
}

pub unsafe fn core::ptr::const_ptr::{*const T}::offset<T>(@1: *const T, @2: isize) -> *const T
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *const T; // return
    let self@1: *const T; // arg #1
    let count@2: isize; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: *const (); // anonymous local
    let @6: usize; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := cast<*const T, *const ()>(copy (self@1))
        storage_live(@6)
        @6 := size_of<T>
        @4 := core::ptr::const_ptr::{*const T}::offset::precondition_check(move (@5), copy (count@2), move (@6))
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    @0 := copy (self@1) offset copy (count@2)
    return
}

fn test_crate::main()
{
    let @0: (); // return
    let s@1: Array<i32, 2 : usize>; // local
    let ptr@2: *const i32; // local
    let @3: &'_ (Slice<i32>); // anonymous local
    let @4: &'_ (Array<i32, 2 : usize>); // anonymous local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: i32; // anonymous local
    let @8: *const i32; // anonymous local
    let @9: *const i32; // anonymous local

    storage_live(s@1)
    s@1 := [const (11 : i32), const (42 : i32)]
    storage_live(ptr@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &s@1
    @3 := @ArrayToSliceShared<'_, i32, 2 : usize>(move (@4))
    storage_dead(@4)
    ptr@2 := core::slice::{Slice<T>}::as_ptr<'_, i32>[core::marker::Sized<i32>](move (@3))
    storage_dead(@3)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := copy (ptr@2)
    @8 := core::ptr::const_ptr::{*const T}::offset<i32>[core::marker::Sized<i32>](move (@9), const (1 : isize))
    storage_dead(@9)
    @7 := copy (*(@8))
    @6 := move (@7) == const (42 : i32)
    if move (@6) {
    }
    else {
        storage_dead(@7)
        storage_dead(@8)
        panic(core::panicking::panic)
    }
    storage_dead(@7)
    storage_dead(@8)
    storage_dead(@6)
    storage_dead(@5)
    @0 := ()
    storage_dead(ptr@2)
    storage_dead(s@1)
    @0 := ()
    return
}



