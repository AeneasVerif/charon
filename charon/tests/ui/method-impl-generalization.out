# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = clone<'_0_0, Self>[Self]
    non-dyn-compatible
}

// Full name: core::clone::Clone::clone
#[lang_item("clone_fn")]
pub fn clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::marker::Copy
#[lang_item("copy")]
pub trait Copy<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Clone<Self>
    non-dyn-compatible
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: test_crate::Trait
trait Trait<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn method1 = test_crate::Trait::method1<Self>[Self]
    fn method2<T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Copy<T>> = test_crate::Trait::method2<Self, T>[Self, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

fn test_crate::Trait::method1<Self>(@1: Self, @2: &'static (u32)) -> bool
where
    [@TraitClause0]: Trait<Self>,

fn test_crate::Trait::method2<Self, T>(@1: Self, @2: T)
where
    [@TraitClause0]: Trait<Self>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Copy<T>,

// Full name: test_crate::{impl Trait for ()}::method1
fn {impl Trait for ()}::method1(@1: (), @2: &'static (u32)) -> bool
{
    let @0: bool; // return
    let self@1: (); // arg #1
    let _other@2: &'_ (u32); // arg #2

    @0 := const (true)
    return
}

// Full name: test_crate::{impl Trait for ()}::method2
fn {impl Trait for ()}::method2<T>(@1: (), @2: T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: (); // return
    let self@1: (); // arg #1
    let _other@2: T; // arg #2

    @0 := ()
    drop[Drop<T>] _other@2
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait for ()}
impl Trait for () {
    parent_clause0 = Sized<()>
    fn method1 = {impl Trait for ()}::method1
    fn method2<T, [@TraitClause0]: Sized<T>> = {impl Trait for ()}::method2<T>[@TraitClause0_0]
    non-dyn-compatible
}

// Full name: test_crate::MyCompare
trait MyCompare<Self, Other>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Other>
    fn compare = test_crate::MyCompare::compare<Self, Other>[Self]
    non-dyn-compatible
}

fn test_crate::MyCompare::compare<Self, Other>(@1: Self, @2: Other) -> bool
where
    [@TraitClause0]: MyCompare<Self, Other>,

// Full name: test_crate::{impl MyCompare<&'a (())> for &'a (())}::compare
fn {impl MyCompare<&'a (())> for &'a (())}::compare<'a>(@1: &'a (()), @2: &'a (())) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (()); // arg #1
    let _other@2: &'_ (()); // arg #2

    @0 := const (true)
    return
}

// Full name: test_crate::{impl MyCompare<&'a (())> for &'a (())}
impl<'a> MyCompare<&'a (())> for &'a (()) {
    parent_clause0 = Sized<&'_ (())>
    parent_clause1 = Sized<&'_ (())>
    fn compare = {impl MyCompare<&'a (())> for &'a (())}::compare<'a>
    non-dyn-compatible
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: (); // anonymous local
    let @3: &'_ (u32); // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: u32; // anonymous local
    let @6: bool; // anonymous local
    let @7: &'_ (()); // anonymous local
    let @8: (); // anonymous local
    let @9: &'_ (()); // anonymous local
    let @10: &'_ (()); // anonymous local
    let @11: (); // anonymous local

    storage_live(@1)
    storage_live(@2)
    @2 := ()
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := const (1 : u32)
    @4 := &@5
    @3 := &*(@4)
    @1 := {impl Trait for ()}::method1(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@1)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    // TODO: this gives incorrect predicates
    // let _ = ().method2(false);
    // Not allowed to use the more precise signature.
    // let _ = ().method2(String::new());
    @8 := ()
    @7 := &@8
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    @11 := ()
    @10 := &@11
    @9 := &*(@10)
    @6 := {impl MyCompare<&'a (())> for &'a (())}::compare<'_>(move (@7), move (@9))
    storage_dead(@9)
    storage_dead(@7)
    storage_dead(@11)
    storage_dead(@10)
    storage_dead(@8)
    storage_dead(@6)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::Foo
trait Foo<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn foo<'a, 'b> = test_crate::Foo::foo<'a, 'b, Self>[Self]
    non-dyn-compatible
}

fn test_crate::Foo::foo<'a, 'b, Self>(@1: &'a (()), @2: &'b (())) -> &'a (())
where
    [@TraitClause0]: Foo<Self>,

// Full name: test_crate::{impl Foo for ()}::foo
fn {impl Foo for ()}::foo<'a, 'b>(@1: &'b (()), @2: &'a (())) -> &'b (())
{
    let @0: &'_ (()); // return
    let x@1: &'_ (()); // arg #1
    let y@2: &'_ (()); // arg #2

    @0 := copy (x@1)
    return
}

// Full name: test_crate::{impl Foo for ()}
impl Foo for () {
    parent_clause0 = MetaSized<()>
    fn foo<'a, 'b> = {impl Foo for ()}::foo<'a, 'b>
    non-dyn-compatible
}

// Full name: test_crate::call_foo
fn call_foo<'e>(@1: &'e (())) -> &'e (())
{
    let @0: &'_ (()); // return
    let x@1: &'_ (()); // arg #1
    let @2: &'_ (()); // anonymous local
    let @3: &'_ (()); // anonymous local
    let @4: &'_ (()); // anonymous local
    let @5: &'_ (()); // anonymous local
    let @6: (); // anonymous local

    storage_live(@2)
    storage_live(@3)
    // Calls have erased lifetimes so we can't notice the discrepancy if there is one.
    @3 := &*(x@1)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := ()
    @5 := &@6
    @4 := &*(@5)
    @2 := {impl Foo for ()}::foo<'_, '_>(move (@3), move (@4))
    @0 := &*(@2)
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@2)
    return
}



