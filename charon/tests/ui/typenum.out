# Final LLBC before serialization:

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::UInt
pub struct UInt<U, B> {
  U,
  B,
}

// Full name: test_crate::UTerm
pub struct UTerm {}

// Full name: test_crate::UTerm::{impl Drop for UTerm}
impl Drop for UTerm {
    fn drop<'_0> = {impl Drop for UTerm}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::UTerm::{impl Drop for UTerm}::drop
fn {impl Drop for UTerm}::drop<'_0>(@1: &'_0 mut (UTerm))
{
    let @0: (); // return
    let @1: *mut UTerm; // arg #1
    let @2: &'_ mut (UTerm); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::B0
pub struct B0 {}

// Full name: test_crate::B0::{impl Drop for B0}
impl Drop for B0 {
    fn drop<'_0> = {impl Drop for B0}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::B0::{impl Drop for B0}::drop
fn {impl Drop for B0}::drop<'_0>(@1: &'_0 mut (B0))
{
    let @0: (); // return
    let @1: *mut B0; // arg #1
    let @2: &'_ mut (B0); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::LongType
pub type LongType = UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B0>, B0>, B0>, B0>, B0>, B0>

// Full name: test_crate::foo
pub fn foo<T>()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::main
pub fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local

    @0 := ()
    storage_live(@1)
    @1 := foo<UInt<UInt<UInt<UInt<UInt<UInt<UTerm, B0>, B0>, B0>, B0>, B0>, B0>>()
    storage_dead(@1)
    @0 := ()
    return
}



