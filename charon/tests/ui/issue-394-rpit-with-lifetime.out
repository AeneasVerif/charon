# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub opaque type core::iter::sources::from_fn::FromFn<F>
  where
      [@TraitClause0]: core::marker::Sized<F>,

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn test_crate::sparse_transitions::closure<'a, '_1>(@1: &'_1 mut (())) -> core::option::Option<u8>[core::marker::Sized<u8>]
{
    let @0: core::option::Option<u8>[core::marker::Sized<u8>]; // return
    let state@1: &'_1 mut (()); // arg #1

    @0 := core::option::Option::None {  }
    return
}

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

pub fn core::iter::sources::from_fn::from_fn<T, F>(@1: F) -> core::iter::sources::from_fn::FromFn<F>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::ops::function::FnMut<F, ()>,
    @TraitClause2::parent_clause0::Output = core::option::Option<T>[@TraitClause0],

fn test_crate::sparse_transitions<'a>() -> core::iter::sources::from_fn::FromFn<test_crate::sparse_transitions::closure>[core::marker::Sized<test_crate::sparse_transitions::closure>]
{
    let @0: core::iter::sources::from_fn::FromFn<test_crate::sparse_transitions::closure>[core::marker::Sized<test_crate::sparse_transitions::closure>]; // return
    let @1: test_crate::sparse_transitions::closure; // anonymous local

    storage_live(@1)
    @1 := {test_crate::sparse_transitions::closure<'_>} {}
    @0 := core::iter::sources::from_fn::from_fn<u8, test_crate::sparse_transitions::closure>[core::marker::Sized<u8>, core::marker::Sized<test_crate::sparse_transitions::closure>, core::ops::function::FnMut<test_crate::sparse_transitions::closure, ()>](move (@1))
    storage_dead(@1)
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



