# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::V
struct V<T, const N : usize>
  where
      [@TraitClause0]: Sized<T>,
{
  x: Array<T, const N : usize>,
}

fn test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>() -> usize
where
    [@TraitClause0]: Sized<T>,
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

const test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>: usize
  where
      [@TraitClause0]: Sized<T>,
 = test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN()

// Full name: test_crate::HasLen
trait HasLen<Self>
{
    const LEN : usize
}

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}#1::LEN
fn {impl HasLen for Array<(), const N : usize>}#1::LEN<const N : usize>() -> usize
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}#1::LEN
const {impl HasLen for Array<(), const N : usize>}#1::LEN<const N : usize>: usize = {impl HasLen for Array<(), const N : usize>}#1::LEN()

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}#1
impl<const N : usize> HasLen for Array<(), const N : usize> {
    const LEN = {impl HasLen for Array<(), const N : usize>}#1::LEN<const N : usize>
}

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}#2::LEN
fn {impl HasLen for Array<bool, const N : usize>}#2::LEN<const N : usize>() -> usize
{
    let @0: usize; // return

    @0 := const (const N : usize) + const (1 : usize)
    return
}

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}#2::LEN
const {impl HasLen for Array<bool, const N : usize>}#2::LEN<const N : usize>: usize = {impl HasLen for Array<bool, const N : usize>}#2::LEN()

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}#2
impl<const N : usize> HasLen for Array<bool, const N : usize> {
    const LEN = {impl HasLen for Array<bool, const N : usize>}#2::LEN<const N : usize>
}

// Full name: test_crate::HasDefaultLen
pub trait HasDefaultLen<Self, const M : usize>
{
    const LEN : usize
}

pub fn test_crate::HasDefaultLen::LEN<Self, const M : usize>() -> usize
{
    let @0: usize; // return

    @0 := const (const M : usize)
    return
}

pub const test_crate::HasDefaultLen::LEN<Self, const M : usize>: usize = test_crate::HasDefaultLen::LEN()

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<(), const N : usize>}#3
impl<const N : usize> HasDefaultLen<const N : usize> for Array<(), const N : usize> {
    const LEN = test_crate::HasDefaultLen::LEN<Array<(), const N : usize>, const N : usize>
}

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN
pub fn {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN<const N : usize>() -> usize
{
    let @0: usize; // return
    let @1: bool; // anonymous local

    storage_live(@1)
    @1 := const (true)
    if move (@1) {
        @0 := const (const N : usize)
    }
    else {
        @0 := const ({impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4<const N : usize>::LEN)
    }
    storage_dead(@1)
    return
}

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN
pub const {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN<const N : usize>: usize = {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN()

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4
impl<const N : usize> HasDefaultLen<const N : usize> for Array<bool, const N : usize> {
    const LEN = {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}#4::LEN<const N : usize>
}



