# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::V
struct V<T, const N : usize>
where
    [@TraitClause0]: Sized<T>,
{
  x: Array<T, const N : usize>,
}

fn test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>() -> usize
where
    [@TraitClause0]: Sized<T>,
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

const test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>: usize
where
    [@TraitClause0]: Sized<T>,
 = test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN()

// Full name: test_crate::HasLen
trait HasLen<Self>
{
    const LEN : usize
}

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}::LEN
fn {impl HasLen for Array<(), const N : usize>}::LEN<const N : usize>() -> usize
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}::LEN
const {impl HasLen for Array<(), const N : usize>}::LEN<const N : usize>: usize = {impl HasLen for Array<(), const N : usize>}::LEN()

// Full name: test_crate::{impl HasLen for Array<(), const N : usize>}
impl<const N : usize> HasLen for Array<(), const N : usize> {
    const LEN = {impl HasLen for Array<(), const N : usize>}::LEN<const N : usize>
}

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}::LEN
fn {impl HasLen for Array<bool, const N : usize>}::LEN<const N : usize>() -> usize
{
    let @0: usize; // return
    let @1: usize; // anonymous local

    storage_live(@1)
    @1 := const (const N : usize) + const (1 : usize)
    @0 := move (@1)
    return
}

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}::LEN
const {impl HasLen for Array<bool, const N : usize>}::LEN<const N : usize>: usize = {impl HasLen for Array<bool, const N : usize>}::LEN()

// Full name: test_crate::{impl HasLen for Array<bool, const N : usize>}
impl<const N : usize> HasLen for Array<bool, const N : usize> {
    const LEN = {impl HasLen for Array<bool, const N : usize>}::LEN<const N : usize>
}

// Full name: test_crate::Wrapper
struct Wrapper<T>
where
    [@TraitClause0]: Sized<T>,
{
  T,
}

// Full name: test_crate::{impl HasLen for Wrapper<T>[@TraitClause0]}::LEN
fn {impl HasLen for Wrapper<T>[@TraitClause0]}::LEN<T>() -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: HasLen<T>,
{
    let @0: usize; // return

    @0 := const (@TraitClause1::LEN)
    return
}

// Full name: test_crate::{impl HasLen for Wrapper<T>[@TraitClause0]}::LEN
const {impl HasLen for Wrapper<T>[@TraitClause0]}::LEN<T>: usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: HasLen<T>,
 = {impl HasLen for Wrapper<T>[@TraitClause0]}::LEN()

// Full name: test_crate::{impl HasLen for Wrapper<T>[@TraitClause0]}
impl<T> HasLen for Wrapper<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: HasLen<T>,
{
    const LEN = {impl HasLen for Wrapper<T>[@TraitClause0]}::LEN<T>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::HasDefaultLen
pub trait HasDefaultLen<Self, const M : usize>
{
    const LEN : usize
}

pub fn test_crate::HasDefaultLen::LEN<Self, const M : usize>() -> usize
where
    [@TraitClause0]: HasDefaultLen<Self, const M : usize>,
{
    let @0: usize; // return

    @0 := const (const M : usize)
    return
}

pub const test_crate::HasDefaultLen::LEN<Self, const M : usize>: usize
where
    [@TraitClause0]: HasDefaultLen<Self, const M : usize>,
 = test_crate::HasDefaultLen::LEN()

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<(), const N : usize>}
impl<const N : usize> HasDefaultLen<const N : usize> for Array<(), const N : usize> {
    const LEN = test_crate::HasDefaultLen::LEN<Array<(), const N : usize>, const N : usize>[{impl HasDefaultLen<const N : usize> for Array<(), const N : usize>}<const N : usize>]
}

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN
pub fn {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN<const N : usize>() -> usize
{
    let @0: usize; // return
    let @1: bool; // anonymous local

    storage_live(@1)
    @1 := const (true)
    if move (@1) {
        @0 := const (const N : usize)
    }
    else {
        @0 := const ({impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}<const N : usize>::LEN)
    }
    storage_dead(@1)
    return
}

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN
pub const {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN<const N : usize>: usize = {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN()

// Full name: test_crate::{impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}
impl<const N : usize> HasDefaultLen<const N : usize> for Array<bool, const N : usize> {
    const LEN = {impl HasDefaultLen<const N : usize> for Array<bool, const N : usize>}::LEN<const N : usize>
}

// Full name: test_crate::AlsoHasLen
trait AlsoHasLen<Self>
{
    parent_clause0 : [@TraitClause0]: HasLen<Self>
    const ALSO_LEN : usize
}

fn test_crate::AlsoHasLen::ALSO_LEN<Self>() -> usize
where
    [@TraitClause0]: AlsoHasLen<Self>,
{
    let @0: usize; // return
    let @1: usize; // anonymous local

    storage_live(@1)
    @1 := const (@TraitClause0::parent_clause0::LEN) + const (1 : usize)
    @0 := move (@1)
    return
}

const test_crate::AlsoHasLen::ALSO_LEN<Self>: usize
where
    [@TraitClause0]: AlsoHasLen<Self>,
 = test_crate::AlsoHasLen::ALSO_LEN()

// Full name: test_crate::{impl AlsoHasLen for Array<(), const N : usize>}
impl<const N : usize> AlsoHasLen for Array<(), const N : usize> {
    parent_clause0 = {impl HasLen for Array<(), const N : usize>}<const N : usize>
    const ALSO_LEN = test_crate::AlsoHasLen::ALSO_LEN<Array<(), const N : usize>>[{impl AlsoHasLen for Array<(), const N : usize>}<const N : usize>]
}



