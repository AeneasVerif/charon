[ INFO charon_driver::driver:338] [translate]: # Final LLBC before serialization:

fn test_crate::div_signed(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    @3 := copy (x@1)
    @4 := copy (y@2)
    @0 := move (@3) / move (@4)
    drop @4
    drop @3
    return
}

global test_crate::div_signed_with_constant::FOO  {
    let @0: i32; // return

    @0 := const (42 : i32)
    return
}

fn test_crate::div_signed_with_constant() -> i32
{
    let @0: i32; // return
    let @1: bool; // anonymous local
    let @2: bool; // anonymous local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    @1 := const (2 : i32) == const (-1 : i32)
    @3 := test_crate::div_signed_with_constant::FOO
    @2 := move (@3) == const (-2147483648 : i32)
    @4 := test_crate::div_signed_with_constant::FOO
    @0 := move (@4) / const (2 : i32)
    return
}

fn test_crate::div_unsigned(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    @3 := copy (x@1)
    @4 := copy (y@2)
    @0 := move (@3) / move (@4)
    drop @4
    drop @3
    return
}

fn test_crate::div_unsigned_to_slice<'_0>(@1: &'_0 mut (Slice<u32>), @2: u32)
{
    let @0: (); // return
    let result@1: &'_ mut (Slice<u32>); // arg #1
    let x@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: usize; // anonymous local
    let @5: (); // anonymous local
    let @6: &'_ mut (Slice<u32>); // anonymous local
    let @7: &'_ mut (u32); // anonymous local

    @3 := copy (x@2)
    @4 := const (0 : usize)
    @6 := &mut *(result@1)
    @7 := @SliceIndexMut<'_, u32>(move (@6), copy (@4))
    *(@7) := move (@3) / const (3329 : u32)
    drop @3
    drop @4
    @5 := ()
    @0 := move (@5)
    @0 := ()
    return
}

fn test_crate::div_signed_to_slice<'_0>(@1: &'_0 mut (Slice<i32>), @2: i32)
{
    let @0: (); // return
    let result@1: &'_ mut (Slice<i32>); // arg #1
    let x@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: usize; // anonymous local
    let @5: (); // anonymous local
    let @6: &'_ mut (Slice<i32>); // anonymous local
    let @7: &'_ mut (i32); // anonymous local

    @3 := copy (x@2)
    @4 := const (0 : usize)
    @6 := &mut *(result@1)
    @7 := @SliceIndexMut<'_, i32>(move (@6), copy (@4))
    *(@7) := move (@3) / const (3329 : i32)
    drop @3
    drop @4
    @5 := ()
    @0 := move (@5)
    @0 := ()
    return
}



