# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::fmt::rt::Argument
#[lang_item("format_argument")]
pub opaque type Argument<'a>

// Full name: core::fmt::rt::{Arguments<'a>}::new_const
pub fn new_const<'a, const N : usize>(@1: &'a (Array<&'static (Str), const N : usize>)) -> Arguments<'a>

// Full name: core::fmt::rt::{Arguments<'a>}::new_v1
pub fn new_v1<'a, const P : usize, const A : usize>(@1: &'a (Array<&'static (Str), const P : usize>), @2: &'a (Array<Argument<'a>, const A : usize>)) -> Arguments<'a>

// Full name: test_crate::panic1
fn panic1()
{
    let @0: (); // return

    panic(core::panicking::panic_explicit)
}

// Full name: test_crate::panic2
fn panic2()
{
    let @0: (); // return
    let @1: Arguments<'_>; // anonymous local
    let @2: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: Array<&'_ (Str), 1 : usize>; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := [const ("O no!")]
    @3 := &@4
    @2 := &*(@3)
    @1 := new_const<'_, 1 : usize>(move (@2))
    storage_dead(@2)
    panic(core::panicking::panic_fmt)
}

// Full name: test_crate::panic3
fn panic3()
{
    let @0: (); // return
    let @1: Arguments<'_>; // anonymous local
    let @2: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @5: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @6: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @7: Array<Argument<'_>, 0 : usize>; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := [const ("O no!")]
    @3 := &@4
    @2 := &*(@3)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := []
    @6 := &@7
    @5 := &*(@6)
    @1 := new_v1<'_, 1 : usize, 0 : usize>(move (@2), move (@5))
    storage_dead(@5)
    storage_dead(@2)
    panic(core::panicking::panic_fmt)
}

// Full name: test_crate::panic4
fn panic4()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: bool; // anonymous local

    storage_live(@1)
    storage_live(@2)
    @2 := const (false)
    assert(move (@2) == true)
    storage_dead(@2)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::panic5
fn panic5()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: bool; // anonymous local
    let @3: Arguments<'_>; // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @6: Array<&'_ (Str), 1 : usize>; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@1)
    storage_live(@2)
    @2 := const (false)
    if move (@2) {
    }
    else {
        storage_live(@3)
        storage_live(@4)
        storage_live(@5)
        storage_live(@6)
        @6 := [const ("assert failed")]
        @5 := &@6
        @4 := &*(@5)
        @3 := new_const<'_, 1 : usize>(move (@4))
        storage_dead(@4)
        panic(core::panicking::panic_fmt)
    }
    storage_dead(@2)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::panic6
fn panic6()
{
    let @0: (); // return

    panic(core::panicking::panic)
}

// Full name: test_crate::panic7
fn panic7()
{
    let @0: (); // return
    let @1: Arguments<'_>; // anonymous local
    let @2: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @5: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @6: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @7: Array<Argument<'_>, 0 : usize>; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := [const ("internal error: entered unreachable code: can't reach this")]
    @3 := &@4
    @2 := &*(@3)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := []
    @6 := &@7
    @5 := &*(@6)
    @1 := new_v1<'_, 1 : usize, 0 : usize>(move (@2), move (@5))
    storage_dead(@5)
    storage_dead(@2)
    panic(core::panicking::panic_fmt)
}

// Full name: test_crate::panic8
fn panic8()
{
    let @0: (); // return

    panic(core::panicking::panic)
}

// Full name: test_crate::panic9
fn panic9()
{
    let @0: (); // return

    panic(std::panicking::begin_panic)
}



