# Final LLBC before serialization:

Unknown decl: 9

fn test_crate::panic1()
{
    let @0: (); // return

    panic(core::panicking::panic_explicit)
}

opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn core::fmt::{core::fmt::Arguments<'a>#2}::new_const<'a>(@1: &'a (Slice<&'static (Str)>)) -> core::fmt::Arguments<'a>

fn test_crate::panic2()
{
    let @0: (); // return
    let @1: core::fmt::Arguments<'_>; // anonymous local
    let @2: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: Array<&'_ (Str), 1 : usize>; // anonymous local

    @5 := [const ("O no!"); 1 : usize]
    @4 := &@5
    @3 := &*(@4)
    @2 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(move (@3))
    drop @3
    @1 := core::fmt::{core::fmt::Arguments<'a>#2}::new_const<'_>(move (@2))
    drop @2
    panic(core::panicking::panic_fmt)
}

opaque type core::fmt::rt::Argument<'a>

fn core::fmt::rt::{core::fmt::rt::Argument<'a>#1}::none<'a>() -> Array<core::fmt::rt::Argument<'a>, 0 : usize>

fn core::fmt::{core::fmt::Arguments<'a>#2}::new_v1<'a>(@1: &'a (Slice<&'static (Str)>), @2: &'a (Slice<core::fmt::rt::Argument<'a>>)) -> core::fmt::Arguments<'a>

fn test_crate::panic3()
{
    let @0: (); // return
    let @1: core::fmt::Arguments<'_>; // anonymous local
    let @2: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @6: &'_ (Slice<core::fmt::rt::Argument<'_>>); // anonymous local
    let @7: &'_ (Array<core::fmt::rt::Argument<'_>, 0 : usize>); // anonymous local
    let @8: &'_ (Array<core::fmt::rt::Argument<'_>, 0 : usize>); // anonymous local
    let @9: Array<core::fmt::rt::Argument<'_>, 0 : usize>; // anonymous local

    @5 := [const ("O no!"); 1 : usize]
    @4 := &@5
    @3 := &*(@4)
    @2 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(move (@3))
    drop @3
    @9 := core::fmt::rt::{core::fmt::rt::Argument<'a>#1}::none<'_>()
    @8 := &@9
    @7 := &*(@8)
    @6 := @ArrayToSliceShared<'_, core::fmt::rt::Argument<'_>, 0 : usize>(move (@7))
    drop @7
    @1 := core::fmt::{core::fmt::Arguments<'a>#2}::new_v1<'_>(move (@2), move (@6))
    drop @6
    drop @2
    panic(core::panicking::panic_fmt)
}

fn test_crate::panic4()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: bool; // anonymous local
    let @3: (); // anonymous local
    let @4: (); // anonymous local

    @2 := const (false)
    if move (@2) {
        nop
    }
    else {
        panic(core::panicking::panic)
    }
    @3 := ()
    @1 := move (@3)
    drop @2
    drop @1
    @4 := ()
    @0 := move (@4)
    @0 := ()
    return
}

fn test_crate::panic5()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: bool; // anonymous local
    let @3: core::fmt::Arguments<'_>; // anonymous local
    let @4: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @5: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @6: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @7: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @8: (); // anonymous local
    let @9: (); // anonymous local

    @2 := const (false)
    if move (@2) {
        nop
    }
    else {
        @7 := [const ("assert failed"); 1 : usize]
        @6 := &@7
        @5 := &*(@6)
        @4 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(move (@5))
        drop @5
        @3 := core::fmt::{core::fmt::Arguments<'a>#2}::new_const<'_>(move (@4))
        drop @4
        panic(core::panicking::panic_fmt)
    }
    @8 := ()
    @1 := move (@8)
    drop @2
    drop @1
    @9 := ()
    @0 := move (@9)
    @0 := ()
    return
}

fn test_crate::panic6()
{
    let @0: (); // return

    panic(core::panicking::panic)
}

fn test_crate::panic7()
{
    let @0: (); // return
    let @1: core::fmt::Arguments<'_>; // anonymous local
    let @2: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @6: &'_ (Slice<core::fmt::rt::Argument<'_>>); // anonymous local
    let @7: &'_ (Array<core::fmt::rt::Argument<'_>, 0 : usize>); // anonymous local
    let @8: &'_ (Array<core::fmt::rt::Argument<'_>, 0 : usize>); // anonymous local
    let @9: Array<core::fmt::rt::Argument<'_>, 0 : usize>; // anonymous local

    @5 := [const ("internal error: entered unreachable code: can't reach this"); 1 : usize]
    @4 := &@5
    @3 := &*(@4)
    @2 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(move (@3))
    drop @3
    @9 := core::fmt::rt::{core::fmt::rt::Argument<'a>#1}::none<'_>()
    @8 := &@9
    @7 := &*(@8)
    @6 := @ArrayToSliceShared<'_, core::fmt::rt::Argument<'_>, 0 : usize>(move (@7))
    drop @7
    @1 := core::fmt::{core::fmt::Arguments<'a>#2}::new_v1<'_>(move (@2), move (@6))
    drop @6
    drop @2
    panic(core::panicking::panic_fmt)
}

fn test_crate::panic8()
{
    let @0: (); // return

    panic(core::panicking::panic)
}

fn test_crate::panic9()
{
    let @0: (); // return

    panic(std::panicking::begin_panic)
}



