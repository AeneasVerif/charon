# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

#[lang_item("Rc")]
pub opaque type alloc::rc::Rc<T, A>
  where
      [@TraitClause0]: core::marker::Sized<A>,

#[lang_item("String")]
pub opaque type alloc::string::String

pub fn alloc::rc::{alloc::rc::Rc<T, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]}#8::new<T>(@1: T) -> alloc::rc::Rc<T, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]
where
    [@TraitClause0]: core::marker::Sized<T>,

#[lang_item("string_new")]
pub fn alloc::string::{alloc::string::String}::new() -> alloc::string::String

pub fn alloc::string::{impl core::clone::Clone for alloc::string::String}#6::clone<'_0>(@1: &'_0 (alloc::string::String)) -> alloc::string::String

fn test_crate::foo()
{
    let @0: (); // return
    let array@1: Array<i32, 2 : usize>; // local
    let @2: &'_ (Slice<i32>); // anonymous local
    let @3: &'_ (Array<i32, 2 : usize>); // anonymous local
    let @4: &'_ (Array<i32, 2 : usize>); // anonymous local
    let @5: alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @6: alloc::boxed::Box<Array<i32, 2 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @7: Array<i32, 2 : usize>; // anonymous local
    let @8: alloc::rc::Rc<Slice<i32>, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @9: alloc::rc::Rc<Array<i32, 2 : usize>, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @10: Array<i32, 2 : usize>; // anonymous local
    let string@11: alloc::string::String; // local
    let @12: &'_ (dyn (exists(TODO))); // anonymous local
    let @13: &'_ (alloc::string::String); // anonymous local
    let @14: &'_ (alloc::string::String); // anonymous local
    let @15: alloc::boxed::Box<dyn (exists(TODO))>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @16: alloc::boxed::Box<alloc::string::String>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @17: alloc::string::String; // anonymous local
    let @18: &'_ (alloc::string::String); // anonymous local
    let @19: alloc::rc::Rc<dyn (exists(TODO)), alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @20: alloc::rc::Rc<alloc::string::String, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @21: alloc::string::String; // anonymous local
    let @22: &'_ (alloc::string::String); // anonymous local

    storage_live(array@1)
    array@1 := @ArrayRepeat<'_, i32, 2 : usize>(const (0 : i32))
    @fake_read(array@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &array@1
    @3 := &*(@4)
    @2 := @ArrayToSliceShared<'_, i32, 2 : usize>(move (@3))
    storage_dead(@3)
    @fake_read(@2)
    storage_dead(@4)
    storage_dead(@2)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (array@1)
    @6 := @BoxNew<Array<i32, 2 : usize>>[core::marker::Sized<Array<i32, 2 : usize>>](move (@7))
    @5 := unsize_cast<alloc::boxed::Box<Array<i32, 2 : usize>>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]>(move (@6))
    drop @6
    storage_dead(@7)
    storage_dead(@6)
    @fake_read(@5)
    drop @5
    storage_dead(@5)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    @10 := copy (array@1)
    @9 := alloc::rc::{alloc::rc::Rc<T, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]}#8::new<Array<i32, 2 : usize>>[core::marker::Sized<Array<i32, 2 : usize>>](move (@10))
    @8 := unsize_cast<alloc::rc::Rc<Array<i32, 2 : usize>, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>], alloc::rc::Rc<Slice<i32>, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]>(move (@9))
    drop @9
    storage_dead(@10)
    storage_dead(@9)
    @fake_read(@8)
    drop @8
    storage_dead(@8)
    storage_live(string@11)
    string@11 := alloc::string::{alloc::string::String}::new()
    @fake_read(string@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    @14 := &string@11
    @13 := &*(@14)
    @12 := unsize_cast<&'_ (alloc::string::String), &'_ (dyn (exists(TODO)))>(move (@13))
    storage_dead(@13)
    @fake_read(@12)
    storage_dead(@14)
    storage_dead(@12)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    @18 := &string@11
    @17 := alloc::string::{impl core::clone::Clone for alloc::string::String}#6::clone<'_>(move (@18))
    storage_dead(@18)
    @16 := @BoxNew<alloc::string::String>[core::marker::Sized<alloc::string::String>](move (@17))
    @15 := unsize_cast<alloc::boxed::Box<alloc::string::String>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<dyn (exists(TODO))>[core::marker::Sized<alloc::alloc::Global>]>(move (@16))
    drop @16
    storage_dead(@17)
    storage_dead(@16)
    @fake_read(@15)
    drop @15
    storage_dead(@15)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    @22 := &string@11
    @21 := alloc::string::{impl core::clone::Clone for alloc::string::String}#6::clone<'_>(move (@22))
    storage_dead(@22)
    @20 := alloc::rc::{alloc::rc::Rc<T, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]}#8::new<alloc::string::String>[core::marker::Sized<alloc::string::String>](move (@21))
    @19 := unsize_cast<alloc::rc::Rc<alloc::string::String, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>], alloc::rc::Rc<dyn (exists(TODO)), alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>]>(move (@20))
    drop @20
    storage_dead(@21)
    storage_dead(@20)
    @fake_read(@19)
    drop @19
    storage_dead(@19)
    @0 := ()
    drop string@11
    storage_dead(string@11)
    storage_dead(array@1)
    @0 := ()
    return
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

impl alloc::string::{impl core::clone::Clone for alloc::string::String}#6 : core::clone::Clone<alloc::string::String>
{
    parent_clause0 = core::marker::Sized<alloc::string::String>
    fn clone<'_0> = alloc::string::{impl core::clone::Clone for alloc::string::String}#6::clone<'_0_0>
}



