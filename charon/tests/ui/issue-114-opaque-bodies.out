# Final LLBC before serialization:

pub fn issue_114_opaque_bodies_aux::inline_always() -> u32
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

pub fn issue_114_opaque_bodies_aux::inline_sometimes() -> u32
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

pub fn issue_114_opaque_bodies_aux::inline_never() -> u32

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub fn issue_114_opaque_bodies_aux::inline_generic<T>() -> u32
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

fn test_crate::use_inlines() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local
    let @2: u32; // anonymous local
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @3 := issue_114_opaque_bodies_aux::inline_always()
    storage_live(@4)
    @4 := issue_114_opaque_bodies_aux::inline_sometimes()
    @2 := copy (@3) + copy (@4)
    storage_dead(@4)
    storage_dead(@3)
    storage_live(@5)
    @5 := issue_114_opaque_bodies_aux::inline_never()
    @1 := copy (@2) + copy (@5)
    storage_dead(@5)
    storage_dead(@2)
    storage_live(@6)
    @6 := issue_114_opaque_bodies_aux::inline_generic<bool>[core::marker::Sized<bool>]()
    @0 := copy (@1) + copy (@6)
    storage_dead(@6)
    storage_dead(@1)
    return
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


pub fn core::bool::{bool}::then_some<T>(@1: bool, @2: T) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<T>[@TraitClause0]; // return
    let self@1: bool; // arg #1
    let t@2: T; // arg #2
    let @3: T; // anonymous local

    if copy (self@1) {
    }
    else {
        @0 := core::option::Option::None {  }
        drop t@2
        return
    }
    storage_live(@3)
    @3 := move (t@2)
    @0 := core::option::Option::Some { 0: move (@3) }
    storage_dead(@3)
    return
}

fn test_crate::bool_to_opt(@1: bool) -> core::option::Option<()>[core::marker::Sized<()>]
{
    let @0: core::option::Option<()>[core::marker::Sized<()>]; // return
    let b@1: bool; // arg #1
    let @2: bool; // anonymous local
    let @3: (); // anonymous local

    storage_live(@2)
    @2 := copy (b@1)
    storage_live(@3)
    @3 := ()
    @0 := core::bool::{bool}::then_some<()>[core::marker::Sized<()>](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

pub fn core::convert::num::{impl core::convert::From<i32> for i64}#83::from(@1: i32) -> i64
{
    let @0: i64; // return
    let small@1: i32; // arg #1

    @0 := cast<i32, i64>(copy (small@1))
    return
}

fn test_crate::convert(@1: i32) -> i64
{
    let @0: i64; // return
    let x@1: i32; // arg #1
    let @2: i32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := core::convert::num::{impl core::convert::From<i32> for i64}#83::from(move (@2))
    storage_dead(@2)
    return
}

#[lang_item("NonNull")]
pub struct core::ptr::non_null::NonNull<T> =
{
  pointer: *const T,
}

#[lang_item("phantom_data")]
pub struct core::marker::PhantomData<T> = {}

#[lang_item("ptr_unique")]
pub struct core::ptr::unique::Unique<T> =
{
  pointer: core::ptr::non_null::NonNull<T>,
  _marker: core::marker::PhantomData<T>,
}

pub struct core::num::niche_types::UsizeNoHighBit =
{
  usize,
}

struct alloc::raw_vec::RawVecInner<A>
  where
      [@TraitClause0]: core::marker::Sized<A>,
 =
{
  ptr: core::ptr::unique::Unique<u8>,
  cap: core::num::niche_types::UsizeNoHighBit,
  alloc: A,
}

struct alloc::raw_vec::RawVec<T, A>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<A>,
 =
{
  inner: alloc::raw_vec::RawVecInner<A>[@TraitClause1],
  _marker: core::marker::PhantomData<T>,
}

#[lang_item("Vec")]
pub struct alloc::vec::Vec<T, A>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<A>,
 =
{
  buf: alloc::raw_vec::RawVec<T, A>[@TraitClause0, @TraitClause1],
  len: usize,
}

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

fn test_crate::vec(@1: alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>])
{
    let @0: (); // return
    let _x@1: alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>]; // arg #1

    @0 := ()
    drop _x@1
    @0 := ()
    return
}

pub fn core::num::{usize}#11::MAX() -> usize
{
    let @0: usize; // return

    @0 := ~(const (0 : usize))
    return
}

pub const core::num::{usize}#11::MAX: usize = core::num::{usize}#11::MAX()

fn test_crate::max() -> usize
{
    let @0: usize; // return
    let @1: usize; // anonymous local

    storage_live(@1)
    @1 := core::num::{usize}#11::MAX
    @0 := move (@1)
    return
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
    fn ne<'_0, '_1> = core::cmp::PartialEq::ne<'_0_0, '_0_1, Self, Rhs>
}

fn test_crate::partial_eq<T>(@1: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::cmp::PartialEq<T, T>,
{
    let @0: (); // return
    let _x@1: T; // arg #1

    @0 := ()
    drop _x@1
    @0 := ()
    return
}

#[lang_item("From")]
pub trait core::convert::From<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    fn from = core::convert::From::from<Self, T>
}

#[lang_item("from_fn")]
pub fn core::convert::From::from<Self, T>(@1: T) -> Self

impl core::convert::num::{impl core::convert::From<i32> for i64}#83 : core::convert::From<i64, i32>
{
    parent_clause0 = core::marker::Sized<i64>
    parent_clause1 = core::marker::Sized<i32>
    fn from = core::convert::num::{impl core::convert::From<i32> for i64}#83::from
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialeq_ne")]
pub fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (Self); // arg #1
    let other@2: &'_ (Rhs); // arg #2
    let @3: bool; // anonymous local

    storage_live(@3)
    @3 := Self::eq<'_, '_>(move (self@1), move (other@2))
    @0 := ~(move (@3))
    storage_dead(@3)
    return
}



