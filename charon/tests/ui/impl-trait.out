# Final LLBC before serialization:

pub trait core::marker::Sized<Self>

pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

pub trait test_crate::Foo<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Type>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<Self::Type>
    type Type
    fn get_ty<'_0> = test_crate::Foo::get_ty<'_0_0, Self>
}

pub fn core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0>(@1: &'_0 (u32)) -> u32

impl core::clone::impls::{impl core::clone::Clone for u32}#8 : core::clone::Clone<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0_0>
}

pub fn test_crate::{impl test_crate::Foo for ()}::get_ty<'_0>(@1: &'_0 (())) -> &'_0 (u32)
{
    let @0: &'_ (u32); // return
    let self@1: &'_ (()); // arg #1
    let @2: &'_ (u32); // anonymous local
    let @3: u32; // anonymous local

    @3 := const (42 : u32)
    @2 := &@3
    @0 := &*(@2)
    drop @3
    drop @2
    return
}

impl test_crate::{impl test_crate::Foo for ()} : test_crate::Foo<()>
{
    parent_clause0 = core::marker::Sized<u32>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for u32}#8
    type Type = u32
    fn get_ty<'_0> = test_crate::{impl test_crate::Foo for ()}::get_ty<'_0_0>
}

fn test_crate::mk_foo()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::use_foo()
{
    let @0: (); // return
    let foo@1: (); // local
    let @2: u32; // anonymous local
    let @3: &'_ (u32); // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: &'_ (()); // anonymous local

    foo@1 := test_crate::mk_foo()
    @fake_read(foo@1)
    @5 := &foo@1
    @4 := test_crate::{impl test_crate::Foo for ()}::get_ty<'_>(move (@5))
    @3 := &*(@4)
    drop @5
    @2 := core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_>(move (@3))
    drop @3
    @fake_read(@2)
    drop @2
    drop @4
    drop @2
    @0 := ()
    drop foo@1
    drop foo@1
    @0 := ()
    return
}

pub trait test_crate::RPITIT<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::>
    parent_clause1 : [@TraitClause1]: test_crate::Foo<Self::>
    type 
    fn make_foo = test_crate::RPITIT::make_foo<Self>
}

pub fn test_crate::{impl test_crate::RPITIT for ()}#1::make_foo()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

impl test_crate::{impl test_crate::RPITIT for ()}#1 : test_crate::RPITIT<()>
{
    parent_clause0 = core::marker::Sized<()>
    parent_clause1 = test_crate::{impl test_crate::Foo for ()}
    type  = ()
    fn make_foo = test_crate::{impl test_crate::RPITIT for ()}#1::make_foo
}

pub fn test_crate::RPITIT::make_foo<Self>() -> Self::
{
    let @0: (); // return

    @0 := ()
    return
}

pub fn test_crate::Foo::get_ty<'_0, Self>(@1: &'_0 (Self)) -> &'_0 (Self::Type)

pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn test_crate::use_tait<T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::RPITIT<T>,
{
    let @0: (); // return
    let foo@1: @TraitClause1::; // local
    let @2: @TraitClause1::parent_clause1::Type; // anonymous local
    let @3: &'_ (@TraitClause1::parent_clause1::Type); // anonymous local
    let @4: &'_ (@TraitClause1::parent_clause1::Type); // anonymous local
    let @5: &'_ (@TraitClause1::); // anonymous local

    foo@1 := @TraitClause1::make_foo()
    @fake_read(foo@1)
    @5 := &foo@1
    @4 := @TraitClause1::parent_clause1::get_ty<'_>(move (@5))
    @3 := &*(@4)
    drop @5
    @2 := @TraitClause1::parent_clause1::parent_clause1::clone<'_>(move (@3))
    drop @3
    @fake_read(@2)
    drop @2
    drop @4
    drop @2
    @0 := ()
    drop foo@1
    drop foo@1
    @0 := ()
    return
}

pub struct test_crate::WrapClone<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::clone::Clone<T>,
 =
{
  T,
}

pub fn core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone<'_0, '_1, T>(@1: &'_1 (&'_0 (T))) -> &'_0 (T)

impl core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_0, T> : core::clone::Clone<&'_0 (T)>
{
    parent_clause0 = core::marker::Sized<&'_ (T)>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone<'_0, '_0_0, T>
}

fn test_crate::wrap::closure<'_0, U>(@1: (), @2: &'_0 (U)) -> test_crate::WrapClone<&'_0 (U)>[core::marker::Sized<&'_0 (U)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, U>]
where
    [@TraitClause0]: core::marker::Sized<U>,
{
    let @0: test_crate::WrapClone<&'_ (U)>[core::marker::Sized<&'_ (U)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, U>]; // return
    let state@1: (); // arg #1
    let x@2: &'_ (U); // arg #2
    let @3: &'_ (U); // anonymous local

    @3 := copy (x@2)
    @0 := test_crate::WrapClone { 0: move (@3) }
    drop @3
    return
}

pub fn test_crate::wrap<U>() -> fn<'_0>(&'_0_0 (U)) -> test_crate::WrapClone<&'_0_0 (U)>[core::marker::Sized<&'_1_0 (U)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, U>]
where
    [@TraitClause0]: core::marker::Sized<U>,
{
    let @0: fn<'_0>(&'_0_0 (U)) -> test_crate::WrapClone<&'_0_0 (U)>[core::marker::Sized<&'_1_0 (U)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, U>]; // return

    @0 := {test_crate::wrap::closure<'_, U>[@TraitClause0]} {}
    return
}

pub trait core::marker::Tuple<Self>

pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

pub fn test_crate::use_wrap()
{
    let @0: (); // return
    let f@1: fn<'_0>(&'_0_0 (u32)) -> test_crate::WrapClone<&'_0_0 (u32)>[core::marker::Sized<&'_1_0 (u32)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, u32>]; // local
    let @2: test_crate::WrapClone<&'_ (u32)>[core::marker::Sized<&'_ (u32)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, u32>]; // anonymous local
    let @3: fn<'_0>(&'_0_0 (u32)) -> test_crate::WrapClone<&'_0_0 (u32)>[core::marker::Sized<&'_1_0 (u32)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, u32>]; // anonymous local
    let @4: (&'_ (u32)); // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local
    let @7: u32; // anonymous local

    f@1 := test_crate::wrap<u32>[core::marker::Sized<u32>]()
    @fake_read(f@1)
    @3 := move (f@1)
    @7 := const (42 : u32)
    @6 := &@7
    @5 := &*(@6)
    @4 := (move (@5))
    @2 := core::ops::function::FnOnce<fn<'_0>(&'_0_0 (u32)) -> test_crate::WrapClone<&'_0_0 (u32)>[core::marker::Sized<&'_1_0 (u32)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, u32>], (&'_ (u32))> where Output  = test_crate::WrapClone<&'_ (u32)>[core::marker::Sized<&'_ (u32)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, u32>]::call_once(move (@3), move (@4))
    drop @5
    drop @4
    drop @3
    @fake_read(@2)
    drop @7
    drop @6
    drop @2
    @0 := ()
    drop f@1
    drop f@1
    @0 := ()
    return
}



