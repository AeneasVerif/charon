# Final LLBC before serialization:

fn test_crate::slice_pattern_end<'_0>(@1: &'_0 (Slice<()>))
{
    let @0: (); // return
    let x@1: &'_ (Slice<()>); // arg #1
    let @2: usize; // anonymous local
    let @3: usize; // anonymous local
    let @4: bool; // anonymous local
    let _named@5: &'_ (()); // local
    let @6: &'_ (Slice<()>); // anonymous local
    let @7: usize; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (()); // anonymous local

    @fake_read(x@1)
    @2 := len(*(x@1))
    @3 := const (1 : usize)
    @4 := move (@2) >= move (@3)
    if move (@4) {
        @6 := &*(x@1)
        @7 := len(*(x@1))
        @8 := copy (@7) - const (1 : usize)
        @9 := @SliceIndexShared<'_, ()>(move (@6), copy (@8))
        _named@5 := &*(@9)
        @0 := ()
        drop _named@5
    }
    else {
        @0 := ()
    }
    @0 := ()
    return
}



