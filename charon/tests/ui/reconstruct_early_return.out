# Final LLBC before serialization:

// Full name: test_crate::f
fn f() -> usize
{
    let @0: usize; // return
    let i@1: i32; // local
    let j@2: i32; // local
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local
    let @7: (); // anonymous local
    let @8: bool; // anonymous local
    let @9: i32; // anonymous local
    let @10: bool; // anonymous local
    let @11: i32; // anonymous local
    let @12: i32; // anonymous local
    let @13: (); // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(i@1)
    i@1 := const (0 : i32)
    storage_live(j@2)
    j@2 := const (0 : i32)
    storage_live(@3)
    loop {
        storage_live(@4)
        storage_live(@5)
        @5 := copy (i@1)
        @4 := move (@5) < const (32 : i32)
        if move (@4) {
            storage_dead(@5)
            @6 := copy (j@2) panic.+ const (1 : i32)
            j@2 := move (@6)
            storage_live(@7)
            storage_live(@8)
            storage_live(@9)
            @9 := copy (j@2)
            @8 := move (@9) > const (16 : i32)
            if move (@8) {
                storage_dead(@9)
                j@2 := copy (j@2) panic./ const (2 : i32)
            }
            else {
                storage_dead(@9)
                storage_live(@10)
                storage_live(@11)
                @11 := copy (j@2)
                @10 := move (@11) > const (32 : i32)
                if move (@10) {
                    storage_dead(@11)
                    @0 := const (1 : usize)
                    storage_dead(@10)
                    storage_dead(@8)
                    storage_dead(@7)
                    storage_dead(@4)
                    storage_dead(@3)
                    storage_dead(j@2)
                    storage_dead(i@1)
                    return
                }
                else {
                    storage_dead(@11)
                    storage_dead(@10)
                }
            }
            storage_dead(@8)
            storage_dead(@7)
            @12 := copy (i@1) panic.+ const (1 : i32)
            i@1 := move (@12)
            storage_dead(@4)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@5)
    storage_live(@13)
    storage_dead(@13)
    storage_dead(@4)
    storage_dead(@3)
    @0 := const (0 : usize)
    storage_dead(j@2)
    storage_dead(i@1)
    return
}



