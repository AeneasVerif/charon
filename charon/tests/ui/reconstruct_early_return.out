# Final LLBC before serialization:

fn test_crate::f() -> usize
{
    let @0: usize; // return
    let i@1: i32; // local
    let j@2: i32; // local
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: i32; // anonymous local
    let @9: bool; // anonymous local
    let @10: i32; // anonymous local
    let @11: (); // anonymous local

    i@1 := const (0 : i32)
    @fake_read(i@1)
    j@2 := const (0 : i32)
    @fake_read(j@2)
    loop {
        @5 := copy (i@1)
        @4 := move (@5) < const (32 : i32)
        if move (@4) {
            drop @5
            j@2 := copy (j@2) + const (1 : i32)
            @8 := copy (j@2)
            @7 := move (@8) > const (16 : i32)
            if move (@7) {
                drop @8
                j@2 := copy (j@2) / const (2 : i32)
            }
            else {
                drop @8
                @10 := copy (j@2)
                @9 := move (@10) > const (32 : i32)
                if move (@9) {
                    drop @10
                    @0 := const (1 : usize)
                    drop @9
                    drop @7
                    drop @6
                    drop @4
                    drop @3
                    drop j@2
                    drop i@1
                    return
                }
                else {
                    drop @10
                    drop @9
                }
            }
            drop @7
            drop @6
            i@1 := copy (i@1) + const (1 : i32)
            drop @4
            continue 0
        }
        else {
            break 0
        }
    }
    drop @5
    drop @11
    drop @4
    drop @3
    @0 := const (0 : usize)
    drop j@2
    drop i@1
    return
}



