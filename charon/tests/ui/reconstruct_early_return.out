# Final LLBC before serialization:

fn test_crate::f() -> usize
{
    let @0: usize; // return
    let i@1: i32; // local
    let j@2: i32; // local
    let @3: (); // anonymous local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: i32; // anonymous local
    let @7: (); // anonymous local
    let @8: bool; // anonymous local
    let @9: i32; // anonymous local
    let @10: bool; // anonymous local
    let @11: i32; // anonymous local
    let @12: (); // anonymous local
    let @13: (); // anonymous local
    let @14: (); // anonymous local
    let @15: (); // anonymous local
    let @16: (); // anonymous local

    i@1 := const (0 : i32)
    @fake_read(i@1)
    j@2 := const (0 : i32)
    @fake_read(j@2)
    loop {
        @6 := copy (i@1)
        @5 := move (@6) < const (32 : i32)
        if move (@5) {
            drop @6
            j@2 := copy (j@2) + const (1 : i32)
            @9 := copy (j@2)
            @8 := move (@9) > const (16 : i32)
            if move (@8) {
                drop @9
                j@2 := copy (j@2) / const (2 : i32)
                @14 := ()
                @7 := move (@14)
            }
            else {
                drop @9
                @11 := copy (j@2)
                @10 := move (@11) > const (32 : i32)
                if move (@10) {
                    drop @11
                    @0 := const (1 : usize)
                    drop @10
                    drop @8
                    drop @7
                    drop @5
                    drop @3
                    drop j@2
                    drop i@1
                    return
                }
                else {
                    drop @11
                    @15 := ()
                    @7 := move (@15)
                    drop @10
                }
            }
            drop @8
            drop @7
            i@1 := copy (i@1) + const (1 : i32)
            @16 := ()
            @4 := move (@16)
            drop @5
            continue 0
        }
        else {
            break 0
        }
    }
    drop @6
    @13 := ()
    @3 := move (@13)
    drop @12
    drop @5
    drop @3
    @0 := const (0 : usize)
    drop j@2
    drop i@1
    return
}



