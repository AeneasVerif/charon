# Final LLBC before serialization:

// Full name: test_crate::BoolTrait
pub trait BoolTrait<Self>
{
    fn get_bool<'_0> = test_crate::BoolTrait::get_bool<'_0_0, Self>
    fn ret_true<'_0> = ret_true<'_0_0, Self>
}

// Full name: test_crate::{impl BoolTrait for bool}::get_bool
pub fn {impl BoolTrait for bool}::get_bool<'_0>(@1: &'_0 (bool)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (bool); // arg #1

    @0 := copy (*(self@1))
    return
}

pub fn test_crate::{impl BoolTrait for bool}::ret_true<'_0>(@1: &'_0 (bool)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (bool); // arg #1

    @0 := const (true)
    return
}

// Full name: test_crate::{impl BoolTrait for bool}
impl BoolTrait for bool {
    fn get_bool<'_0> = {impl BoolTrait for bool}::get_bool<'_0_0>
    fn ret_true<'_0> = test_crate::{impl BoolTrait for bool}::ret_true<'_0_0>
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::test_bool_trait
pub fn test_bool_trait<T>(@1: bool) -> bool
where
    [@TraitClause0]: Sized<T>,
{
    let @0: bool; // return
    let x@1: bool; // arg #1
    let @2: bool; // anonymous local
    let @3: &'_ (bool); // anonymous local
    let @4: &'_ (bool); // anonymous local

    storage_live(@4)
    storage_live(@2)
    storage_live(@3)
    @3 := &x@1
    @2 := {impl BoolTrait for bool}::get_bool<'_>(move (@3))
    if move (@2) {
        storage_dead(@3)
        storage_live(@4)
        @4 := &x@1
        @0 := test_crate::{impl BoolTrait for bool}::ret_true<'_>(move (@4))
        storage_dead(@4)
    }
    else {
        storage_dead(@3)
        @0 := const (false)
    }
    storage_dead(@2)
    return
}

// Full name: test_crate::Test
type Test = i32

// Full name: test_crate::SimpleEnum
enum SimpleEnum {
  FirstVariant,
  SecondVariant,
  ThirdVariant,
}

// Full name: test_crate::Foo
struct Foo {
  field1: u32,
}

fn test_crate::C() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := const (100 : u32) + const (10 : u32)
    @0 := copy (@1) + const (1 : u32)
    storage_dead(@1)
    return
}

const test_crate::C: u32 = test_crate::C()

// Full name: test_crate::Test2
type Test2 = u32

pub fn test_crate::BoolTrait::get_bool<'_0, Self>(@1: &'_0 (Self)) -> bool

// Full name: test_crate::BoolTrait::ret_true
pub fn ret_true<'_0, Self>(@1: &'_0 (Self)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (Self); // arg #1

    @0 := const (true)
    return
}



