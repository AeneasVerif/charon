# Final LLBC before serialization:

trait core::marker::Sized<Self>

fn test_crate::choose<'a, T>(@1: bool, @2: &'a mut (T), @3: &'a mut (T)) -> &'a mut (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ mut (T); // return
    let b@1: bool; // arg #1
    let x@2: &'_ mut (T); // arg #2
    let y@3: &'_ mut (T); // arg #3
    let @4: &'_ mut (T); // anonymous local
    let @5: &'_ mut (T); // anonymous local
    let @6: bool; // anonymous local
    let @7: &'_ mut (T); // anonymous local

    @6 := copy (b@1)
    if move (@6) {
        @7 := &mut *(x@2)
        @5 := &mut *(@7)
        drop @7
    }
    else {
        @5 := &mut *(y@3)
    }
    @4 := &mut *(@5)
    drop @6
    @0 := &mut *(@4)
    drop @5
    drop @4
    return
}

fn test_crate::choose_test()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let z@3: &'_ mut (i32); // local
    let @4: &'_ mut (i32); // anonymous local
    let @5: &'_ mut (i32); // anonymous local
    let @6: &'_ mut (i32); // anonymous local
    let @7: &'_ mut (i32); // anonymous local
    let @8: (); // anonymous local
    let @9: bool; // anonymous local
    let @10: i32; // anonymous local
    let @11: (); // anonymous local
    let @12: bool; // anonymous local
    let @13: i32; // anonymous local
    let @14: (); // anonymous local
    let @15: bool; // anonymous local
    let @16: i32; // anonymous local
    let @17: (); // anonymous local
    let @18: bool; // anonymous local
    let @19: i32; // anonymous local

    x@1 := const (0 : i32)
    @fake_read(x@1)
    y@2 := const (0 : i32)
    @fake_read(y@2)
    @5 := &mut x@1
    @4 := &two-phase-mut *(@5)
    @7 := &mut y@2
    @6 := &two-phase-mut *(@7)
    z@3 := test_crate::choose<'_, i32>[core::marker::Sized<i32>](const (true), move (@4), move (@6))
    drop @6
    drop @4
    @fake_read(z@3)
    drop @7
    drop @5
    *(z@3) := copy (*(z@3)) + const (1 : i32)
    @10 := copy (*(z@3))
    @9 := move (@10) == const (1 : i32)
    if move (@9) {
    }
    else {
        drop @10
        panic(core::panicking::panic)
    }
    drop @10
    drop @9
    drop @8
    // drop(z)
    @13 := copy (x@1)
    @12 := move (@13) == const (1 : i32)
    if move (@12) {
    }
    else {
        drop @13
        panic(core::panicking::panic)
    }
    drop @13
    drop @12
    drop @11
    @16 := copy (y@2)
    @15 := move (@16) == const (0 : i32)
    if move (@15) {
    }
    else {
        drop @16
        panic(core::panicking::panic)
    }
    drop @16
    drop @15
    drop @14
    @19 := copy (*(z@3))
    @18 := move (@19) == const (1 : i32)
    if move (@18) {
    }
    else {
        drop @19
        panic(core::panicking::panic)
    }
    drop @19
    drop @18
    drop @17
    @0 := ()
    drop z@3
    drop y@2
    drop x@1
    @0 := ()
    return
}



