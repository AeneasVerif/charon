# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

trait test_crate::GenericTrait<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<T>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<T>
    fn other_method = test_crate::GenericTrait::other_method<Self, T>
    fn provided<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::cmp::PartialEq<U, T>> = test_crate::GenericTrait::provided<Self, T, U>[@TraitClause0_0, @TraitClause0_1]
}

struct test_crate::Override<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
{
  T,
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub fn core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

impl core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T> : core::clone::Clone<core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    fn clone<'_0> = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone<'_0_0, T>[@TraitClause0, @TraitClause1]
}

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::other_method<T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::provided<T, U>(@1: core::option::Option<T>[@TraitClause0], @2: U)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::cmp::PartialEq<U, core::option::Option<T>[@TraitClause0]>,
{
    let @0: (); // return
    let x@1: core::option::Option<T>[@TraitClause0]; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (core::option::Option<T>[@TraitClause0]); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause3::eq<'_, '_>(move (@4), move (@5))
    ↳ unwind {
        drop y@2
        unwind
    }
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]()
        ↳ unwind {
            drop y@2
            unwind
        }
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop y@2
    @0 := ()
    return
}

impl test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}<T> : test_crate::GenericTrait<test_crate::Override<T>[@TraitClause0], core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T>[@TraitClause0, @TraitClause1::parent_clause0]
    fn other_method = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]
    fn provided<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::cmp::PartialEq<U, core::option::Option<T>[@TraitClause0]>> = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::provided<T, U>[@TraitClause0, @TraitClause1, @TraitClause0_0, @TraitClause0_1]
}

struct test_crate::NoOverride<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
{
  T,
}

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::other_method<T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::provided<T, U>(@1: core::option::Option<T>[@TraitClause0], @2: U)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::cmp::PartialEq<U, core::option::Option<T>[@TraitClause0]>,
{
    let @0: (); // return
    let x@1: core::option::Option<T>[@TraitClause0]; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (core::option::Option<T>[@TraitClause0]); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause3::eq<'_, '_>(move (@4), move (@5))
    ↳ unwind {
        drop y@2
        drop x@1
        unwind
    }
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::other_method<T>[@TraitClause0, @TraitClause1]()
        ↳ unwind {
            drop y@2
            drop x@1
            unwind
        }
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop y@2
    drop x@1
    @0 := ()
    return
}

impl test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1<T> : test_crate::GenericTrait<test_crate::NoOverride<T>[@TraitClause0], core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T>[@TraitClause0, @TraitClause1::parent_clause0]
    fn other_method = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::other_method<T>[@TraitClause0, @TraitClause1]
    fn provided<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::cmp::PartialEq<U, core::option::Option<T>[@TraitClause0]>> = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::provided<T, U>[@TraitClause0, @TraitClause1, @TraitClause0_0, @TraitClause0_1]
}

fn test_crate::GenericTrait::other_method<Self, T>()

fn test_crate::GenericTrait::provided<Self, T, U>(@1: T, @2: U)
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::cmp::PartialEq<U, T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (T); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause1::eq<'_, '_>(move (@4), move (@5))
    ↳ unwind {
        drop y@2
        drop x@1
        unwind
    }
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := Self::other_method()
        ↳ unwind {
            drop y@2
            drop x@1
            unwind
        }
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop y@2
    drop x@1
    @0 := ()
    return
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



