# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>[Self]
    non-dyn-compatible
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::cmp::PartialEq
#[lang_item("eq")]
pub trait PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = eq<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialEq::{vtable}<Rhs>
}

// Full name: core::cmp::PartialEq::eq
#[lang_item("cmp_partialeq_eq")]
pub fn eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

// Full name: core::marker::Copy
#[lang_item("copy")]
pub trait Copy<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Clone<Self>
    non-dyn-compatible
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::option::{impl Clone for Option<T>[@TraitClause0]}::clone
pub fn {impl Clone for Option<T>[@TraitClause0]}::clone<'_0, T>(@1: &'_0 (Option<T>[@TraitClause0])) -> Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,

// Full name: core::option::{impl Clone for Option<T>[@TraitClause0]}
impl<T> Clone for Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    parent_clause0 = Sized<Option<T>[@TraitClause0]>
    fn clone<'_0> = {impl Clone for Option<T>[@TraitClause0]}::clone<'_0_0, T>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}

// Full name: test_crate::GenericTrait
trait GenericTrait<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    parent_clause2 : [@TraitClause2]: Clone<T>
    fn other_method = test_crate::GenericTrait::other_method<Self, T>[Self]
    fn provided<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: PartialEq<U, T>> = test_crate::GenericTrait::provided<Self, T, U>[Self, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

fn test_crate::GenericTrait::other_method<Self, T>()
where
    [@TraitClause0]: GenericTrait<Self, T>,

fn test_crate::GenericTrait::provided<Self, T, U>(@1: T, @2: U)
where
    [@TraitClause0]: GenericTrait<Self, T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: PartialEq<U, T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (T); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause2::eq<'_, '_>(move (@4), move (@5))
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := @TraitClause0::other_method()
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop[Drop<U>] y@2
    drop[Drop<T>] x@1
    @0 := ()
    return
}

// Full name: test_crate::Override
struct Override<T>
where
    [@TraitClause0]: Sized<T>,
{
  T,
}

// Full name: test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::other_method
fn {impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::other_method<T>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::provided
fn {impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::provided<T, U>(@1: Option<T>[@TraitClause0], @2: U)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
    [@TraitClause2]: Sized<U>,
    [@TraitClause3]: PartialEq<U, Option<T>[@TraitClause0]>,
{
    let @0: (); // return
    let x@1: Option<T>[@TraitClause0]; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (Option<T>[@TraitClause0]); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause3::eq<'_, '_>(move (@4), move (@5))
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := {impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]()
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop[Drop<U>] y@2
    @0 := ()
    return
}

// Full name: test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}
impl<T> GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
{
    parent_clause0 = MetaSized<Override<T>[@TraitClause0]>
    parent_clause1 = Sized<Option<T>[@TraitClause0]>
    parent_clause2 = {impl Clone for Option<T>[@TraitClause0]}<T>[@TraitClause0, @TraitClause1::parent_clause1]
    fn other_method = {impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]
    fn provided<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: PartialEq<U, Option<T>[@TraitClause0]>> = {impl GenericTrait<Option<T>[@TraitClause0]> for Override<T>[@TraitClause0]}::provided<T, U>[@TraitClause0, @TraitClause1, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

// Full name: test_crate::NoOverride
struct NoOverride<T>
where
    [@TraitClause0]: Sized<T>,
{
  T,
}

// Full name: test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::other_method
fn {impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::other_method<T>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::provided<T, U>(@1: Option<T>[@TraitClause0], @2: U)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
    [@TraitClause2]: Sized<U>,
    [@TraitClause3]: PartialEq<U, Option<T>[@TraitClause0]>,
{
    let @0: (); // return
    let x@1: Option<T>[@TraitClause0]; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (Option<T>[@TraitClause0]); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &y@2
    storage_live(@5)
    @5 := &x@1
    @3 := @TraitClause3::eq<'_, '_>(move (@4), move (@5))
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        @0 := {impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]()
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    drop[Drop<U>] y@2
    drop[Drop<Option<T>[@TraitClause0]>] x@1
    @0 := ()
    return
}

// Full name: test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}
impl<T> GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Copy<T>,
{
    parent_clause0 = MetaSized<NoOverride<T>[@TraitClause0]>
    parent_clause1 = Sized<Option<T>[@TraitClause0]>
    parent_clause2 = {impl Clone for Option<T>[@TraitClause0]}<T>[@TraitClause0, @TraitClause1::parent_clause1]
    fn other_method = {impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::other_method<T>[@TraitClause0, @TraitClause1]
    fn provided<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: PartialEq<U, Option<T>[@TraitClause0]>> = test_crate::{impl GenericTrait<Option<T>[@TraitClause0]> for NoOverride<T>[@TraitClause0]}::provided<T, U>[@TraitClause0, @TraitClause1, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}



