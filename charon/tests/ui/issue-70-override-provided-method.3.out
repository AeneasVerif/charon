# Final LLBC before serialization:

trait core::marker::Sized<Self>

trait core::clone::Clone<Self>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone : core::clone::Clone::clone
    fn clone_from : core::clone::Clone::clone_from
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq : core::cmp::PartialEq::eq
    fn ne : core::cmp::PartialEq::ne
}

trait test_crate::GenericTrait<Self, T>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<T>
    parent_clause_1 : [@TraitClause1]: core::clone::Clone<T>
    fn other_method : test_crate::GenericTrait::other_method
    fn provided : test_crate::GenericTrait::provided
}

struct test_crate::Override<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
{
  T,
}

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

fn core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> core::option::Option<T>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

fn core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone_from<'_0, '_1, T>(@1: &'_0 mut (core::option::Option<T>[@TraitClause0]), @2: &'_1 (core::option::Option<T>[@TraitClause0]))
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

impl<T> core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T> : core::clone::Clone<core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    fn clone = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone
    fn clone_from = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5::clone_from
}

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::other_method<T>()
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn test_crate::GenericTrait::other_method<Self, T>()

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::provided<T, U>(@1: T, @2: U)
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
    // Local clauses:
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::cmp::PartialEq<U, T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (T); // anonymous local
    let @6: (); // anonymous local

    @4 := &y@2
    @5 := &x@1
    @3 := @TraitClause3::eq(move (@4), move (@5))
    if move (@3) {
        drop @5
        drop @4
        @0 := test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}<T>[@TraitClause0, @TraitClause1]::other_method()
    }
    else {
        drop @5
        drop @4
        @6 := ()
        @0 := move (@6)
    }
    drop @3
    drop y@2
    @0 := ()
    return
}

impl<T> test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}<T> : test_crate::GenericTrait<test_crate::Override<T>[@TraitClause0], core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T>[@TraitClause0, (parents(@TraitClause1)::[@TraitClause0])]
    fn other_method = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::other_method
    fn provided = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::Override<T>[@TraitClause0]}::provided
}

struct test_crate::NoOverride<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
{
  T,
}

fn test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::other_method<T>()
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

impl<T> test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1<T> : test_crate::GenericTrait<test_crate::NoOverride<T>[@TraitClause0], core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T>[@TraitClause0]}#5<T>[@TraitClause0, (parents(@TraitClause1)::[@TraitClause0])]
    fn other_method = test_crate::{impl test_crate::GenericTrait<core::option::Option<T>[@TraitClause0]> for test_crate::NoOverride<T>[@TraitClause0]}#1::other_method
}

fn test_crate::GenericTrait::provided<Self, T, U>(@1: T, @2: U)
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::cmp::PartialEq<U, T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: U; // arg #2
    let @3: bool; // anonymous local
    let @4: &'_ (U); // anonymous local
    let @5: &'_ (T); // anonymous local
    let @6: (); // anonymous local

    @4 := &y@2
    @5 := &x@1
    @3 := @TraitClause1::eq(move (@4), move (@5))
    if move (@3) {
        drop @5
        drop @4
        @0 := Self::other_method()
    }
    else {
        drop @5
        drop @4
        @6 := ()
        @0 := move (@6)
    }
    drop @3
    drop y@2
    drop x@1
    @0 := ()
    return
}

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool



