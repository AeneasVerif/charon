# Final LLBC before serialization:

pub fn test_crate::neg_test(@1: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let @2: i32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := -(move (@2))
    storage_dead(@2)
    return
}

pub fn test_crate::add_u32(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) + move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::incr<'_0>(@1: &'_0 mut (u32))
{
    let @0: (); // return
    let x@1: &'_ mut (u32); // arg #1

    *(x@1) := copy (*(x@1)) + const (1 : u32)
    @0 := ()
    @0 := ()
    return
}

pub fn test_crate::subs_u32(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) - move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::div_u32(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) / move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::div_u32_const(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let @2: u32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := move (@2) / const (2 : u32)
    storage_dead(@2)
    return
}

pub fn test_crate::rem_u32(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) % move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::mul_u32(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) * move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::add_i32(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) + move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::subs_i32(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) - move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::div_i32(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) / move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::div_i32_const(@1: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let @2: i32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := move (@2) / const (2 : i32)
    storage_dead(@2)
    return
}

pub fn test_crate::rem_i32(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) % move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::mul_i32(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) * move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::mix_arith_u32(@1: u32, @2: u32, @3: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let z@3: u32; // arg #3
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: u32; // anonymous local
    let @10: u32; // anonymous local
    let @11: u32; // anonymous local
    let @12: u32; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let @15: u32; // anonymous local
    let @16: u32; // anonymous local
    let @17: u32; // anonymous local
    let @18: u32; // anonymous local
    let @19: u32; // anonymous local
    let @20: u32; // anonymous local
    let @21: u32; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (x@1)
    storage_live(@8)
    @8 := copy (y@2)
    @6 := move (@7) + move (@8)
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@9)
    storage_live(@10)
    @10 := copy (x@1)
    storage_live(@11)
    @11 := copy (y@2)
    @9 := move (@10) / move (@11)
    storage_dead(@11)
    storage_dead(@10)
    @5 := move (@6) * move (@9)
    storage_dead(@9)
    storage_dead(@6)
    storage_live(@12)
    storage_live(@13)
    @13 := copy (x@1)
    storage_live(@14)
    storage_live(@15)
    @15 := copy (z@3)
    storage_live(@16)
    @16 := copy (y@2)
    @14 := move (@15) % move (@16)
    storage_dead(@16)
    storage_dead(@15)
    @12 := move (@13) - move (@14)
    storage_dead(@14)
    storage_dead(@13)
    @4 := move (@5) + move (@12)
    storage_dead(@12)
    storage_dead(@5)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    @19 := copy (x@1)
    storage_live(@20)
    @20 := copy (y@2)
    @18 := move (@19) + move (@20)
    storage_dead(@20)
    storage_dead(@19)
    storage_live(@21)
    @21 := copy (z@3)
    @17 := move (@18) + move (@21)
    storage_dead(@21)
    storage_dead(@18)
    @0 := move (@4) % move (@17)
    storage_dead(@17)
    storage_dead(@4)
    return
}

pub fn test_crate::mix_arith_i32(@1: i32, @2: i32, @3: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let z@3: i32; // arg #3
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local
    let @7: i32; // anonymous local
    let @8: i32; // anonymous local
    let @9: i32; // anonymous local
    let @10: i32; // anonymous local
    let @11: i32; // anonymous local
    let @12: i32; // anonymous local
    let @13: i32; // anonymous local
    let @14: i32; // anonymous local
    let @15: i32; // anonymous local
    let @16: i32; // anonymous local
    let @17: i32; // anonymous local
    let @18: i32; // anonymous local
    let @19: i32; // anonymous local
    let @20: i32; // anonymous local
    let @21: i32; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (x@1)
    storage_live(@8)
    @8 := copy (y@2)
    @6 := move (@7) + move (@8)
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@9)
    storage_live(@10)
    @10 := copy (x@1)
    storage_live(@11)
    @11 := copy (y@2)
    @9 := move (@10) / move (@11)
    storage_dead(@11)
    storage_dead(@10)
    @5 := move (@6) * move (@9)
    storage_dead(@9)
    storage_dead(@6)
    storage_live(@12)
    storage_live(@13)
    @13 := copy (x@1)
    storage_live(@14)
    storage_live(@15)
    @15 := copy (z@3)
    storage_live(@16)
    @16 := copy (y@2)
    @14 := move (@15) % move (@16)
    storage_dead(@16)
    storage_dead(@15)
    @12 := move (@13) - move (@14)
    storage_dead(@14)
    storage_dead(@13)
    @4 := move (@5) + move (@12)
    storage_dead(@12)
    storage_dead(@5)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    @19 := copy (x@1)
    storage_live(@20)
    @20 := copy (y@2)
    @18 := move (@19) + move (@20)
    storage_dead(@20)
    storage_dead(@19)
    storage_live(@21)
    @21 := copy (z@3)
    @17 := move (@18) + move (@21)
    storage_dead(@21)
    storage_dead(@18)
    @0 := move (@4) % move (@17)
    storage_dead(@17)
    storage_dead(@4)
    return
}

fn test_crate::shl(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) << move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

fn test_crate::shr(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := move (@3) >> move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::_() -> isize
{
    let @0: isize; // return

    @0 := const (1 : isize) + const (1 : isize)
    return
}

pub global test_crate::_: isize = test_crate::_()

pub fn test_crate::_#1() -> isize
{
    let @0: isize; // return

    @0 := const (1 : isize) - const (1 : isize)
    return
}

pub global test_crate::_#1: isize = test_crate::_#1()

pub fn test_crate::_#2() -> isize
{
    let @0: isize; // return

    @0 := const (-1 : isize)
    return
}

pub global test_crate::_#2: isize = test_crate::_#2()

pub fn test_crate::_#3() -> isize
{
    let @0: isize; // return

    @0 := const (2 : isize) * const (2 : isize)
    return
}

pub global test_crate::_#3: isize = test_crate::_#3()

pub fn test_crate::_#4() -> isize
{
    let @0: isize; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := cast<i32, u32>(const (2 : i32))
    @0 := const (2 : isize) >> const (2 : i32)
    return
}

pub global test_crate::_#4: isize = test_crate::_#4()

pub fn test_crate::_#5() -> isize
{
    let @0: isize; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := cast<i32, u32>(const (2 : i32))
    @0 := const (2 : isize) << const (2 : i32)
    return
}

pub global test_crate::_#5: isize = test_crate::_#5()

pub fn test_crate::_#6() -> isize
{
    let @0: isize; // return

    @0 := const (2 : isize) % const (2 : isize)
    return
}

pub global test_crate::_#6: isize = test_crate::_#6()

pub fn test_crate::_#7() -> isize
{
    let @0: isize; // return

    @0 := const (2 : isize) / const (2 : isize)
    return
}

pub global test_crate::_#7: isize = test_crate::_#7()

pub fn test_crate::FOO() -> u32
{
    let @0: u32; // return

    @0 := const (10 : u32)
    return
}

pub global test_crate::FOO: u32 = test_crate::FOO()

pub fn test_crate::_#8() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (1 : u32) + move (@1)
    return
}

pub global test_crate::_#8: u32 = test_crate::_#8()

pub fn test_crate::_#9() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (10 : u32) - move (@1)
    return
}

pub global test_crate::_#9: u32 = test_crate::_#9()

pub fn test_crate::_#10() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (2 : u32) * move (@1)
    return
}

pub global test_crate::_#10: u32 = test_crate::_#10()

pub fn test_crate::_#11() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (2 : u32) >> move (@1)
    return
}

pub global test_crate::_#11: u32 = test_crate::_#11()

pub fn test_crate::_#12() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (2 : u32) << move (@1)
    return
}

pub global test_crate::_#12: u32 = test_crate::_#12()

pub fn test_crate::_#13() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (2 : u32) % move (@1)
    return
}

pub global test_crate::_#13: u32 = test_crate::_#13()

pub fn test_crate::_#14() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::FOO
    @0 := const (2 : u32) / move (@1)
    return
}

pub global test_crate::_#14: u32 = test_crate::_#14()

fn test_crate::div_signed_with_constant::FOO() -> i32
{
    let @0: i32; // return

    @0 := const (42 : i32)
    return
}

global test_crate::div_signed_with_constant::FOO: i32 = test_crate::div_signed_with_constant::FOO()

fn test_crate::div_signed_with_constant() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local

    storage_live(@1)
    @1 := test_crate::div_signed_with_constant::FOO
    @0 := move (@1) / const (2 : i32)
    return
}

fn test_crate::div_unsigned_to_slice<'_0>(@1: &'_0 mut (Slice<u32>), @2: u32)
{
    let @0: (); // return
    let result@1: &'_ mut (Slice<u32>); // arg #1
    let x@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: usize; // anonymous local
    let @5: &'_ mut (Slice<u32>); // anonymous local
    let @6: &'_ mut (u32); // anonymous local

    storage_live(@3)
    @3 := copy (x@2)
    storage_live(@4)
    @4 := const (0 : usize)
    storage_live(@5)
    @5 := &mut *(result@1)
    storage_live(@6)
    @6 := @SliceIndexMut<'_, u32>(move (@5), copy (@4))
    *(@6) := move (@3) / const (3329 : u32)
    storage_dead(@3)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::div_signed_to_slice<'_0>(@1: &'_0 mut (Slice<i32>), @2: i32)
{
    let @0: (); // return
    let result@1: &'_ mut (Slice<i32>); // arg #1
    let x@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: usize; // anonymous local
    let @5: &'_ mut (Slice<i32>); // anonymous local
    let @6: &'_ mut (i32); // anonymous local

    storage_live(@3)
    @3 := copy (x@2)
    storage_live(@4)
    @4 := const (0 : usize)
    storage_live(@5)
    @5 := &mut *(result@1)
    storage_live(@6)
    @6 := @SliceIndexMut<'_, i32>(move (@5), copy (@4))
    *(@6) := move (@3) / const (3329 : i32)
    storage_dead(@3)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}



