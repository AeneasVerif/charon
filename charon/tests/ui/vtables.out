# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>[Self]
    non-dyn-compatible
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::clone::impls::{impl Clone for i32}::clone
pub fn {impl Clone for i32}::clone<'_0>(@1: &'_0 (i32)) -> i32

// Full name: core::clone::impls::{impl Clone for i32}
impl Clone for i32 {
    parent_clause0 = Sized<i32>
    fn clone<'_0> = {impl Clone for i32}::clone<'_0_0>
    non-dyn-compatible
}

// Full name: core::fmt::Error
pub struct Error {}

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: core::fmt::Display
#[lang_item("Display")]
pub trait Display<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Display::fmt<'_0_0, '_0_1, '_0_2, Self>[Self]
    vtable: core::fmt::Display::{vtable}
}

pub fn core::fmt::Display::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (Formatter<'_2>)) -> Result<(), Error>[Sized<()>, Sized<Error>]
where
    [@TraitClause0]: Display<Self>,

// Full name: core::fmt::{impl Display for Str}::fmt
pub fn {impl Display for Str}::fmt<'_0, '_1, '_2>(@1: &'_0 (Str), @2: &'_1 mut (Formatter<'_2>)) -> Result<(), Error>[Sized<()>, Sized<Error>]

// Full name: core::fmt::{impl Display for Str}
impl Display for Str {
    fn fmt<'_0, '_1, '_2> = {impl Display for Str}::fmt<'_0_0, '_0_1, '_0_2>
    vtable: {impl Display for Str}::{vtable}
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

// Full name: alloc::string::String
#[lang_item("String")]
pub opaque type String

// Full name: alloc::string::String::{impl Drop for String}::drop
fn {impl Drop for String}::drop<'_0>(@1: &'_0 mut (String))

// Full name: alloc::string::String::{impl Drop for String}
impl Drop for String {
    parent_clause0 = MetaSized<String>
    fn drop<'_0> = {impl Drop for String}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: alloc::string::{String}::is_empty
pub fn is_empty<'_0>(@1: &'_0 (String)) -> bool

// Full name: alloc::string::{impl Clone for String}::clone
pub fn {impl Clone for String}::clone<'_0>(@1: &'_0 (String)) -> String

// Full name: alloc::string::{impl Clone for String}
impl Clone for String {
    parent_clause0 = Sized<String>
    fn clone<'_0> = {impl Clone for String}::clone<'_0_0>
    non-dyn-compatible
}

// Full name: alloc::string::ToString
#[lang_item("ToString")]
pub trait ToString<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn to_string<'_0> = alloc::string::ToString::to_string<'_0_0, Self>[Self]
    vtable: alloc::string::ToString::{vtable}
}

#[lang_item("to_string_method")]
pub fn alloc::string::ToString::to_string<'_0, Self>(@1: &'_0 (Self)) -> String
where
    [@TraitClause0]: ToString<Self>,

// Full name: alloc::string::{impl ToString for T}::to_string
pub fn {impl ToString for T}::to_string<'_0, T>(@1: &'_0 (T)) -> String
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Display<T>,

// Full name: alloc::string::{impl ToString for T}
impl<T> ToString for T
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Display<T>,
{
    parent_clause0 = @TraitClause0
    fn to_string<'_0> = {impl ToString for T}::to_string<'_0_0, T>[@TraitClause0, @TraitClause1]
    vtable: {impl ToString for T}::{vtable}<T>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::Super
trait Super<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn super_method<'_0> = test_crate::Super::super_method<'_0_0, Self, T>[Self]
    vtable: test_crate::Super::{vtable}<T>
}

fn test_crate::Super::super_method<'_0, Self, T>(@1: &'_0 (Self), @2: T) -> i32
where
    [@TraitClause0]: Super<Self, T>,

struct test_crate::Checkable::{vtable}<T> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, T> + _dyn : '_)),
  method_check: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, T> + _dyn : '_))) -> bool,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
  super_trait_1: &'static (test_crate::Super::{vtable}<T>),
}

// Full name: test_crate::Checkable
trait Checkable<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Super<Self, T>
    parent_clause2 : [@TraitClause2]: Sized<T>
    fn check<'_0> = test_crate::Checkable::check<'_0_0, Self, T>[Self]
    vtable: test_crate::Checkable::{vtable}<T>
}

fn test_crate::Checkable::check<'_0, Self, T>(@1: &'_0 (Self)) -> bool
where
    [@TraitClause0]: Checkable<Self, T>,

// Full name: test_crate::{impl Super<i32> for i32}::super_method
fn {impl Super<i32> for i32}::super_method<'_0>(@1: &'_0 (i32), @2: i32) -> i32
{
    let @0: i32; // return
    let self@1: &'_ (i32); // arg #1
    let arg@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    storage_live(@5)
    storage_live(@3)
    @3 := copy (*(self@1))
    storage_live(@4)
    @4 := copy (arg@2)
    @5 := copy (@3) panic.+ copy (@4)
    @0 := move (@5)
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::{impl Super<i32> for i32}
impl Super<i32> for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = Sized<i32>
    fn super_method<'_0> = {impl Super<i32> for i32}::super_method<'_0_0>
    vtable: {impl Super<i32> for i32}::{vtable}
}

// Full name: test_crate::{impl Checkable<i32> for i32}::check
fn {impl Checkable<i32> for i32}::check<'_0>(@1: &'_0 (i32)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (i32); // arg #1
    let @2: i32; // anonymous local
    let @3: &'_ (i32); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := {impl Super<i32> for i32}::super_method<'_>(move (@3), const (10 : i32))
    storage_dead(@3)
    @0 := move (@2) > const (0 : i32)
    storage_dead(@2)
    return
}

// Full name: test_crate::{impl Checkable<i32> for i32}::{vtable}
fn {impl Checkable<i32> for i32}::{vtable}() -> test_crate::Checkable::{vtable}<i32>
{
    let ret@0: test_crate::Checkable::{vtable}<i32>; // return
    let @1: &'static (test_crate::Super::{vtable}<i32>); // anonymous local

    storage_live(@1)
    @1 := &{impl Super<i32> for i32}::{vtable}
    ret@0 := test_crate::Checkable::{vtable} { size: const (Opaque(unknown size)), align: const (Opaque(unknown align)), drop: const (Opaque(unknown drop)), method_check: const ({impl Checkable<i32> for i32}::check), super_trait_0: const (Opaque(missing supertrait vtable)), super_trait_1: move (@1) }
    return
}

// Full name: test_crate::{impl Checkable<i32> for i32}::{vtable}
static {impl Checkable<i32> for i32}::{vtable}: test_crate::Checkable::{vtable}<i32> = {impl Checkable<i32> for i32}::{vtable}()

// Full name: test_crate::{impl Checkable<i32> for i32}
impl Checkable<i32> for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = {impl Super<i32> for i32}
    parent_clause2 = Sized<i32>
    fn check<'_0> = {impl Checkable<i32> for i32}::check<'_0_0>
    vtable: {impl Checkable<i32> for i32}::{vtable}
}

struct test_crate::NoParam::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)),
  method_dummy: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_))),
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::NoParam
trait NoParam<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn dummy<'_0> = test_crate::NoParam::dummy<'_0_0, Self>[Self]
    vtable: test_crate::NoParam::{vtable}
}

fn test_crate::NoParam::dummy<'_0, Self>(@1: &'_0 (Self))
where
    [@TraitClause0]: NoParam<Self>,

// Full name: test_crate::{impl NoParam for i32}::dummy
fn {impl NoParam for i32}::dummy<'_0>(@1: &'_0 (i32))
{
    let @0: (); // return
    let self@1: &'_ (i32); // arg #1
    let @2: (); // anonymous local
    let @3: bool; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := copy (*(self@1))
    @3 := move (@4) > const (0 : i32)
    if move (@3) {
    }
    else {
        storage_dead(@4)
        panic(core::panicking::panic)
    }
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl NoParam for i32}
impl NoParam for i32 {
    parent_clause0 = MetaSized<i32>
    fn dummy<'_0> = {impl NoParam for i32}::dummy<'_0_0>
    vtable: {impl NoParam for i32}::{vtable}
}

// Full name: test_crate::to_dyn_obj
fn to_dyn_obj<'_0, T>(@1: &'_0 (T)) -> &'_0 ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_0))
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: NoParam<T>,
{
    let @0: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // return
    let arg@1: &'_ (T); // arg #1
    let @2: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // anonymous local
    let @3: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // anonymous local
    let @4: &'_ (T); // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &*(arg@1)
    @3 := unsize_cast<&'_ (T), &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)), @TraitClause1>(move (@4))
    storage_dead(@4)
    @2 := &*(@3)
    @0 := unsize_cast<&'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)), &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)), NoParam<(dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)>>(move (@2))
    storage_dead(@3)
    storage_dead(@2)
    return
}

struct test_crate::Modifiable::{vtable}<T> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_)),
  method_modify: fn<'_0, '_1>(&'_0_0 mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_)), &'_0_1 (T)) -> T,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::Modifiable
trait Modifiable<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn modify<'_0, '_1> = test_crate::Modifiable::modify<'_0_0, '_0_1, Self, T>[Self]
    vtable: test_crate::Modifiable::{vtable}<T>
}

fn test_crate::Modifiable::modify<'_0, '_1, Self, T>(@1: &'_0 mut (Self), @2: &'_1 (T)) -> T
where
    [@TraitClause0]: Modifiable<Self, T>,

// Full name: test_crate::{impl Modifiable<T> for i32}::modify
fn {impl Modifiable<T> for i32}::modify<'_0, '_1, T>(@1: &'_0 mut (i32), @2: &'_1 (T)) -> T
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    let @0: T; // return
    let self@1: &'_ mut (i32); // arg #1
    let arg@2: &'_ (T); // arg #2
    let @3: i32; // anonymous local
    let @4: &'_ (T); // anonymous local

    storage_live(@3)
    @3 := copy (*(self@1)) panic.+ const (1 : i32)
    *(self@1) := move (@3)
    storage_live(@4)
    @4 := &*(arg@2)
    @0 := @TraitClause1::clone<'_>(move (@4))
    storage_dead(@4)
    return
}

// Full name: test_crate::{impl Modifiable<T> for i32}::{vtable}
fn {impl Modifiable<T> for i32}::{vtable}<T>() -> test_crate::Modifiable::{vtable}<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    let ret@0: test_crate::Modifiable::{vtable}<T>; // return

    ret@0 := test_crate::Modifiable::{vtable} { size: const (Opaque(unknown size)), align: const (Opaque(unknown align)), drop: const (Opaque(unknown drop)), method_modify: const ({impl Modifiable<T> for i32}::modify<T>[@TraitClause0, @TraitClause1]), super_trait_0: const (Opaque(missing supertrait vtable)) }
    return
}

// Full name: test_crate::{impl Modifiable<T> for i32}::{vtable}
static {impl Modifiable<T> for i32}::{vtable}<T>: test_crate::Modifiable::{vtable}<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
 = {impl Modifiable<T> for i32}::{vtable}()

// Full name: test_crate::{impl Modifiable<T> for i32}
impl<T> Modifiable<T> for i32
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    parent_clause0 = MetaSized<i32>
    parent_clause1 = @TraitClause0
    fn modify<'_0, '_1> = {impl Modifiable<T> for i32}::modify<'_0_0, '_0_1, T>[@TraitClause0, @TraitClause1]
    vtable: {impl Modifiable<T> for i32}::{vtable}<T>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::modify_trait_object
fn modify_trait_object<'_0, T>(@1: &'_0 (T)) -> T
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    let @0: T; // return
    let arg@1: &'_ (T); // arg #1
    let x@2: &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_)); // local
    let @3: &'_ mut (i32); // anonymous local
    let @4: &'_ mut (i32); // anonymous local
    let @5: i32; // anonymous local
    let @6: &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_)); // anonymous local
    let @7: &'_ (T); // anonymous local

    storage_live(x@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := const (199 : i32)
    @4 := &mut @5
    @3 := &mut *(@4)
    x@2 := unsize_cast<&'_ mut (i32), &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_)), {impl Modifiable<T> for i32}<T>[@TraitClause0, @TraitClause1]>(move (@3))
    storage_dead(@3)
    storage_dead(@4)
    storage_live(@6)
    @6 := &two-phase-mut *(x@2)
    storage_live(@7)
    @7 := &*(arg@1)
    @0 := Modifiable<(dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, T> + _dyn : '_), T>::modify<'_, '_>(move (@6), move (@7))
    storage_dead(@7)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(x@2)
    return
}

// Full name: test_crate::BaseOn
trait BaseOn<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn operate_on<'_0, '_1> = test_crate::BaseOn::operate_on<'_0_0, '_0_1, Self, T>[Self]
    vtable: test_crate::BaseOn::{vtable}<T>
}

fn test_crate::BaseOn::operate_on<'_0, '_1, Self, T>(@1: &'_0 (Self), @2: &'_1 (T))
where
    [@TraitClause0]: BaseOn<Self, T>,

struct test_crate::Both32And64::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)),
  method_both_operate: fn<'_0, '_1, '_2>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)), &'_0_1 (i32), &'_0_2 (i64)),
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
  super_trait_1: &'static (test_crate::BaseOn::{vtable}<i32>),
  super_trait_2: &'static (test_crate::BaseOn::{vtable}<i64>),
}

// Full name: test_crate::Both32And64
trait Both32And64<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: BaseOn<Self, i32>
    parent_clause2 : [@TraitClause2]: BaseOn<Self, i64>
    fn both_operate<'_0, '_1, '_2> = both_operate<'_0_0, '_0_1, '_0_2, Self>[Self]
    vtable: test_crate::Both32And64::{vtable}
}

// Full name: test_crate::Both32And64::both_operate
fn both_operate<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 (i32), @3: &'_2 (i64))
where
    [@TraitClause0]: Both32And64<Self>,
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let t32@2: &'_ (i32); // arg #2
    let t64@3: &'_ (i64); // arg #3
    let @4: (); // anonymous local
    let @5: &'_ (Self); // anonymous local
    let @6: &'_ (i32); // anonymous local
    let @7: (); // anonymous local
    let @8: &'_ (Self); // anonymous local
    let @9: &'_ (i64); // anonymous local

    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    storage_live(@6)
    @6 := &*(t32@2)
    @4 := @TraitClause0::parent_clause1::operate_on<'_, '_>(move (@5), move (@6))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@7)
    storage_live(@8)
    @8 := &*(self@1)
    storage_live(@9)
    @9 := &*(t64@3)
    @7 := @TraitClause0::parent_clause2::operate_on<'_, '_>(move (@8), move (@9))
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(@7)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl BaseOn<i32> for i32}::operate_on
fn {impl BaseOn<i32> for i32}::operate_on<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32))
{
    let @0: (); // return
    let self@1: &'_ (i32); // arg #1
    let t@2: &'_ (i32); // arg #2
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (*(self@1))
    storage_live(@6)
    @6 := copy (*(t@2))
    @4 := move (@5) > move (@6)
    if move (@4) {
    }
    else {
        storage_dead(@6)
        storage_dead(@5)
        panic(core::panicking::panic)
    }
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl BaseOn<i32> for i32}
impl BaseOn<i32> for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = Sized<i32>
    fn operate_on<'_0, '_1> = {impl BaseOn<i32> for i32}::operate_on<'_0_0, '_0_1>
    vtable: {impl BaseOn<i32> for i32}::{vtable}
}

// Full name: test_crate::{impl BaseOn<i64> for i32}::operate_on
fn {impl BaseOn<i64> for i32}::operate_on<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i64))
{
    let @0: (); // return
    let self@1: &'_ (i32); // arg #1
    let t@2: &'_ (i64); // arg #2
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: i64; // anonymous local
    let @6: i32; // anonymous local
    let @7: i64; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (*(self@1))
    @5 := cast<i32, i64>(move (@6))
    storage_dead(@6)
    storage_live(@7)
    @7 := copy (*(t@2))
    @4 := move (@5) > move (@7)
    if move (@4) {
    }
    else {
        storage_dead(@7)
        storage_dead(@5)
        panic(core::panicking::panic)
    }
    storage_dead(@7)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl BaseOn<i64> for i32}
impl BaseOn<i64> for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = Sized<i64>
    fn operate_on<'_0, '_1> = {impl BaseOn<i64> for i32}::operate_on<'_0_0, '_0_1>
    vtable: {impl BaseOn<i64> for i32}::{vtable}
}

fn test_crate::{impl Both32And64 for i32}::both_operate<'_0, '_1, '_2>(@1: &'_0 (i32), @2: &'_1 (i32), @3: &'_2 (i64))
{
    let @0: (); // return
    let self@1: &'_ (i32); // arg #1
    let t32@2: &'_ (i32); // arg #2
    let t64@3: &'_ (i64); // arg #3
    let @4: (); // anonymous local
    let @5: &'_ (i32); // anonymous local
    let @6: &'_ (i32); // anonymous local
    let @7: (); // anonymous local
    let @8: &'_ (i32); // anonymous local
    let @9: &'_ (i64); // anonymous local

    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    storage_live(@6)
    @6 := &*(t32@2)
    @4 := {impl Both32And64 for i32}::parent_clause1::operate_on<'_, '_>(move (@5), move (@6))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@7)
    storage_live(@8)
    @8 := &*(self@1)
    storage_live(@9)
    @9 := &*(t64@3)
    @7 := {impl Both32And64 for i32}::parent_clause2::operate_on<'_, '_>(move (@8), move (@9))
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(@7)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Both32And64 for i32}::{vtable}
fn {impl Both32And64 for i32}::{vtable}() -> test_crate::Both32And64::{vtable}
{
    let ret@0: test_crate::Both32And64::{vtable}; // return
    let @1: &'static (test_crate::BaseOn::{vtable}<i32>); // anonymous local
    let @2: &'static (test_crate::BaseOn::{vtable}<i64>); // anonymous local

    storage_live(@1)
    storage_live(@2)
    @1 := &{impl BaseOn<i32> for i32}::{vtable}
    @2 := &{impl BaseOn<i64> for i32}::{vtable}
    ret@0 := test_crate::Both32And64::{vtable} { size: const (Opaque(unknown size)), align: const (Opaque(unknown align)), drop: const (Opaque(unknown drop)), method_both_operate: const (Opaque(shim for provided methods aren't yet supported)), super_trait_0: const (Opaque(missing supertrait vtable)), super_trait_1: move (@1), super_trait_2: move (@2) }
    return
}

// Full name: test_crate::{impl Both32And64 for i32}::{vtable}
static {impl Both32And64 for i32}::{vtable}: test_crate::Both32And64::{vtable} = {impl Both32And64 for i32}::{vtable}()

// Full name: test_crate::{impl Both32And64 for i32}
impl Both32And64 for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = {impl BaseOn<i32> for i32}
    parent_clause2 = {impl BaseOn<i64> for i32}
    fn both_operate<'_0, '_1, '_2> = test_crate::{impl Both32And64 for i32}::both_operate<'_0_0, '_0_1, '_0_2>
    vtable: {impl Both32And64 for i32}::{vtable}
}

// Full name: test_crate::Alias
trait Alias<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Both32And64<Self>
    vtable: test_crate::Alias::{vtable}
}

// Full name: test_crate::use_alias
fn use_alias<'_0>(@1: &'_0 ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_0)))
{
    let @0: (); // return
    let x@1: &'_ ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)); // anonymous local
    let @4: &'_ (i32); // anonymous local
    let @5: &'_ (i32); // anonymous local
    let @6: i32; // anonymous local
    let @7: &'_ (i64); // anonymous local
    let @8: &'_ (i64); // anonymous local
    let @9: i64; // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(x@1)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := const (100 : i32)
    @5 := &@6
    @4 := &*(@5)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := const (200 : i64)
    @8 := &@9
    @7 := &*(@8)
    @2 := Both32And64<(dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)>::both_operate<'_, '_, '_>(move (@3), move (@4), move (@7))
    storage_dead(@7)
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let x@1: &'_ ((dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, i32> + _dyn : '_)); // local
    let @2: &'_ (i32); // anonymous local
    let @3: &'_ (i32); // anonymous local
    let @4: i32; // anonymous local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: &'_ ((dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, i32> + _dyn : '_)); // anonymous local
    let y@8: &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, i32> + _dyn : '_)); // local
    let @9: &'_ mut (i32); // anonymous local
    let @10: &'_ mut (i32); // anonymous local
    let @11: i32; // anonymous local
    let @12: (); // anonymous local
    let @13: bool; // anonymous local
    let @14: &'_ (String); // anonymous local
    let @15: String; // anonymous local
    let @16: &'_ (String); // anonymous local
    let @17: &'_ (String); // anonymous local
    let @18: String; // anonymous local
    let @19: &'_ (Str); // anonymous local
    let @20: &'_ (Str); // anonymous local
    let @21: (); // anonymous local
    let @22: (&'_ (i32), &'_ (i32)); // anonymous local
    let @23: &'_ (i32); // anonymous local
    let @24: i32; // anonymous local
    let @25: &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, i32> + _dyn : '_)); // anonymous local
    let @26: &'_ (i32); // anonymous local
    let @27: &'_ mut (i32); // anonymous local
    let @28: i32; // anonymous local
    let @29: &'_ (i32); // anonymous local
    let @30: i32; // anonymous local
    let left_val@31: &'_ (i32); // local
    let right_val@32: &'_ (i32); // local
    let @33: bool; // anonymous local
    let @34: i32; // anonymous local
    let @35: i32; // anonymous local
    let kind@36: AssertKind; // local
    let @37: AssertKind; // anonymous local
    let @38: &'_ (i32); // anonymous local
    let @39: &'_ (i32); // anonymous local
    let @40: &'_ (i32); // anonymous local
    let @41: &'_ (i32); // anonymous local
    let @42: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local
    let z@43: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // local
    let @44: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // anonymous local
    let @45: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // anonymous local
    let @46: &'_ (i32); // anonymous local
    let @47: &'_ (i32); // anonymous local
    let @48: i32; // anonymous local
    let @49: (); // anonymous local
    let @50: &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)); // anonymous local
    let a@51: &'_ ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)); // local
    let @52: &'_ (i32); // anonymous local
    let @53: &'_ (i32); // anonymous local
    let @54: i32; // anonymous local
    let @55: (); // anonymous local
    let @56: &'_ ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)); // anonymous local
    let @57: &'_ (i32); // anonymous local
    let @58: &'_ (i32); // anonymous local
    let @59: i32; // anonymous local
    let @60: &'_ (i64); // anonymous local
    let @61: &'_ (i64); // anonymous local
    let @62: i64; // anonymous local

    storage_live(@21)
    storage_live(@22)
    storage_live(@23)
    storage_live(@24)
    storage_live(@25)
    storage_live(@26)
    storage_live(@27)
    storage_live(@28)
    storage_live(@29)
    storage_live(@30)
    storage_live(left_val@31)
    storage_live(right_val@32)
    storage_live(@33)
    storage_live(@34)
    storage_live(@35)
    storage_live(kind@36)
    storage_live(@37)
    storage_live(@38)
    storage_live(@39)
    storage_live(@40)
    storage_live(@41)
    storage_live(@42)
    storage_live(z@43)
    storage_live(@44)
    storage_live(@45)
    storage_live(@46)
    storage_live(@47)
    storage_live(@48)
    storage_live(@49)
    storage_live(@50)
    storage_live(a@51)
    storage_live(@52)
    storage_live(@53)
    storage_live(@54)
    storage_live(@55)
    storage_live(@56)
    storage_live(@57)
    storage_live(@58)
    storage_live(@59)
    storage_live(@60)
    storage_live(@61)
    storage_live(@62)
    storage_live(x@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := const (42 : i32)
    @3 := &@4
    @2 := &*(@3)
    x@1 := unsize_cast<&'_ (i32), &'_ ((dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, i32> + _dyn : '_)), {impl Checkable<i32> for i32}>(move (@2))
    storage_dead(@2)
    storage_dead(@3)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := &*(x@1)
    @6 := Checkable<(dyn exists<_dyn> [@TraitClause0]: Checkable<_dyn, i32> + _dyn : '_), i32>::check<'_>(move (@7))
    if move (@6) {
    }
    else {
        storage_dead(@7)
        panic(core::panicking::panic)
    }
    storage_dead(@7)
    storage_dead(@6)
    storage_dead(@5)
    storage_live(y@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    @11 := const (99 : i32)
    @10 := &mut @11
    @9 := &mut *(@10)
    y@8 := unsize_cast<&'_ mut (i32), &'_ mut ((dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, i32> + _dyn : '_)), {impl Modifiable<T> for i32}<i32>[Sized<i32>, {impl Clone for i32}]>(move (@9))
    storage_dead(@9)
    storage_dead(@10)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    @20 := const ("Hello")
    @19 := &*(@20)
    @18 := {impl ToString for T}::to_string<'_, Str>[MetaSized<Str>, {impl Display for Str}](move (@19))
    storage_dead(@19)
    @17 := &@18
    @16 := &*(@17)
    @15 := modify_trait_object<'_, String>[Sized<String>, {impl Clone for String}](move (@16))
    @14 := &@15
    storage_dead(@16)
    @13 := is_empty<'_>(move (@14))
    if move (@13) {
    }
    else {
        storage_dead(@14)
        drop[{impl Drop for String}] @15
        drop[{impl Drop for String}] @18
        storage_dead(@20)
        storage_dead(@18)
        storage_dead(@17)
        storage_dead(@15)
        storage_dead(@13)
        storage_dead(@12)
        storage_live(@21)
        storage_live(@22)
        storage_live(@23)
        storage_live(@24)
        storage_live(@25)
        @25 := &two-phase-mut *(y@8)
        storage_live(@26)
        storage_live(@27)
        storage_live(@28)
        @28 := const (100 : i32)
        @27 := &mut @28
        @26 := &*(@27)
        @24 := Modifiable<(dyn exists<_dyn> [@TraitClause0]: Modifiable<_dyn, i32> + _dyn : '_), i32>::modify<'_, '_>(move (@25), move (@26))
        storage_dead(@26)
        storage_dead(@25)
        @23 := &@24
        storage_live(@29)
        storage_live(@30)
        @30 := const (100 : i32)
        @29 := &@30
        @22 := (move (@23), move (@29))
        storage_dead(@29)
        storage_dead(@23)
        storage_live(left_val@31)
        left_val@31 := copy ((@22).0)
        storage_live(right_val@32)
        right_val@32 := copy ((@22).1)
        storage_live(@33)
        storage_live(@34)
        @34 := copy (*(left_val@31))
        storage_live(@35)
        @35 := copy (*(right_val@32))
        @33 := move (@34) == move (@35)
        if move (@33) {
        }
        else {
            storage_dead(@35)
            storage_dead(@34)
            storage_live(kind@36)
            kind@36 := AssertKind::Eq {  }
            storage_live(@37)
            @37 := move (kind@36)
            storage_live(@38)
            storage_live(@39)
            @39 := &*(left_val@31)
            @38 := &*(@39)
            storage_live(@40)
            storage_live(@41)
            @41 := &*(right_val@32)
            @40 := &*(@41)
            storage_live(@42)
            @42 := Option::None {  }
            panic(core::panicking::assert_failed)
        }
        storage_dead(@35)
        storage_dead(@34)
        storage_dead(@33)
        storage_dead(right_val@32)
        storage_dead(left_val@31)
        storage_dead(@30)
        storage_dead(@28)
        storage_dead(@27)
        storage_dead(@24)
        storage_dead(@22)
        storage_dead(@21)
        storage_live(z@43)
        storage_live(@44)
        storage_live(@45)
        storage_live(@46)
        storage_live(@47)
        storage_live(@48)
        @48 := const (42 : i32)
        @47 := &@48
        @46 := &*(@47)
        @45 := to_dyn_obj<'_, i32>[Sized<i32>, {impl NoParam for i32}](move (@46))
        @44 := &*(@45)
        z@43 := unsize_cast<&'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)), &'_ ((dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)), NoParam<(dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)>>(move (@44))
        storage_dead(@46)
        storage_dead(@44)
        storage_dead(@48)
        storage_dead(@47)
        storage_dead(@45)
        storage_live(@49)
        storage_live(@50)
        @50 := &*(z@43)
        @49 := NoParam<(dyn exists<_dyn> [@TraitClause0]: NoParam<_dyn> + _dyn : '_)>::dummy<'_>(move (@50))
        storage_dead(@50)
        storage_dead(@49)
        storage_live(a@51)
        storage_live(@52)
        storage_live(@53)
        storage_live(@54)
        @54 := const (42 : i32)
        @53 := &@54
        @52 := &*(@53)
        a@51 := unsize_cast<&'_ (i32), &'_ ((dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)), {impl Both32And64 for i32}>(move (@52))
        storage_dead(@52)
        storage_dead(@53)
        storage_live(@55)
        storage_live(@56)
        @56 := &*(a@51)
        storage_live(@57)
        storage_live(@58)
        storage_live(@59)
        @59 := const (100 : i32)
        @58 := &@59
        @57 := &*(@58)
        storage_live(@60)
        storage_live(@61)
        storage_live(@62)
        @62 := const (200 : i64)
        @61 := &@62
        @60 := &*(@61)
        @55 := Both32And64<(dyn exists<_dyn> [@TraitClause0]: Both32And64<_dyn> + _dyn : '_)>::both_operate<'_, '_, '_>(move (@56), move (@57), move (@60))
        storage_dead(@60)
        storage_dead(@57)
        storage_dead(@56)
        storage_dead(@62)
        storage_dead(@61)
        storage_dead(@59)
        storage_dead(@58)
        storage_dead(@55)
        @0 := ()
        storage_dead(@54)
        storage_dead(a@51)
        storage_dead(z@43)
        storage_dead(@11)
        storage_dead(y@8)
        storage_dead(@4)
        storage_dead(x@1)
        @0 := ()
        return
    }
    storage_dead(@14)
    drop[{impl Drop for String}] @15
    drop[{impl Drop for String}] @18
    storage_dead(@20)
    storage_dead(@18)
    storage_dead(@17)
    storage_dead(@15)
    panic(core::panicking::panic)
}



