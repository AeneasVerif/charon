# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Range")]
pub struct core::ops::range::Range<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
}

#[lang_item("index")]
pub trait core::ops::index::Index<Self, Idx>
{
    type Output
    fn index<'_0> = core::ops::index::Index::index<'_0_0, Self, Idx>
}

pub fn core::array::{impl core::ops::index::Index<I> for Array<T, const N : usize>}#15::index<'_0, T, I, const N : usize>(@1: &'_0 (Array<T, const N : usize>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::ops::index::Index<Slice<T>, I>,

pub trait core::slice::index::private_slice_index::Sealed<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("SliceIndex")]
pub trait core::slice::index::SliceIndex<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::slice::index::private_slice_index::Sealed<Self>
    type Output
    fn get<'_0> = core::slice::index::SliceIndex::get<'_0_0, Self, T>
    fn get_mut<'_0> = core::slice::index::SliceIndex::get_mut<'_0_0, Self, T>
    fn get_unchecked = core::slice::index::SliceIndex::get_unchecked<Self, T>
    fn get_unchecked_mut = core::slice::index::SliceIndex::get_unchecked_mut<Self, T>
    fn index<'_0> = core::slice::index::SliceIndex::index<'_0_0, Self, T>
    fn index_mut<'_0> = core::slice::index::SliceIndex::index_mut<'_0_0, Self, T>
}

pub fn core::slice::index::SliceIndex::index<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> &'_0 (Self::Output)

pub fn core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_0, T, I>(@1: &'_0 (Slice<T>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    let @0: &'_ (@TraitClause2::Output); // return
    let self@1: &'_ (Slice<T>); // arg #1
    let index@2: I; // arg #2

    @0 := @TraitClause2::index<'_>(move (index@2), move (self@1))
    return
}

impl core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}<T, I> : core::ops::index::Index<Slice<T>, I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    type Output = @TraitClause2::Output
    fn index<'_0> = core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_0_0, T, I>[@TraitClause0, @TraitClause1, @TraitClause2]
}

impl core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#1 : core::slice::index::private_slice_index::Sealed<core::ops::range::Range<usize>[core::marker::Sized<usize>]>

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> core::option::Option<&'_0 (Slice<T>)>[core::marker::Sized<&'_0 (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (Slice<T>); // anonymous local
    let @10: *const Slice<T>; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *const T; // anonymous local
    let @15: *const T; // anonymous local
    let @16: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := core::option::Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) wrapping.- copy (rhs@5)
        @3 := core::option::Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant @1).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(@11)
            @11 := &raw const *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @15 := cast<*const Slice<T>, *const T>(copy (@11))
            @14 := copy (@15) offset copy (rhs@5)
            storage_dead(@15)
            @10 := @PtrFromPartsShared<'_, Slice<T>>(copy (@14), copy (new_len@6))
            storage_dead(@14)
            storage_dead(@11)
            @9 := &*(@10)
            @0 := core::option::Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := core::option::Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_mut<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> core::option::Option<&'_0 mut (Slice<T>)>[core::marker::Sized<&'_0 mut (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ mut (Slice<T>); // anonymous local
    let @10: *mut Slice<T>; // anonymous local
    let ptr@11: *mut Slice<T>; // local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *mut T; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(ptr@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := core::option::Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) wrapping.- copy (rhs@5)
        @3 := core::option::Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant @1).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(ptr@11)
            ptr@11 := &raw mut *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @15 := cast<*mut Slice<T>, *mut T>(copy (ptr@11))
            @14 := copy (@15) offset copy (rhs@5)
            storage_dead(@15)
            @10 := @PtrFromPartsMut<'_, Slice<T>>(copy (@14), copy (new_len@6))
            storage_dead(@14)
            storage_dead(ptr@11)
            @9 := &mut *(@10)
            @0 := core::option::Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := core::option::Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

#[lang_item("panic_nounwind")]
pub fn core::panicking::panic_nounwind(@1: &'static (Str)) -> !

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    @6 := core::panicking::panic_nounwind(const ("unsafe precondition(s) violated: slice::get_unchecked requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety."))
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked<T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: *const Slice<T>) -> *const Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *const Slice<T>; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *const Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *const T; // anonymous local
    let @12: *const T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) wrapping.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @12 := cast<*const Slice<T>, *const T>(copy (slice@2))
    @11 := copy (@12) offset copy (offset@10)
    storage_dead(@12)
    @0 := @PtrFromPartsShared<'_, Slice<T>>(copy (@11), copy (new_len@8))
    storage_dead(@11)
    return
}

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    @6 := core::panicking::panic_nounwind(const ("unsafe precondition(s) violated: slice::get_unchecked_mut requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety."))
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut<T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: *mut Slice<T>) -> *mut Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *mut Slice<T>; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *mut Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *mut T; // anonymous local
    let @12: *mut T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) wrapping.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @12 := cast<*mut Slice<T>, *mut T>(copy (slice@2))
    @11 := copy (@12) offset copy (offset@10)
    storage_dead(@12)
    @0 := @PtrFromPartsMut<'_, Slice<T>>(copy (@11), copy (new_len@8))
    storage_dead(@11)
    return
}

fn core::slice::index::slice_end_index_len_fail::do_panic::runtime(@1: usize, @2: usize) -> !

fn core::slice::index::slice_end_index_len_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2

    @0 := core::slice::index::slice_end_index_len_fail::do_panic::runtime(move (index@1), move (len@2))
}

fn core::slice::index::slice_end_index_len_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (len@2)
    @0 := core::slice::index::slice_end_index_len_fail::do_panic(move (@3), move (@4))
}

fn core::slice::index::slice_index_order_fail::do_panic::runtime(@1: usize, @2: usize) -> !

fn core::slice::index::slice_index_order_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2

    @0 := core::slice::index::slice_index_order_fail::do_panic::runtime(move (index@1), move (end@2))
}

fn core::slice::index::slice_index_order_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (end@2)
    @0 := core::slice::index::slice_index_order_fail::do_panic(move (@3), move (@4))
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> &'_0 (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (Slice<T>); // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: *const Slice<T>; // anonymous local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *const T; // anonymous local
    let @16: *const T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) wrapping.- copy (rhs@7)
        @5 := core::option::Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant @1).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(@12)
            @12 := &raw const *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @16 := cast<*const Slice<T>, *const T>(copy (@12))
            @15 := copy (@16) offset copy (rhs@7)
            storage_dead(@16)
            @11 := @PtrFromPartsShared<'_, Slice<T>>(copy (@15), copy (new_len@4))
            storage_dead(@15)
            storage_dead(@12)
            @0 := &*(@11)
            storage_dead(@11)
            return
        }
        @10 := core::slice::index::slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := core::slice::index::slice_index_order_fail(move (rhs@7), move (self@6))
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index_mut<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> &'_0 mut (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ mut (Slice<T>); // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *mut Slice<T>; // anonymous local
    let ptr@12: *mut Slice<T>; // local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: *mut T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(ptr@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) wrapping.- copy (rhs@7)
        @5 := core::option::Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant @1).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(ptr@12)
            ptr@12 := &raw mut *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @16 := cast<*mut Slice<T>, *mut T>(copy (ptr@12))
            @15 := copy (@16) offset copy (rhs@7)
            storage_dead(@16)
            @11 := @PtrFromPartsMut<'_, Slice<T>>(copy (@15), copy (new_len@4))
            storage_dead(@15)
            storage_dead(ptr@12)
            @0 := &mut *(@11)
            storage_dead(@11)
            return
        }
        @10 := core::slice::index::slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := core::slice::index::slice_index_order_fail(move (rhs@7), move (self@6))
}

impl core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4<T> : core::slice::index::SliceIndex<core::ops::range::Range<usize>[core::marker::Sized<usize>], Slice<T>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#1
    type Output = Slice<T>
    fn get<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get<'_0_0, T>[@TraitClause0]
    fn get_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_mut<'_0_0, T>[@TraitClause0]
    fn get_unchecked = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked<T>[@TraitClause0]
    fn get_unchecked_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut<T>[@TraitClause0]
    fn index<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index<'_0_0, T>[@TraitClause0]
    fn index_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index_mut<'_0_0, T>[@TraitClause0]
}

fn test_crate::main()
{
    let @0: (); // return
    let array@1: Array<i32, 6 : usize>; // local
    let slice@2: &'_ (Slice<i32>); // local
    let @3: &'_ (Slice<i32>); // anonymous local
    let @4: &'_ (Array<i32, 6 : usize>); // anonymous local
    let @5: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: i32; // anonymous local
    let @9: usize; // anonymous local
    let @10: &'_ (Slice<i32>); // anonymous local
    let @11: &'_ (i32); // anonymous local

    storage_live(array@1)
    array@1 := [const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32)]
    storage_live(slice@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &array@1
    storage_live(@5)
    @5 := core::ops::range::Range { start: const (2 : usize), end: const (5 : usize) }
    @3 := core::array::{impl core::ops::index::Index<I> for Array<T, const N : usize>}#15::index<'_, i32, core::ops::range::Range<usize>[core::marker::Sized<usize>], 6 : usize>[core::marker::Sized<i32>, core::marker::Sized<core::ops::range::Range<usize>[core::marker::Sized<usize>]>, core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}<i32, core::ops::range::Range<usize>[core::marker::Sized<usize>]>[core::marker::Sized<i32>, core::marker::Sized<core::ops::range::Range<usize>[core::marker::Sized<usize>]>, core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4<i32>[core::marker::Sized<i32>]]](move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    slice@2 := &*(@3)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := const (0 : usize)
    storage_live(@10)
    @10 := &*(slice@2)
    storage_live(@11)
    @11 := @SliceIndexShared<'_, i32>(move (@10), copy (@9))
    @8 := copy (*(@11))
    @7 := move (@8) == const (3 : i32)
    if move (@7) {
    }
    else {
        storage_dead(@8)
        storage_dead(@9)
        panic(core::panicking::panic)
    }
    storage_dead(@8)
    storage_dead(@9)
    storage_dead(@7)
    storage_dead(@6)
    @0 := ()
    storage_dead(@3)
    storage_dead(slice@2)
    storage_dead(array@1)
    @0 := ()
    return
}

pub fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (Self::Output)

impl core::array::{impl core::ops::index::Index<I> for Array<T, const N : usize>}#15<T, I, const N : usize> : core::ops::index::Index<Array<T, const N : usize>, I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::ops::index::Index<Slice<T>, I>,
{
    type Output = @TraitClause2::Output
    fn index<'_0> = core::array::{impl core::ops::index::Index<I> for Array<T, const N : usize>}#15::index<'_0_0, T, I, const N : usize>[@TraitClause0, @TraitClause1, @TraitClause2]
}

pub fn core::slice::index::SliceIndex::get<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> core::option::Option<&'_0 (Self::Output)>[core::marker::Sized<&'_0 (Self::Output)>]

pub fn core::slice::index::SliceIndex::get_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> core::option::Option<&'_0 mut (Self::Output)>[core::marker::Sized<&'_0 mut (Self::Output)>]

pub unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(@1: Self, @2: *const T) -> *const Self::Output

pub unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(@1: Self, @2: *mut T) -> *mut Self::Output

pub fn core::slice::index::SliceIndex::index_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> &'_0 mut (Self::Output)



