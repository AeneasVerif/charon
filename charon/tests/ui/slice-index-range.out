# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::index::Index
#[lang_item("index")]
pub trait Index<Self, Idx>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: MetaSized<Idx>
    parent_clause2 : [@TraitClause2]: MetaSized<Self::Output>
    type Output
    fn index<'_0> = core::ops::index::Index::index<'_0_0, Self, Idx>[Self]
    non-dyn-compatible
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::array::{impl Index<I> for Array<T, const N : usize>}::index
pub fn {impl Index<I> for Array<T, const N : usize>}::index<'_0, T, I, const N : usize>(@1: &'_0 (Array<T, const N : usize>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Index<Slice<T>, I>,

// Full name: core::array::{impl Index<I> for Array<T, const N : usize>}
impl<T, I, const N : usize> Index<I> for Array<T, const N : usize>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Index<Slice<T>, I>,
{
    parent_clause0 = MetaSized<Array<T, const N : usize>>
    parent_clause1 = @TraitClause1::parent_clause0
    parent_clause2 = @TraitClause2::parent_clause2
    type Output = @TraitClause2::Output
    fn index<'_0> = {impl Index<I> for Array<T, const N : usize>}::index<'_0_0, T, I, const N : usize>[@TraitClause0, @TraitClause1, @TraitClause2]
    non-dyn-compatible
}

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::fmt::rt::Count
#[lang_item("format_count")]
pub enum Count {
  Is(u16),
  Param(usize),
  Implied,
}

// Full name: core::fmt::rt::Placeholder
#[lang_item("format_placeholder")]
pub struct Placeholder {
  position: usize,
  flags: u32,
  precision: Count,
  width: Count,
}

// Full name: core::fmt::rt::Argument
#[lang_item("format_argument")]
pub opaque type Argument<'a>

fn core::slice::index::slice_end_index_len_fail::do_panic::runtime(@1: usize, @2: usize) -> !

fn core::slice::index::slice_index_order_fail::do_panic::runtime(@1: usize, @2: usize) -> !

pub fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (@TraitClause0::Output)
where
    [@TraitClause0]: Index<Self, Idx>,

// Full name: core::ops::range::Range
#[lang_item("Range")]
pub struct Range<Idx>
where
    [@TraitClause0]: Sized<Idx>,
{
  start: Idx,
  end: Idx,
}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

fn core::slice::index::slice_end_index_len_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2

    @0 := core::slice::index::slice_end_index_len_fail::do_panic::runtime(move (index@1), move (len@2))
}

fn core::slice::index::slice_index_order_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2

    @0 := core::slice::index::slice_index_order_fail::do_panic::runtime(move (index@1), move (end@2))
}

// Full name: core::panicking::panic_nounwind_fmt
pub fn panic_nounwind_fmt<'_0>(@1: Arguments<'_0>, @2: bool) -> !

// Full name: core::slice::index::private_slice_index::Sealed
pub trait Sealed<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::slice::index::private_slice_index::Sealed::{vtable}
}

// Full name: core::slice::index::SliceIndex
#[lang_item("SliceIndex")]
pub trait SliceIndex<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sealed<Self>
    parent_clause2 : [@TraitClause2]: MetaSized<T>
    parent_clause3 : [@TraitClause3]: MetaSized<Self::Output>
    type Output
    fn get<'_0> = core::slice::index::SliceIndex::get<'_0_0, Self, T>[Self]
    fn get_mut<'_0> = core::slice::index::SliceIndex::get_mut<'_0_0, Self, T>[Self]
    fn get_unchecked = core::slice::index::SliceIndex::get_unchecked<Self, T>[Self]
    fn get_unchecked_mut = core::slice::index::SliceIndex::get_unchecked_mut<Self, T>[Self]
    fn index<'_0> = core::slice::index::SliceIndex::index<'_0_0, Self, T>[Self]
    fn index_mut<'_0> = core::slice::index::SliceIndex::index_mut<'_0_0, Self, T>[Self]
    non-dyn-compatible
}

pub fn core::slice::index::SliceIndex::index<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> &'_0 (@TraitClause0::Output)
where
    [@TraitClause0]: SliceIndex<Self, T>,

// Full name: core::slice::index::{impl Index<I> for Slice<T>}::index
pub fn {impl Index<I> for Slice<T>}::index<'_0, T, I>(@1: &'_0 (Slice<T>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: SliceIndex<I, Slice<T>>,
{
    let @0: &'_ (@TraitClause2::Output); // return
    let self@1: &'_ (Slice<T>); // arg #1
    let index@2: I; // arg #2

    @0 := @TraitClause2::index<'_>(move (index@2), move (self@1))
    return
}

// Full name: core::slice::index::{impl Index<I> for Slice<T>}
impl<T, I> Index<I> for Slice<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: SliceIndex<I, Slice<T>>,
{
    parent_clause0 = MetaSized<Slice<T>>
    parent_clause1 = @TraitClause1::parent_clause0
    parent_clause2 = @TraitClause2::parent_clause3
    type Output = @TraitClause2::Output
    fn index<'_0> = {impl Index<I> for Slice<T>}::index<'_0_0, T, I>[@TraitClause0, @TraitClause1, @TraitClause2]
    non-dyn-compatible
}

// Full name: core::slice::index::slice_end_index_len_fail
fn slice_end_index_len_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (len@2)
    @0 := core::slice::index::slice_end_index_len_fail::do_panic(move (@3), move (@4))
}

// Full name: core::slice::index::slice_index_order_fail
fn slice_index_order_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (end@2)
    @0 := core::slice::index::slice_index_order_fail::do_panic(move (@3), move (@4))
}

// Full name: core::slice::index::private_slice_index::{impl Sealed for Range<usize>[Sized<usize>]}
impl Sealed for Range<usize>[Sized<usize>] {
    parent_clause0 = MetaSized<Range<usize>[Sized<usize>]>
    vtable: {impl Sealed for Range<usize>[Sized<usize>]}::{vtable}
}

pub fn core::slice::index::SliceIndex::get<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> Option<&'_0 (@TraitClause0::Output)>[Sized<&'_0 (@TraitClause0::Output)>]
where
    [@TraitClause0]: SliceIndex<Self, T>,

pub fn core::slice::index::SliceIndex::get_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> Option<&'_0 mut (@TraitClause0::Output)>[Sized<&'_0 mut (@TraitClause0::Output)>]
where
    [@TraitClause0]: SliceIndex<Self, T>,

pub unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(@1: Self, @2: *const T) -> *const @TraitClause0::Output
where
    [@TraitClause0]: SliceIndex<Self, T>,

pub unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(@1: Self, @2: *mut T) -> *mut @TraitClause0::Output
where
    [@TraitClause0]: SliceIndex<Self, T>,

pub fn core::slice::index::SliceIndex::index_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> &'_0 mut (@TraitClause0::Output)
where
    [@TraitClause0]: SliceIndex<Self, T>,

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get
pub fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get<'_0, T>(@1: Range<usize>[Sized<usize>], @2: &'_0 (Slice<T>)) -> Option<&'_0 (Slice<T>)>[Sized<&'_0 (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Option<&'_ (Slice<T>)>[Sized<&'_ (Slice<T>)>]; // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: Option<usize>[Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (Slice<T>); // anonymous local
    let @10: *const Slice<T>; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *const T; // anonymous local
    let @15: *const T; // anonymous local
    let @16: Option<&'_ (Slice<T>)>[Sized<&'_ (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) ub.- copy (rhs@5)
        @3 := Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant Option::Some).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(@11)
            @11 := &raw const *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @14 := cast<*const Slice<T>, *const T>(copy (@11))
            @15 := copy (@14) offset copy (rhs@5)
            @10 := @PtrFromPartsShared<'_, Slice<T>>(copy (@15), copy (new_len@6))
            storage_dead(@15)
            storage_dead(@14)
            storage_dead(@11)
            @9 := &*(@10)
            @0 := Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_mut
pub fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_mut<'_0, T>(@1: Range<usize>[Sized<usize>], @2: &'_0 mut (Slice<T>)) -> Option<&'_0 mut (Slice<T>)>[Sized<&'_0 mut (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Option<&'_ mut (Slice<T>)>[Sized<&'_ mut (Slice<T>)>]; // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: Option<usize>[Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ mut (Slice<T>); // anonymous local
    let @10: *mut Slice<T>; // anonymous local
    let ptr@11: *mut Slice<T>; // local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *mut T; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: Option<&'_ mut (Slice<T>)>[Sized<&'_ mut (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(ptr@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) ub.- copy (rhs@5)
        @3 := Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant Option::Some).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(ptr@11)
            ptr@11 := &raw mut *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @14 := cast<*mut Slice<T>, *mut T>(copy (ptr@11))
            @15 := copy (@14) offset copy (rhs@5)
            @10 := @PtrFromPartsMut<'_, Slice<T>>(copy (@15), copy (new_len@6))
            storage_dead(@15)
            storage_dead(@14)
            storage_dead(ptr@11)
            @9 := &mut *(@10)
            @0 := Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked::precondition_check
fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local
    let @7: Arguments<'_>; // anonymous local
    let pieces@8: &'_ (Array<&'_ (Str), 1 : usize>); // local
    let @9: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @10: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @11: &'_ (Slice<Argument<'_>>); // anonymous local
    let @12: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @13: Option<&'_ (Slice<Placeholder>)>[Sized<&'_ (Slice<Placeholder>)>]; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(pieces@8)
    storage_live(@12)
    storage_live(@13)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    storage_live(@7)
    storage_live(@9)
    @9 := [const ("unsafe precondition(s) violated: slice::get_unchecked requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety.")]
    pieces@8 := &@9
    storage_live(@10)
    @10 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(copy (pieces@8))
    storage_live(@11)
    @12 := {promoted_const}<'_, 1 : usize>
    @11 := @ArrayToSliceShared<'_, Argument<'_>, 0 : usize>(move (@12))
    @13 := Option::None {  }
    @7 := Arguments { 0: move (@10), 1: move (@13), 2: move (@11) }
    storage_dead(@11)
    storage_dead(@10)
    @6 := panic_nounwind_fmt<'_>(move (@7), const (false))
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked
pub unsafe fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked<T>(@1: Range<usize>[Sized<usize>], @2: *const Slice<T>) -> *const Slice<T>
where
    [@TraitClause0]: Sized<T>,
{
    let @0: *const Slice<T>; // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: *const Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *const T; // anonymous local
    let @12: *const T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) ub.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @11 := cast<*const Slice<T>, *const T>(copy (slice@2))
    @12 := copy (@11) offset copy (offset@10)
    @0 := @PtrFromPartsShared<'_, Slice<T>>(copy (@12), copy (new_len@8))
    storage_dead(@12)
    storage_dead(@11)
    return
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut::precondition_check
fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local
    let @7: Arguments<'_>; // anonymous local
    let pieces@8: &'_ (Array<&'_ (Str), 1 : usize>); // local
    let @9: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @10: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @11: &'_ (Slice<Argument<'_>>); // anonymous local
    let @12: &'_ (Array<Argument<'_>, 0 : usize>); // anonymous local
    let @13: Option<&'_ (Slice<Placeholder>)>[Sized<&'_ (Slice<Placeholder>)>]; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(pieces@8)
    storage_live(@12)
    storage_live(@13)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    storage_live(@7)
    storage_live(@9)
    @9 := [const ("unsafe precondition(s) violated: slice::get_unchecked_mut requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety.")]
    pieces@8 := &@9
    storage_live(@10)
    @10 := @ArrayToSliceShared<'_, &'_ (Str), 1 : usize>(copy (pieces@8))
    storage_live(@11)
    @12 := {promoted_const}<'_, 1 : usize>
    @11 := @ArrayToSliceShared<'_, Argument<'_>, 0 : usize>(move (@12))
    @13 := Option::None {  }
    @7 := Arguments { 0: move (@10), 1: move (@13), 2: move (@11) }
    storage_dead(@11)
    storage_dead(@10)
    @6 := panic_nounwind_fmt<'_>(move (@7), const (false))
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut
pub unsafe fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut<T>(@1: Range<usize>[Sized<usize>], @2: *mut Slice<T>) -> *mut Slice<T>
where
    [@TraitClause0]: Sized<T>,
{
    let @0: *mut Slice<T>; // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: *mut Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *mut T; // anonymous local
    let @12: *mut T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) ub.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @11 := cast<*mut Slice<T>, *mut T>(copy (slice@2))
    @12 := copy (@11) offset copy (offset@10)
    @0 := @PtrFromPartsMut<'_, Slice<T>>(copy (@12), copy (new_len@8))
    storage_dead(@12)
    storage_dead(@11)
    return
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index
pub fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index<'_0, T>(@1: Range<usize>[Sized<usize>], @2: &'_0 (Slice<T>)) -> &'_0 (Slice<T>)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ (Slice<T>); // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: Option<usize>[Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: *const Slice<T>; // anonymous local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *const T; // anonymous local
    let @16: *const T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) ub.- copy (rhs@7)
        @5 := Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant Option::Some).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(@12)
            @12 := &raw const *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @15 := cast<*const Slice<T>, *const T>(copy (@12))
            @16 := copy (@15) offset copy (rhs@7)
            @11 := @PtrFromPartsShared<'_, Slice<T>>(copy (@16), copy (new_len@4))
            storage_dead(@16)
            storage_dead(@15)
            storage_dead(@12)
            @0 := &*(@11)
            storage_dead(@11)
            return
        }
        @10 := slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := slice_index_order_fail(move (rhs@7), move (self@6))
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index_mut
pub fn {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index_mut<'_0, T>(@1: Range<usize>[Sized<usize>], @2: &'_0 mut (Slice<T>)) -> &'_0 mut (Slice<T>)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ mut (Slice<T>); // return
    let self@1: Range<usize>[Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: Option<usize>[Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *mut Slice<T>; // anonymous local
    let ptr@12: *mut Slice<T>; // local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: *mut T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(ptr@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) ub.- copy (rhs@7)
        @5 := Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant Option::Some).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(ptr@12)
            ptr@12 := &raw mut *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @15 := cast<*mut Slice<T>, *mut T>(copy (ptr@12))
            @16 := copy (@15) offset copy (rhs@7)
            @11 := @PtrFromPartsMut<'_, Slice<T>>(copy (@16), copy (new_len@4))
            storage_dead(@16)
            storage_dead(@15)
            storage_dead(ptr@12)
            @0 := &mut *(@11)
            storage_dead(@11)
            return
        }
        @10 := slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := slice_index_order_fail(move (rhs@7), move (self@6))
}

// Full name: core::slice::index::{impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}
impl<T> SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Range<usize>[Sized<usize>]>
    parent_clause1 = {impl Sealed for Range<usize>[Sized<usize>]}
    parent_clause2 = MetaSized<Slice<T>>
    parent_clause3 = MetaSized<Slice<T>>
    type Output = Slice<T>
    fn get<'_0> = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get<'_0_0, T>[@TraitClause0]
    fn get_mut<'_0> = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_mut<'_0_0, T>[@TraitClause0]
    fn get_unchecked = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked<T>[@TraitClause0]
    fn get_unchecked_mut = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::get_unchecked_mut<T>[@TraitClause0]
    fn index<'_0> = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index<'_0_0, T>[@TraitClause0]
    fn index_mut<'_0> = {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}::index_mut<'_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let array@1: Array<i32, 6 : usize>; // local
    let slice@2: &'_ (Slice<i32>); // local
    let @3: &'_ (Slice<i32>); // anonymous local
    let @4: &'_ (Array<i32, 6 : usize>); // anonymous local
    let @5: Range<usize>[Sized<usize>]; // anonymous local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: i32; // anonymous local
    let @9: usize; // anonymous local
    let @10: &'_ (Slice<i32>); // anonymous local
    let @11: &'_ (i32); // anonymous local

    storage_live(array@1)
    array@1 := [const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32)]
    storage_live(slice@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &array@1
    storage_live(@5)
    @5 := Range { start: const (2 : usize), end: const (5 : usize) }
    @3 := {impl Index<I> for Array<T, const N : usize>}::index<'_, i32, Range<usize>[Sized<usize>], 6 : usize>[Sized<i32>, Sized<Range<usize>[Sized<usize>]>, {impl Index<I> for Slice<T>}<i32, Range<usize>[Sized<usize>]>[Sized<i32>, Sized<Range<usize>[Sized<usize>]>, {impl SliceIndex<Slice<T>> for Range<usize>[Sized<usize>]}<i32>[Sized<i32>]]](move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    slice@2 := &*(@3)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := const (0 : usize)
    storage_live(@10)
    @10 := &*(slice@2)
    storage_live(@11)
    @11 := @SliceIndexShared<'_, i32>(move (@10), copy (@9))
    @8 := copy (*(@11))
    @7 := move (@8) == const (3 : i32)
    if move (@7) {
    }
    else {
        storage_dead(@8)
        storage_dead(@9)
        panic(core::panicking::panic)
    }
    storage_dead(@8)
    storage_dead(@9)
    storage_dead(@7)
    storage_dead(@6)
    @0 := ()
    storage_dead(@3)
    storage_dead(slice@2)
    storage_dead(array@1)
    @0 := ()
    return
}



