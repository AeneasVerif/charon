# Final LLBC before serialization:

pub trait test_crate::BoolTrait<Self>
{
    fn get_bool<'_0> = test_crate::BoolTrait::get_bool<'_0_0, Self>
}

pub fn test_crate::{impl test_crate::BoolTrait for bool}::get_bool<'_0>(@1: &'_0 (bool)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (bool); // arg #1

    @0 := copy (*(self@1))
    return
}

impl test_crate::{impl test_crate::BoolTrait for bool} : test_crate::BoolTrait<bool>
{
    fn get_bool<'_0> = test_crate::{impl test_crate::BoolTrait for bool}::get_bool<'_0_0>
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


pub fn test_crate::BoolTrait::get_bool<'_0, Self>(@1: &'_0 (Self)) -> bool

pub fn test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}#1::get_bool<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::BoolTrait<T>,
{
    let @0: bool; // return
    let self@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let x@2: &'_ (T); // local
    let @3: &'_ (T); // anonymous local

    storage_live(x@2)
    storage_live(@3)
    match *(self@1) {
        0 => {
        },
        1 => {
            storage_live(x@2)
            x@2 := &(*(self@1) as variant @1).0
            storage_live(@3)
            @3 := &*(x@2)
            @0 := @TraitClause1::get_bool<'_>(move (@3))
            storage_dead(@3)
            storage_dead(x@2)
            return
        },
    }
    @0 := const (false)
    return
}

impl test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}#1<T> : test_crate::BoolTrait<core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::BoolTrait<T>,
{
    fn get_bool<'_0> = test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}#1::get_bool<'_0_0, T>[@TraitClause0, @TraitClause1]
}

pub fn test_crate::test_bool_trait_option<T>(@1: core::option::Option<T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::BoolTrait<T>,

opaque type test_crate::Test

fn test_crate::SIX_SIX_SIX() -> u32

global test_crate::SIX_SIX_SIX: u32 = test_crate::SIX_SIX_SIX()

opaque type test_crate::Test2

pub fn test_crate::opaque::fn_in_opaque_module() -> u32
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

fn test_crate::call_fn_in_opaque_module()
{
    let @0: (); // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := test_crate::opaque::fn_in_opaque_module()
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



