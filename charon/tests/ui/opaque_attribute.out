# Final LLBC before serialization:

trait test_crate::BoolTrait<Self>
{
    fn get_bool<'_0> = test_crate::BoolTrait::get_bool<'_0_0, Self>
}

fn test_crate::{impl test_crate::BoolTrait for bool}::get_bool<'_0>(@1: &'_0 (bool)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (bool); // arg #1

    @0 := copy (*(self@1))
    return
}

impl test_crate::{impl test_crate::BoolTrait for bool} : test_crate::BoolTrait<bool>
{
    fn get_bool<'_0> = test_crate::{impl test_crate::BoolTrait for bool}::get_bool<'_0_0>
}

trait core::marker::Sized<Self>

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn test_crate::test_bool_trait_option<T>(@1: core::option::Option<T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,

opaque type test_crate::Test

fn test_crate::SIX_SIX_SIX() -> u32

global test_crate::SIX_SIX_SIX: u32 = test_crate::SIX_SIX_SIX()

opaque type test_crate::Test2

fn test_crate::opaque::fn_in_opaque_module() -> u32
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

fn test_crate::call_fn_in_opaque_module()
{
    let @0: (); // return
    let @1: u32; // anonymous local
    let @2: (); // anonymous local

    @1 := test_crate::opaque::fn_in_opaque_module()
    @fake_read(@1)
    drop @1
    @2 := ()
    @0 := move (@2)
    @0 := ()
    return
}

fn test_crate::BoolTrait::get_bool<'_0, Self>(@1: &'_0 (Self)) -> bool



