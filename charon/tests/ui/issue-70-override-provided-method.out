# Final LLBC before serialization:

// Full name: core::cmp::PartialEq
#[lang_item("eq")]
pub trait PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialEq::{vtable}<Rhs>
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

// Full name: core::cmp::Ordering
#[lang_item("Ordering")]
pub enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::cmp::PartialOrd
#[lang_item("partial_ord")]
pub trait PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialOrd::{vtable}<Rhs>
}

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::impls::{impl PartialEq<i32> for i32}::eq
pub fn {impl PartialEq<i32> for i32}::eq<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> bool

// Full name: core::cmp::impls::{impl PartialEq<i32> for i32}
impl PartialEq<i32> for i32 {
    fn eq<'_0, '_1> = {impl PartialEq<i32> for i32}::eq<'_0_0, '_0_1>
    vtable: {impl PartialEq<i32> for i32}::{vtable}
}

// Full name: core::cmp::impls::{impl PartialEq<u32> for u32}::eq
pub fn {impl PartialEq<u32> for u32}::eq<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> bool

// Full name: core::cmp::impls::{impl PartialEq<u32> for u32}
impl PartialEq<u32> for u32 {
    fn eq<'_0, '_1> = {impl PartialEq<u32> for u32}::eq<'_0_0, '_0_1>
    vtable: {impl PartialEq<u32> for u32}::{vtable}
}

// Full name: core::cmp::impls::{impl PartialOrd<u32> for u32}::partial_cmp
pub fn {impl PartialOrd<u32> for u32}::partial_cmp<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> Option<Ordering>[Sized<Ordering>]

// Full name: core::cmp::impls::{impl PartialOrd<u32> for u32}
impl PartialOrd<u32> for u32 {
    parent_clause0 = {impl PartialEq<u32> for u32}
    fn partial_cmp<'_0, '_1> = {impl PartialOrd<u32> for u32}::partial_cmp<'_0_0, '_0_1>
    vtable: {impl PartialOrd<u32> for u32}::{vtable}
}

// Full name: core::marker::StructuralPartialEq
#[lang_item("structural_peq")]
pub trait StructuralPartialEq<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::StructuralPartialEq::{vtable}
}

// Full name: core::option::{impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}::eq
pub fn {impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}::eq<'_0, '_1, T>(@1: &'_0 (Option<T>[@TraitClause0]), @2: &'_1 (Option<T>[@TraitClause0])) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: PartialEq<T, T>,

// Full name: core::option::{impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}
impl<T> PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: PartialEq<T, T>,
{
    fn eq<'_0, '_1> = {impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}::eq<'_0_0, '_0_1, T>[@TraitClause0, @TraitClause1]
    vtable: {impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}::{vtable}<T>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: &'_ (Option<i32>[Sized<i32>]); // anonymous local
    let @3: Option<i32>[Sized<i32>]; // anonymous local
    let @4: &'_ (Option<i32>[Sized<i32>]); // anonymous local
    let @5: Option<i32>[Sized<i32>]; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @3 := Option::Some { 0: const (1 : i32) }
    @2 := &@3
    storage_live(@4)
    storage_live(@5)
    @5 := Option::Some { 0: const (1 : i32) }
    @4 := &@5
    @1 := {impl PartialEq<Option<T>[@TraitClause0]> for Option<T>[@TraitClause0]}::eq<'_, '_, i32>[Sized<i32>, {impl PartialEq<i32> for i32}](move (@2), move (@4))
    storage_dead(@4)
    storage_dead(@2)
    storage_dead(@5)
    storage_dead(@3)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::Foo
struct Foo {
  u32,
}

// Full name: test_crate::{impl StructuralPartialEq for Foo}
impl StructuralPartialEq for Foo {
    parent_clause0 = MetaSized<Foo>
    vtable: {impl StructuralPartialEq for Foo}::{vtable}
}

// Full name: test_crate::{impl PartialEq<Foo> for Foo}::eq
pub fn {impl PartialEq<Foo> for Foo}::eq<'_0, '_1>(@1: &'_0 (Foo), @2: &'_1 (Foo)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (Foo); // arg #1
    let other@2: &'_ (Foo); // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy ((*(self@1)).0)
    storage_live(@4)
    @4 := copy ((*(other@2)).0)
    @0 := move (@3) == move (@4)
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::{impl PartialEq<Foo> for Foo}
impl PartialEq<Foo> for Foo {
    fn eq<'_0, '_1> = {impl PartialEq<Foo> for Foo}::eq<'_0_0, '_0_1>
    vtable: {impl PartialEq<Foo> for Foo}::{vtable}
}

// Full name: test_crate::{impl PartialOrd<Foo> for Foo}::partial_cmp
pub fn {impl PartialOrd<Foo> for Foo}::partial_cmp<'_0, '_1>(@1: &'_0 (Foo), @2: &'_1 (Foo)) -> Option<Ordering>[Sized<Ordering>]
{
    let @0: Option<Ordering>[Sized<Ordering>]; // return
    let self@1: &'_ (Foo); // arg #1
    let other@2: &'_ (Foo); // arg #2
    let @3: &'_ (u32); // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &(*(self@1)).0
    @3 := &*(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := &(*(other@2)).0
    @5 := &*(@6)
    @0 := {impl PartialOrd<u32> for u32}::partial_cmp<'_, '_>(move (@3), move (@5))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::{impl PartialOrd<Foo> for Foo}
impl PartialOrd<Foo> for Foo {
    parent_clause0 = {impl PartialEq<Foo> for Foo}
    fn partial_cmp<'_0, '_1> = {impl PartialOrd<Foo> for Foo}::partial_cmp<'_0_0, '_0_1>
    vtable: {impl PartialOrd<Foo> for Foo}::{vtable}
}



