# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::num::{usize}::MAX
pub fn MAX() -> usize

// Full name: core::num::{usize}::MAX
pub const MAX: usize = MAX()

// Full name: core::num::{u128}::to_ne_bytes
pub fn to_ne_bytes(@1: u128) -> Array<u8, 16 : usize>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::S
fn S() -> Array<u8, 16 : usize>
{
    let @0: Array<u8, 16 : usize>; // return

    @0 := to_ne_bytes(const (24197857199965561741520400062332047378 : u128))
    return
}

// Full name: test_crate::S
const S: Array<u8, 16 : usize> = S()

// Full name: test_crate::HasBEDiscr
enum HasBEDiscr {
  First,
  Second,
}

// Full name: test_crate::HasBEDiscr::{impl Drop for HasBEDiscr}
impl Drop for HasBEDiscr {
    parent_clause0 = MetaSized<HasBEDiscr>
    fn drop<'_0> = {impl Drop for HasBEDiscr}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::HasBEDiscr::{impl Drop for HasBEDiscr}::drop
fn {impl Drop for HasBEDiscr}::drop<'_0>(@1: &'_0 mut (HasBEDiscr))
{
    let @0: (); // return
    let @1: *mut HasBEDiscr; // arg #1
    let @2: &'_ mut (HasBEDiscr); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    match *(@2) {
        HasBEDiscr::First => {
        },
        _ => {
            return
        },
    }
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let x@1: usize; // local
    let y@2: usize; // local
    let z@3: usize; // local
    let @4: usize; // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let a@7: u128; // local
    let b@8: HasBEDiscr; // local

    storage_live(@6)
    @0 := ()
    storage_live(x@1)
    x@1 := const (52 : usize)
    storage_live(y@2)
    y@2 := copy (MAX)
    storage_live(z@3)
    storage_live(@4)
    @4 := copy (y@2)
    storage_live(@5)
    @5 := copy (x@1)
    @6 := copy (@4) panic.- copy (@5)
    z@3 := move (@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_live(a@7)
    a@7 := const (102 : u128) panic.<< const (64 : i32)
    storage_live(b@8)
    b@8 := HasBEDiscr::Second {  }
    @0 := ()
    storage_dead(b@8)
    storage_dead(a@7)
    storage_dead(z@3)
    storage_dead(y@2)
    storage_dead(x@1)
    return
}



