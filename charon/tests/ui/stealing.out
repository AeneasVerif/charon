# Final LLBC before serialization:

fn test_crate::SLICE() -> Array<(), 4 : usize>
{
    let @0: Array<(), 4 : usize>; // return
    let @1: (); // anonymous local

    storage_live(@1)
    @1 := ()
    @0 := @ArrayRepeat<'_, (), 4 : usize>(move (@1))
    ↳ unwind {
        undefined_behavior
    }
    storage_dead(@1)
    return
}

static test_crate::SLICE: Array<(), 4 : usize> = test_crate::SLICE()

fn test_crate::four() -> usize
{
    let @0: usize; // return

    @0 := const (2 : usize) + const (2 : usize)
    return
}

fn test_crate::BAR() -> Array<(), 42 : usize>
{
    let @0: Array<(), 42 : usize>; // return
    let @1: (); // anonymous local

    storage_live(@1)
    @1 := ()
    @0 := @ArrayRepeat<'_, (), 42 : usize>(move (@1))
    ↳ unwind {
        undefined_behavior
    }
    storage_dead(@1)
    return
}

const test_crate::BAR: Array<(), 42 : usize> = test_crate::BAR()

fn test_crate::FOO() -> usize
{
    let @0: usize; // return

    @0 := const (42 : usize)
    return
}

const test_crate::FOO: usize = test_crate::FOO()



