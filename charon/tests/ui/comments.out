# Final LLBC before serialization:

fn test_crate::function_call(@1: u32)
{
    let @0: (); // return
    let @1: u32; // arg #1

    @0 := ()
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("slice_len_fn")]
pub fn core::slice::{Slice<T>}::len<'_0, T>(@1: &'_0 (Slice<T>)) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn test_crate::sum<'_0>(@1: &'_0 (Slice<u32>)) -> u32
{
    let @0: u32; // return
    let s@1: &'_ (Slice<u32>); // arg #1
    let sum@2: u32; // local
    let i@3: usize; // local
    let @4: (); // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local
    let @7: (); // anonymous local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: usize; // anonymous local
    let @11: &'_ (Slice<u32>); // anonymous local
    let @12: u32; // anonymous local
    let @13: usize; // anonymous local
    let @14: (); // anonymous local
    let @15: u32; // anonymous local
    let @16: bool; // anonymous local
    let @17: u32; // anonymous local
    let @18: u32; // anonymous local
    let @19: (); // anonymous local
    let @20: u32; // anonymous local
    let @21: u32; // anonymous local
    let @22: &'_ (Slice<u32>); // anonymous local
    let @23: &'_ (u32); // anonymous local

    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@18)
    storage_live(@22)
    storage_live(@23)
    storage_live(sum@2)
    // `let sum`
    sum@2 := const (0 : u32)
    storage_live(i@3)
    // `let i`
    //  indented sub-comment
    // unindented sub-comment
    i@3 := const (0 : usize)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    // Function call
    @6 := copy (sum@2)
    @5 := move (@6) + const (2 : u32)
    storage_dead(@6)
    @4 := test_crate::function_call(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@7)
    // Start of loop
    loop {
        storage_live(@8)
        storage_live(@9)
        @9 := copy (i@3)
        storage_live(@10)
        storage_live(@11)
        @11 := &*(s@1)
        @10 := core::slice::{Slice<T>}::len<'_, u32>[core::marker::Sized<u32>](move (@11))
        storage_dead(@11)
        @8 := move (@9) < move (@10)
        if move (@8) {
            storage_dead(@10)
            storage_dead(@9)
            storage_live(@12)
            storage_live(@13)
            // Add to running sum
            @13 := copy (i@3)
            storage_live(@22)
            @22 := &*(s@1)
            storage_live(@23)
            @23 := @SliceIndexShared<'_, u32>(move (@22), copy (@13))
            @12 := copy (*(@23))
            sum@2 := copy (sum@2) + move (@12)
            storage_dead(@12)
            storage_dead(@13)
            // Increment `i`
            i@3 := copy (i@3) + const (1 : usize)
            // Before end of loop
            storage_dead(@8)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@10)
    storage_dead(@9)
    storage_live(@14)
    storage_dead(@14)
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    // Assign the result of an `if`.
    @17 := copy (sum@2)
    @16 := move (@17) > const (10 : u32)
    if move (@16) {
        storage_dead(@17)
        storage_live(@18)
        // sum + 100
        @18 := copy (sum@2)
        @15 := move (@18) + const (100 : u32)
        storage_dead(@18)
    }
    else {
        storage_dead(@17)
        // let sum untouched
        @15 := copy (sum@2)
    }
    storage_dead(@16)
    sum@2 := move (@15)
    storage_dead(@15)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    // Function call
    @21 := copy (sum@2)
    @20 := move (@21) + const (2 : u32)
    storage_dead(@21)
    @19 := test_crate::function_call(move (@20))
    storage_dead(@20)
    storage_dead(@19)
    // Return final value
    @0 := copy (sum@2)
    storage_dead(i@3)
    storage_dead(sum@2)
    return
}

struct test_crate::Foo =
{
  x: u32,
  y: u32,
}

#[lang_item("Default")]
pub trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

pub fn core::default::{impl core::default::Default for u32}#7::default() -> u32

pub fn test_crate::{impl core::default::Default for test_crate::Foo}::default() -> test_crate::Foo
{
    let @0: test_crate::Foo; // return
    let @1: u32; // anonymous local
    let @2: u32; // anonymous local

    storage_live(@1)
    @1 := core::default::{impl core::default::Default for u32}#7::default()
    storage_live(@2)
    @2 := core::default::{impl core::default::Default for u32}#7::default()
    @0 := test_crate::Foo { x: move (@1), y: move (@2) }
    storage_dead(@2)
    storage_dead(@1)
    return
}

impl test_crate::{impl core::default::Default for test_crate::Foo} : core::default::Default<test_crate::Foo>
{
    parent_clause0 = core::marker::Sized<test_crate::Foo>
    fn default = test_crate::{impl core::default::Default for test_crate::Foo}::default
}

struct test_crate::Bar =
{
  x: u32,
  super_long_field_name: u32,
}

pub fn test_crate::{impl core::default::Default for test_crate::Bar}#1::default() -> test_crate::Bar
{
    let @0: test_crate::Bar; // return
    let @1: u32; // anonymous local
    let @2: u32; // anonymous local

    storage_live(@1)
    @1 := core::default::{impl core::default::Default for u32}#7::default()
    storage_live(@2)
    @2 := core::default::{impl core::default::Default for u32}#7::default()
    @0 := test_crate::Bar { x: move (@1), super_long_field_name: move (@2) }
    storage_dead(@2)
    storage_dead(@1)
    return
}

impl test_crate::{impl core::default::Default for test_crate::Bar}#1 : core::default::Default<test_crate::Bar>
{
    parent_clause0 = core::marker::Sized<test_crate::Bar>
    fn default = test_crate::{impl core::default::Default for test_crate::Bar}#1::default
}

fn test_crate::eat<T>(@1: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: (); // return
    let @1: T; // arg #1

    @0 := ()
    drop @1
    @0 := ()
    return
}

pub enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("format_arguments")]
pub opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn test_crate::foo()
{
    let @0: (); // return
    let x@1: u32; // local
    let y@2: u32; // local
    let @3: test_crate::Foo; // anonymous local
    let @4: (); // anonymous local
    let @5: test_crate::Foo; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let x@8: u32; // local
    let super_long_field_name@9: u32; // local
    let @10: test_crate::Bar; // anonymous local
    let @11: (); // anonymous local
    let @12: test_crate::Bar; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let a@15: Array<u32, 10 : usize>; // local
    let @16: (); // anonymous local
    let @17: (&'_ (u32), &'_ (u32)); // anonymous local
    let @18: &'_ (u32); // anonymous local
    let @19: usize; // anonymous local
    let @20: &'_ (u32); // anonymous local
    let @21: u32; // anonymous local
    let left_val@22: &'_ (u32); // local
    let right_val@23: &'_ (u32); // local
    let @24: bool; // anonymous local
    let @25: u32; // anonymous local
    let @26: u32; // anonymous local
    let kind@27: core::panicking::AssertKind; // local
    let @28: core::panicking::AssertKind; // anonymous local
    let @29: &'_ (u32); // anonymous local
    let @30: &'_ (u32); // anonymous local
    let @31: &'_ (u32); // anonymous local
    let @32: &'_ (u32); // anonymous local
    let @33: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local
    let @34: &'_ (Array<u32, 10 : usize>); // anonymous local
    let @35: &'_ (u32); // anonymous local

    storage_live(kind@27)
    storage_live(@28)
    storage_live(@29)
    storage_live(@30)
    storage_live(@31)
    storage_live(@32)
    storage_live(@33)
    storage_live(@3)
    // Call `default` and destructure the result
    @3 := test_crate::{impl core::default::Default for test_crate::Foo}::default()
    storage_live(x@1)
    x@1 := copy ((@3).x)
    storage_live(y@2)
    y@2 := copy ((@3).y)
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    // Call `eat` on an aggregate value
    @6 := copy (x@1)
    storage_live(@7)
    @7 := copy (y@2)
    @5 := test_crate::Foo { x: move (@6), y: move (@7) }
    storage_dead(@7)
    storage_dead(@6)
    @4 := test_crate::eat<test_crate::Foo>[core::marker::Sized<test_crate::Foo>](move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@10)
    // Call `default` and destructure the result
    // This is the long field
    @10 := test_crate::{impl core::default::Default for test_crate::Bar}#1::default()
    storage_live(x@8)
    x@8 := copy ((@10).x)
    storage_live(super_long_field_name@9)
    super_long_field_name@9 := copy ((@10).super_long_field_name)
    storage_dead(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    // Call `eat` on an aggregate value
    @13 := copy (x@8)
    storage_live(@14)
    // This is the long field
    @14 := copy (super_long_field_name@9)
    @12 := test_crate::Bar { x: move (@13), super_long_field_name: move (@14) }
    storage_dead(@14)
    storage_dead(@13)
    @11 := test_crate::eat<test_crate::Bar>[core::marker::Sized<test_crate::Bar>](move (@12))
    storage_dead(@12)
    storage_dead(@11)
    storage_live(a@15)
    // Build an array
    a@15 := @ArrayRepeat<'_, u32, 10 : usize>(const (0 : u32))
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    // `assert_eq`
    @19 := const (9 : usize)
    storage_live(@34)
    @34 := &a@15
    storage_live(@35)
    @35 := @ArrayIndexShared<'_, u32, 10 : usize>(move (@34), copy (@19))
    @18 := &*(@35)
    storage_live(@20)
    storage_live(@21)
    @21 := const (9 : u32)
    @20 := &@21
    @17 := (move (@18), move (@20))
    storage_dead(@20)
    storage_dead(@18)
    storage_live(left_val@22)
    left_val@22 := copy ((@17).0)
    storage_live(right_val@23)
    right_val@23 := copy ((@17).1)
    storage_live(@24)
    storage_live(@25)
    @25 := copy (*(left_val@22))
    storage_live(@26)
    @26 := copy (*(right_val@23))
    @24 := move (@25) == move (@26)
    if move (@24) {
    }
    else {
        storage_dead(@26)
        storage_dead(@25)
        storage_live(kind@27)
        kind@27 := core::panicking::AssertKind::Eq {  }
        storage_live(@28)
        @28 := move (kind@27)
        storage_live(@29)
        storage_live(@30)
        @30 := &*(left_val@22)
        @29 := &*(@30)
        storage_live(@31)
        storage_live(@32)
        @32 := &*(right_val@23)
        @31 := &*(@32)
        storage_live(@33)
        @33 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@26)
    storage_dead(@25)
    storage_dead(@24)
    storage_dead(right_val@23)
    storage_dead(left_val@22)
    storage_dead(@21)
    storage_dead(@19)
    storage_dead(@17)
    storage_dead(@16)
    @0 := ()
    storage_dead(a@15)
    storage_dead(super_long_field_name@9)
    storage_dead(x@8)
    storage_dead(y@2)
    storage_dead(x@1)
    @0 := ()
    return
}

fn test_crate::CONSTANT() -> u32
{
    let @0: u32; // return

    @0 := const (42 : u32)
    return
}

global test_crate::CONSTANT: u32 = test_crate::CONSTANT()

pub fn test_crate::thing()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: u32; // anonymous local
    let @3: (); // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local

    storage_live(@5)
    storage_live(x@1)
    storage_live(@2)
    // This comment belongs above the assignment to `x` and not above intermediate computations.
    @5 := test_crate::CONSTANT
    @2 := move (@5) >> const (3 : i32)
    x@1 := move (@2) + const (12 : u32)
    storage_dead(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := copy (x@1)
    @3 := test_crate::function_call(move (@4))
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    storage_dead(x@1)
    @0 := ()
    return
}

pub fn test_crate::fake_read(@1: u32)
{
    let @0: (); // return
    let x@1: u32; // arg #1

    @0 := ()
    // This statement is translated to a `fake_read`.
    @0 := ()
    return
}

fn test_crate::fool()
{
    let @0: (); // return
    let @1: &'_ (Str); // anonymous local

    storage_live(@1)
    @1 := const ("\n    // Fooled ya")
    storage_dead(@1)
    // Fooled ya";
    @0 := ()
    @0 := ()
    return
}

#[lang_item("default_fn")]
pub fn core::default::Default::default<Self>() -> Self

impl core::default::{impl core::default::Default for u32}#7 : core::default::Default<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    fn default = core::default::{impl core::default::Default for u32}#7::default
}



