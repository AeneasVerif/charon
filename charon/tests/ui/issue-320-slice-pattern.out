# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::slice_pat1
fn slice_pat1()
{
    let @0: (); // return
    let array@1: Array<i32, 4 : usize>; // local
    let _a@2: i32; // local
    let _b@3: Array<i32, 2 : usize>; // local
    let _c@4: i32; // local
    let @5: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @6: &'_ (i32); // anonymous local
    let @7: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @8: &'_ (Slice<i32>); // anonymous local
    let @9: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @10: &'_ (i32); // anonymous local

    @0 := ()
    storage_live(array@1)
    array@1 := @ArrayRepeat<'_, i32, 4 : usize>(const (0 : i32))
    storage_live(_a@2)
    storage_live(@9)
    @9 := &array@1
    storage_live(@10)
    @10 := @ArrayIndexShared<'_, i32, 4 : usize>(move (@9), const (0 : usize))
    _a@2 := copy (*(@10))
    storage_live(_b@3)
    storage_live(@7)
    @7 := &array@1
    storage_live(@8)
    @8 := @ArraySubSliceShared<'_, i32, 4 : usize>(move (@7), const (1 : usize), const (3 : usize))
    _b@3 := copy (*(@8))
    storage_live(_c@4)
    storage_live(@5)
    @5 := &array@1
    storage_live(@6)
    @6 := @ArrayIndexShared<'_, i32, 4 : usize>(move (@5), const (3 : usize))
    _c@4 := copy (*(@6))
    @0 := ()
    storage_dead(_c@4)
    storage_dead(_b@3)
    storage_dead(_a@2)
    storage_dead(array@1)
    return
}

// Full name: test_crate::slice_pat2
fn slice_pat2()
{
    let @0: (); // return
    let array_ref@1: &'_ (Array<i32, 4 : usize>); // local
    let @2: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @3: Array<i32, 4 : usize>; // anonymous local
    let _a@4: &'_ (i32); // local
    let _b@5: &'_ (Array<i32, 2 : usize>); // local
    let _c@6: &'_ (i32); // local
    let @7: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @8: &'_ (i32); // anonymous local
    let @9: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @10: &'_ (Slice<i32>); // anonymous local
    let @11: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @12: &'_ (i32); // anonymous local

    @0 := ()
    storage_live(array_ref@1)
    storage_live(@2)
    storage_live(@3)
    @3 := @ArrayRepeat<'_, i32, 4 : usize>(const (0 : i32))
    @2 := &@3
    array_ref@1 := &*(@2)
    storage_dead(@2)
    storage_live(_a@4)
    storage_live(@11)
    @11 := &*(array_ref@1)
    storage_live(@12)
    @12 := @ArrayIndexShared<'_, i32, 4 : usize>(move (@11), const (0 : usize))
    _a@4 := &*(@12)
    storage_live(_b@5)
    storage_live(@9)
    @9 := &*(array_ref@1)
    storage_live(@10)
    @10 := @ArraySubSliceShared<'_, i32, 4 : usize>(move (@9), const (1 : usize), const (3 : usize))
    _b@5 := &*(@10)
    storage_live(_c@6)
    storage_live(@7)
    @7 := &*(array_ref@1)
    storage_live(@8)
    @8 := @ArrayIndexShared<'_, i32, 4 : usize>(move (@7), const (3 : usize))
    _c@6 := &*(@8)
    @0 := ()
    storage_dead(_c@6)
    storage_dead(_b@5)
    storage_dead(_a@4)
    storage_dead(@3)
    storage_dead(array_ref@1)
    return
}

// Full name: test_crate::slice_pat3
fn slice_pat3()
{
    let @0: (); // return
    let slice@1: &'_ (Slice<i32>); // local
    let @2: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @3: &'_ (Array<i32, 4 : usize>); // anonymous local
    let @4: Array<i32, 4 : usize>; // anonymous local
    let _a@5: &'_ (i32); // local
    let _b@6: &'_ (Slice<i32>); // local
    let _c@7: &'_ (i32); // local
    let @8: usize; // anonymous local
    let @9: usize; // anonymous local
    let @10: bool; // anonymous local
    let @11: usize; // anonymous local
    let @12: usize; // anonymous local
    let @13: usize; // anonymous local
    let @14: &'_ (Slice<i32>); // anonymous local
    let @15: usize; // anonymous local
    let @16: usize; // anonymous local
    let @17: &'_ (i32); // anonymous local
    let @18: &'_ (Slice<i32>); // anonymous local
    let @19: usize; // anonymous local
    let @20: usize; // anonymous local
    let @21: &'_ (Slice<i32>); // anonymous local
    let @22: &'_ (Slice<i32>); // anonymous local
    let @23: &'_ (i32); // anonymous local

    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    @0 := ()
    storage_live(slice@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := @ArrayRepeat<'_, i32, 4 : usize>(const (0 : i32))
    @3 := &@4
    @2 := &*(@3)
    slice@1 := @ArrayToSliceShared<'_, i32, 4 : usize>(move (@2))
    storage_dead(@2)
    storage_dead(@3)
    storage_live(_a@5)
    storage_live(_b@6)
    storage_live(_c@7)
    @8 := len(*(slice@1))
    @9 := const (2 : usize)
    @10 := move (@8) >= move (@9)
    if move (@10) {
    }
    else {
        storage_dead(_c@7)
        storage_dead(_b@6)
        storage_dead(_a@5)
        panic(core::panicking::panic_explicit)
    }
    storage_live(@22)
    @22 := &*(slice@1) with_metadata(copy (slice@1.metadata))
    storage_live(@23)
    @23 := @SliceIndexShared<'_, i32>(move (@22), const (0 : usize))
    _a@5 := &*(@23)
    storage_live(@11)
    @11 := len(*(slice@1))
    storage_live(@12)
    @12 := copy (@11) ub.- const (1 : usize)
    storage_dead(@11)
    storage_live(@13)
    @13 := copy (@12) ub.- const (1 : usize)
    storage_live(@18)
    @18 := &*(slice@1) with_metadata(copy (slice@1.metadata))
    storage_live(@19)
    @19 := len(*(slice@1))
    storage_live(@20)
    @20 := copy (@19) ub.- const (1 : usize)
    storage_dead(@19)
    storage_live(@21)
    @21 := @SliceSubSliceShared<'_, i32>(move (@18), const (1 : usize), copy (@20))
    _b@6 := &*(@21) with_metadata(copy (@13))
    storage_live(@14)
    @14 := &*(slice@1) with_metadata(copy (slice@1.metadata))
    storage_live(@15)
    @15 := len(*(slice@1))
    storage_live(@16)
    @16 := copy (@15) ub.- const (1 : usize)
    storage_dead(@15)
    storage_live(@17)
    @17 := @SliceIndexShared<'_, i32>(move (@14), copy (@16))
    _c@7 := &*(@17)
    @0 := ()
    storage_dead(_c@7)
    storage_dead(_b@6)
    storage_dead(_a@5)
    storage_dead(@4)
    storage_dead(slice@1)
    return
}

// Full name: test_crate::slice_pat4
fn slice_pat4<'_0>(@1: &'_0 (Slice<u32>))
{
    let @0: (); // return
    let x@1: &'_ (Slice<u32>); // arg #1
    let @2: usize; // anonymous local
    let @3: usize; // anonymous local
    let @4: bool; // anonymous local
    let _y@5: &'_ (u32); // local
    let @6: &'_ (Slice<u32>); // anonymous local
    let @7: &'_ (u32); // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @0 := ()
    @2 := len(*(x@1))
    @3 := const (1 : usize)
    @4 := move (@2) == move (@3)
    if move (@4) {
    }
    else {
        @0 := ()
        return
    }
    storage_live(_y@5)
    storage_live(@6)
    @6 := &*(x@1) with_metadata(copy (x@1.metadata))
    storage_live(@7)
    @7 := @SliceIndexShared<'_, u32>(move (@6), const (0 : usize))
    _y@5 := &*(@7)
    @0 := ()
    storage_dead(_y@5)
    return
}

// Full name: test_crate::Unsized
struct Unsized {
  Slice<u32>,
}

// Full name: test_crate::Unsized::{impl Drop for Unsized}
impl Drop for Unsized {
    parent_clause0 = MetaSized<Unsized>
    fn drop<'_0> = {impl Drop for Unsized}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Unsized::{impl Drop for Unsized}::drop
fn {impl Drop for Unsized}::drop<'_0>(@1: &'_0 mut (Unsized))
{
    let @0: (); // return
    let @1: *mut Unsized; // arg #1
    let @2: &'_ mut (Unsized); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1) with_metadata(copy (@1.metadata))
    return
}

// Full name: test_crate::slice_pat5
fn slice_pat5<'_0>(@1: &'_0 (Unsized))
{
    let @0: (); // return
    let x@1: &'_ (Unsized); // arg #1
    let @2: usize; // anonymous local
    let @3: usize; // anonymous local
    let @4: bool; // anonymous local
    let _y@5: u32; // local
    let @6: &'_ (Slice<u32>); // anonymous local
    let @7: &'_ (u32); // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @0 := ()
    @2 := len((*(x@1)).0)
    @3 := const (1 : usize)
    @4 := move (@2) == move (@3)
    if move (@4) {
    }
    else {
        @0 := ()
        return
    }
    storage_live(_y@5)
    storage_live(@6)
    @6 := &(*(x@1)).0 with_metadata(copy (x@1.metadata))
    storage_live(@7)
    @7 := @SliceIndexShared<'_, u32>(move (@6), const (0 : usize))
    _y@5 := copy (*(@7))
    @0 := ()
    storage_dead(_y@5)
    return
}



