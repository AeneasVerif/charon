# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Formatter")]
pub opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::Error = {}

#[lang_item("Display")]
pub trait core::fmt::Display<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Display::fmt<'_0_0, '_0_1, '_0_2, Self>
}

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

fn test_crate::construct<T>(@1: T) -> alloc::boxed::Box<dyn (exists(TODO))>[core::marker::Sized<alloc::alloc::Global>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::fmt::Display<T>,
    T : 'static,

#[lang_item("String")]
pub opaque type alloc::string::String

pub fn alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_0, T>(@1: &'_0 (T)) -> alloc::string::String
where
    [@TraitClause0]: core::fmt::Display<T>,

fn test_crate::destruct<'_0>(@1: &'_0 (dyn (exists(TODO)))) -> alloc::string::String
{
    let @0: alloc::string::String; // return
    let x@1: &'_ (dyn (exists(TODO))); // arg #1
    let @2: &'_ (dyn (exists(TODO))); // anonymous local

    storage_live(@2)
    @2 := &*(x@1)
    @0 := alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_, dyn (exists(TODO))>[core::fmt::Display<dyn (exists(TODO))>](move (@2))
    storage_dead(@2)
    return
}

fn test_crate::combine()

fn test_crate::foo<'_0, '_1, T>(@1: &'_0 (dyn (exists(TODO))), @2: &'_1 (dyn (exists(TODO))))
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: (); // return
    let @1: &'_ (dyn (exists(TODO))); // arg #1
    let @2: &'_ (dyn (exists(TODO))); // arg #2

    @0 := ()
    @0 := ()
    return
}

fn test_crate::bar<'_0>(@1: &'_0 (dyn (exists(TODO))))
{
    let @0: (); // return
    let @1: &'_ (dyn (exists(TODO))); // arg #1

    @0 := ()
    @0 := ()
    return
}

#[lang_item("ToString")]
pub trait alloc::string::ToString<Self>
{
    fn to_string<'_0> = alloc::string::ToString::to_string<'_0_0, Self>
}

#[lang_item("to_string_method")]
pub fn alloc::string::ToString::to_string<'_0, Self>(@1: &'_0 (Self)) -> alloc::string::String

impl alloc::string::{impl alloc::string::ToString for T}#34<T> : alloc::string::ToString<T>
where
    [@TraitClause0]: core::fmt::Display<T>,
{
    fn to_string<'_0> = alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_0_0, T>[@TraitClause0]
}

pub fn core::fmt::Display::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]



