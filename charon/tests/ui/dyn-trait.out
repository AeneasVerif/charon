# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::fmt::Formatter
#[lang_item("Formatter")]
pub opaque type Formatter<'a>
where
    'a : 'a,

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: core::fmt::Error
pub struct Error {}

// Full name: core::fmt::Display
#[lang_item("Display")]
pub trait Display<Self>
{
    fn fmt<'_0, '_1, '_2> = fmt<'_0_0, '_0_1, '_0_2, Self>
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: test_crate::construct
fn construct<T>(@1: T) -> alloc::boxed::Box<dyn (exists(TODO))>[Sized<Global>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Display<T>,
    T : 'static,

// Full name: alloc::string::String
#[lang_item("String")]
pub opaque type String

// Full name: alloc::string::{impl ToString for T}#34::to_string
pub fn {impl ToString for T}#34::to_string<'_0, T>(@1: &'_0 (T)) -> String
where
    [@TraitClause0]: Display<T>,

// Full name: test_crate::destruct
fn destruct<'_0>(@1: &'_0 (dyn (exists(TODO)))) -> String
{
    let @0: String; // return
    let x@1: &'_ (dyn (exists(TODO))); // arg #1
    let @2: &'_ (dyn (exists(TODO))); // anonymous local

    storage_live(@2)
    @2 := &*(x@1)
    @0 := {impl ToString for T}#34::to_string<'_, dyn (exists(TODO))>[Display<dyn (exists(TODO))>](move (@2))
    storage_dead(@2)
    return
}

// Full name: test_crate::combine
fn combine()

// Full name: test_crate::foo
fn foo<'_0, '_1, T>(@1: &'_0 (dyn (exists(TODO))), @2: &'_1 (dyn (exists(TODO))))
where
    [@TraitClause0]: Sized<T>,
{
    let @0: (); // return
    let @1: &'_ (dyn (exists(TODO))); // arg #1
    let @2: &'_ (dyn (exists(TODO))); // arg #2

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::bar
fn bar<'_0>(@1: &'_0 (dyn (exists(TODO))))
{
    let @0: (); // return
    let @1: &'_ (dyn (exists(TODO))); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: alloc::string::ToString
#[lang_item("ToString")]
pub trait ToString<Self>
{
    fn to_string<'_0> = alloc::string::ToString::to_string<'_0_0, Self>
}

#[lang_item("to_string_method")]
pub fn alloc::string::ToString::to_string<'_0, Self>(@1: &'_0 (Self)) -> String

// Full name: alloc::string::{impl ToString for T}#34
impl<T> ToString for T
where
    [@TraitClause0]: Display<T>,
{
    fn to_string<'_0> = {impl ToString for T}#34::to_string<'_0_0, T>[@TraitClause0]
}

// Full name: core::fmt::Display::fmt
pub fn fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (Formatter<'_2>)) -> Result<(), Error>[Sized<()>, Sized<Error>]



