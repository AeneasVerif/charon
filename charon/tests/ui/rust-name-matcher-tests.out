# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::foo::bar
fn bar()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::Trait
trait Trait<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn method<U, [@TraitClause0]: Sized<U>> = test_crate::Trait::method<Self, T, U>[Self, @TraitClause0_0]
    non-dyn-compatible
}

fn test_crate::Trait::method<Self, T, U>()
where
    [@TraitClause0]: Trait<Self, T>,
    [@TraitClause1]: Sized<U>,

// Full name: test_crate::{impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]}::method
fn {impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]}::method<T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]}
impl<T> Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]>
    parent_clause1 = Sized<Option<T>[@TraitClause0]>
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[@TraitClause0::parent_clause0, Sized<Global>]}::method<T, U>[@TraitClause0, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: test_crate::{impl Trait<T> for Slice<T>}::method
fn {impl Trait<T> for Slice<T>}::method<T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<T> for Slice<T>}
impl<T> Trait<T> for Slice<T>
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Slice<T>>
    parent_clause1 = @TraitClause0
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<T> for Slice<T>}::method<T, U>[@TraitClause0, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: test_crate::{impl Trait<T> for &'_0 (Slice<T>)}::method
fn {impl Trait<T> for &'_0 (Slice<T>)}::method<'_0, T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<T> for &'_0 (Slice<T>)}
impl<'_0, T> Trait<T> for &'_0 (Slice<T>)
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<&'_ (Slice<T>)>
    parent_clause1 = @TraitClause0
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<T> for &'_0 (Slice<T>)}::method<'_0, T, U>[@TraitClause0, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: test_crate::Generic
struct Generic<T>
where
    [@TraitClause0]: Sized<T>,
{
  value: T,
}

// Full name: test_crate::{Generic<T>[@TraitClause0]}::new
fn new<T>(@1: T) -> Generic<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Generic<T>[@TraitClause0]; // return
    let value@1: T; // arg #1
    let @2: T; // anonymous local

    storage_live(@2)
    @2 := move (value@1)
    @0 := Generic { value: move (@2) }
    drop[Drop<T>] @2
    storage_dead(@2)
    drop[Drop<T>] value@1
    return
}

// Full name: test_crate::{Generic<T>[@TraitClause0]}::get
fn get<'_0, T>(@1: &'_0 (Generic<T>[@TraitClause0])) -> &'_0 (T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ (T); // return
    let self@1: &'_ (Generic<T>[@TraitClause0]); // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &(*(self@1)).value
    @0 := &*(@2)
    storage_dead(@2)
    return
}

// Full name: test_crate::use_generic
fn use_generic()
{
    let @0: (); // return
    let _int_generic@1: Generic<i32>[Sized<i32>]; // local
    let _str_generic@2: Generic<&'_ (Str)>[Sized<&'_ (Str)>]; // local
    let @3: &'_ (i32); // anonymous local
    let @4: &'_ (Generic<i32>[Sized<i32>]); // anonymous local

    @0 := ()
    storage_live(_int_generic@1)
    _int_generic@1 := new<i32>[Sized<i32>](const (42 : i32))
    storage_live(_str_generic@2)
    _str_generic@2 := new<&'_ (Str)>[Sized<&'_ (Str)>](const ("hello"))
    storage_live(@3)
    storage_live(@4)
    @4 := &_int_generic@1
    @3 := get<'_, i32>[Sized<i32>](move (@4))
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    storage_dead(_str_generic@2)
    storage_dead(_int_generic@1)
    return
}



