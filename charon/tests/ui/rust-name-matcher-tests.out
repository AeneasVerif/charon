# Final LLBC before serialization:

// Full name: test_crate::foo::bar
fn bar()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::Trait
trait Trait<Self, T>
{
    parent_clause0 : [@TraitClause0]: Sized<T>
    fn method<U, [@TraitClause0]: Sized<U>> = test_crate::Trait::method<Self, T, U>[@TraitClause0_0]
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
  where
      [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: test_crate::{impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[Sized<Global>]}::method
fn {impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[Sized<Global>]}::method<T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[Sized<Global>]}
impl<T> Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[Sized<Global>]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = Sized<Option<T>[@TraitClause0]>
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[Sized<Global>]}::method<T, U>[@TraitClause0, @TraitClause0_0]
}

// Full name: test_crate::{impl Trait<T> for Slice<T>}#1::method
fn {impl Trait<T> for Slice<T>}#1::method<T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<T> for Slice<T>}#1
impl<T> Trait<T> for Slice<T>
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = @TraitClause0
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<T> for Slice<T>}#1::method<T, U>[@TraitClause0, @TraitClause0_0]
}

// Full name: test_crate::{impl Trait<T> for &'_0 (Slice<T>)}#2::method
fn {impl Trait<T> for &'_0 (Slice<T>)}#2::method<'_0, T, U>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait<T> for &'_0 (Slice<T>)}#2
impl<'_0, T> Trait<T> for &'_0 (Slice<T>)
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = @TraitClause0
    fn method<U, [@TraitClause0]: Sized<U>> = {impl Trait<T> for &'_0 (Slice<T>)}#2::method<'_0, T, U>[@TraitClause0, @TraitClause0_0]
}

fn test_crate::Trait::method<Self, T, U>()
where
    [@TraitClause0]: Sized<U>,



