# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

fn core::intrinsics::copy_nonoverlapping::precondition_check(@1: *const (), @2: *mut (), @3: usize, @4: usize, @5: usize)

#[lang_item("ptr_copy_nonoverlapping")]
pub unsafe fn core::intrinsics::copy_nonoverlapping<T>(@1: *const T, @2: *mut T, @3: usize)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: (); // return
    let src@1: *const T; // arg #1
    let dst@2: *mut T; // arg #2
    let count@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: (); // anonymous local
    let @6: *const (); // anonymous local
    let @7: *mut (); // anonymous local
    let @8: usize; // anonymous local
    let @9: usize; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@4)
    @4 := ub_checks<bool>
    if move (@4) {
        storage_live(@6)
        @6 := cast<*const T, *const ()>(copy (src@1))
        storage_live(@7)
        @7 := cast<*mut T, *mut ()>(copy (dst@2))
        storage_live(@8)
        @8 := size_of<T>
        storage_live(@9)
        @9 := align_of<T>
        @5 := core::intrinsics::copy_nonoverlapping::precondition_check(move (@6), move (@7), move (@8), move (@9), copy (count@3))
        storage_dead(@9)
        storage_dead(@8)
        storage_dead(@7)
        storage_dead(@6)
    }
    else {
    }
    storage_dead(@4)
    copy_nonoverlapping(copy (src@1), copy (dst@2), copy (count@3))
    @0 := ()
    return
}

fn test_crate::write<'_0, '_1, T>(@1: &'_0 mut (T), @2: &'_1 (T))
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: (); // return
    let x@1: &'_ mut (T); // arg #1
    let y@2: &'_ (T); // arg #2
    let @3: (); // anonymous local
    let @4: *const T; // anonymous local
    let @5: *mut T; // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := &raw const *(y@2)
    storage_live(@5)
    @5 := &raw mut *(x@1)
    @3 := core::intrinsics::copy_nonoverlapping<T>[@TraitClause0](move (@4), move (@5), const (1 : usize))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    @0 := ()
    return
}



