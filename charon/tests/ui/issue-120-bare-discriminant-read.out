# Final LLBC before serialization:

enum core::option::Option<T> =
|  None()
|  Some(T)


fn test_crate::call_is_some<T>(@1: core::option::Option<T>) -> bool
{
    let @0: bool; // return
    let opt@1: core::option::Option<T>; // arg #1
    let @2: isize; // anonymous local

    match opt@1 {
        0 => {
            @2 := const (0 : isize)
        },
        1 => {
            @2 := const (1 : isize)
        }
    }
    @0 := copy (@2) == const (1 : isize)
    drop opt@1
    return
}

fn test_crate::my_is_some<T>(@1: core::option::Option<T>) -> isize
{
    let @0: isize; // return
    let opt@1: core::option::Option<T>; // arg #1

    match opt@1 {
        0 => {
            @0 := const (0 : isize)
        },
        1 => {
            @0 := const (1 : isize)
        }
    }
    drop opt@1
    return
}



