# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn test_crate::discriminant_value<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> isize
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: isize; // return
    let opt@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let @2: &'_ (core::option::Option<T>[@TraitClause0]); // anonymous local

    @2 := copy (opt@1)
    match *(@2) {
        0 => {
            @0 := const (0 : isize)
        },
        1 => {
            @0 := const (1 : isize)
        },
    }
    drop @2
    return
}

fn test_crate::is_some<T>(@1: core::option::Option<T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: bool; // return
    let opt@1: core::option::Option<T>[@TraitClause0]; // arg #1
    let @2: isize; // anonymous local
    let @3: &'_ (core::option::Option<T>[@TraitClause0]); // anonymous local
    let @4: &'_ (core::option::Option<T>[@TraitClause0]); // anonymous local

    @4 := &opt@1
    @3 := copy (@4)
    @2 := test_crate::discriminant_value<'_, T>[@TraitClause0](move (@3))
    drop @3
    @0 := move (@2) != const (0 : isize)
    drop @2
    drop @4
    drop opt@1
    return
}

fn test_crate::my_is_some<T>(@1: core::option::Option<T>[@TraitClause0]) -> isize
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: isize; // return
    let opt@1: core::option::Option<T>[@TraitClause0]; // arg #1

    match opt@1 {
        0 => {
            @0 := const (0 : isize)
        },
        1 => {
            @0 := const (1 : isize)
        },
    }
    drop opt@1
    return
}



