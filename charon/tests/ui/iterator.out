# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("ArrayIntoIter")]
pub opaque type core::array::iter::IntoIter<T, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<T>,

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("SliceIter")]
pub opaque type core::slice::iter::Iter<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

pub opaque type core::slice::iter::Chunks<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

pub opaque type core::slice::iter::ChunksExact<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

pub enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


#[lang_item("format_arguments")]
pub opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

pub fn core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>(@1: Array<T, const N : usize>) -> core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
    fn clone_from<'_0, '_1> = core::clone::Clone::clone_from<'_0_0, '_0_1, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub trait core::num::nonzero::private::Sealed<Self>

pub trait core::num::nonzero::ZeroablePrimitive<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Copy<Self>
    parent_clause2 : [@TraitClause2]: core::num::nonzero::private::Sealed<Self>
    parent_clause3 : [@TraitClause3]: core::marker::Sized<Self::NonZeroInner>
    parent_clause4 : [@TraitClause4]: core::marker::Copy<Self::NonZeroInner>
    type NonZeroInner
}

#[lang_item("NonZero")]
pub opaque type core::num::nonzero::NonZero<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::num::nonzero::ZeroablePrimitive<T>,

pub fn core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0>(@1: &'_0 (usize)) -> usize

pub fn core::clone::impls::{impl core::clone::Clone for usize}#5::clone_from<'_0, '_1>(@1: &'_0 mut (usize), @2: &'_1 (usize))

impl core::clone::impls::{impl core::clone::Clone for usize}#5 : core::clone::Clone<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0_0>
    fn clone_from<'_0, '_1> = core::clone::impls::{impl core::clone::Clone for usize}#5::clone_from<'_0_0, '_0_1>
}

impl core::marker::{impl core::marker::Copy for usize}#37 : core::marker::Copy<usize>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for usize}#5
}

impl core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#26 : core::num::nonzero::private::Sealed<usize>

pub opaque type core::num::niche_types::NonZeroUsizeInner

pub fn core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140::clone<'_0>(@1: &'_0 (core::num::niche_types::NonZeroUsizeInner)) -> core::num::niche_types::NonZeroUsizeInner

pub fn core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140::clone_from<'_0, '_1>(@1: &'_0 mut (core::num::niche_types::NonZeroUsizeInner), @2: &'_1 (core::num::niche_types::NonZeroUsizeInner))

impl core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140 : core::clone::Clone<core::num::niche_types::NonZeroUsizeInner>
{
    parent_clause0 = core::marker::Sized<core::num::niche_types::NonZeroUsizeInner>
    fn clone<'_0> = core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140::clone<'_0_0>
    fn clone_from<'_0, '_1> = core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140::clone_from<'_0_0, '_0_1>
}

impl core::num::niche_types::{impl core::marker::Copy for core::num::niche_types::NonZeroUsizeInner}#141 : core::marker::Copy<core::num::niche_types::NonZeroUsizeInner>
{
    parent_clause0 = core::num::niche_types::{impl core::clone::Clone for core::num::niche_types::NonZeroUsizeInner}#140
}

impl core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27 : core::num::nonzero::ZeroablePrimitive<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    parent_clause1 = core::marker::{impl core::marker::Copy for usize}#37
    parent_clause2 = core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#26
    parent_clause3 = core::marker::Sized<core::num::niche_types::NonZeroUsizeInner>
    parent_clause4 = core::num::niche_types::{impl core::marker::Copy for core::num::niche_types::NonZeroUsizeInner}#141
    type NonZeroInner = core::num::niche_types::NonZeroUsizeInner
}

pub opaque type core::iter::adapters::step_by::StepBy<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::chain::Chain<A, B>
  where
      [@TraitClause0]: core::marker::Sized<A>,
      [@TraitClause1]: core::marker::Sized<B>,

pub opaque type core::iter::adapters::zip::Zip<A, B>
  where
      [@TraitClause0]: core::marker::Sized<A>,
      [@TraitClause1]: core::marker::Sized<B>,

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

pub opaque type core::iter::adapters::map::Map<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

pub opaque type core::iter::adapters::filter::Filter<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

pub opaque type core::iter::adapters::filter_map::FilterMap<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

#[lang_item("Enumerate")]
pub opaque type core::iter::adapters::enumerate::Enumerate<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::skip_while::SkipWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

pub opaque type core::iter::adapters::take_while::TakeWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

pub opaque type core::iter::adapters::map_while::MapWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

pub opaque type core::iter::adapters::skip::Skip<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::take::Take<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::scan::Scan<I, St, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<St>,
      [@TraitClause2]: core::marker::Sized<F>,

pub opaque type core::iter::adapters::fuse::Fuse<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::inspect::Inspect<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

#[lang_item("FromResidual")]
pub trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual = core::ops::try_trait::FromResidual::from_residual<Self, R>
}

#[lang_item("ControlFlow")]
pub enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


#[lang_item("Try")]
pub trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = core::ops::try_trait::Try::from_output<Self>
    fn branch = core::ops::try_trait::Try::branch<Self>
}

pub trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause2::Output = O,
    Self::parent_clause2::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::Try<Self::TryType>
    type TryType
}

#[lang_item("Default")]
pub trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
    fn ne<'_0, '_1> = core::cmp::PartialEq::ne<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
    fn assert_receiver_is_total_eq<'_0> = core::cmp::Eq::assert_receiver_is_total_eq<'_0_0, Self>
}

#[lang_item("Ordering")]
pub enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


#[lang_item("partial_ord")]
pub trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
    fn lt<'_0, '_1> = core::cmp::PartialOrd::lt<'_0_0, '_0_1, Self, Rhs>
    fn le<'_0, '_1> = core::cmp::PartialOrd::le<'_0_0, '_0_1, Self, Rhs>
    fn gt<'_0, '_1> = core::cmp::PartialOrd::gt<'_0_0, '_0_1, Self, Rhs>
    fn ge<'_0, '_1> = core::cmp::PartialOrd::ge<'_0_0, '_0_1, Self, Rhs>
    fn __chaining_lt<'_0, '_1> = core::cmp::PartialOrd::__chaining_lt<'_0_0, '_0_1, Self, Rhs>
    fn __chaining_le<'_0, '_1> = core::cmp::PartialOrd::__chaining_le<'_0_0, '_0_1, Self, Rhs>
    fn __chaining_gt<'_0, '_1> = core::cmp::PartialOrd::__chaining_gt<'_0_0, '_0_1, Self, Rhs>
    fn __chaining_ge<'_0, '_1> = core::cmp::PartialOrd::__chaining_ge<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Ord")]
pub trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
    fn max<[@TraitClause0]: core::marker::Sized<Self>> = core::cmp::Ord::max<Self>[@TraitClause0_0]
    fn min<[@TraitClause0]: core::marker::Sized<Self>> = core::cmp::Ord::min<Self>[@TraitClause0_0]
    fn clamp<[@TraitClause0]: core::marker::Sized<Self>> = core::cmp::Ord::clamp<Self>[@TraitClause0_0]
}

pub opaque type core::iter::adapters::rev::Rev<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,

pub opaque type core::iter::adapters::copied::Copied<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::cloned::Cloned<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

pub opaque type core::iter::adapters::cycle::Cycle<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

#[lang_item("iterator")]
pub trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::next_chunk<'_0_0, Self, const N : usize>[@TraitClause0_0]
    fn size_hint<'_0> = core::iter::traits::iterator::Iterator::size_hint<'_0_0, Self>
    fn count<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::count<Self>[@TraitClause0_0]
    fn last<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::last<Self>[@TraitClause0_0]
    fn advance_by<'_0> = core::iter::traits::iterator::Iterator::advance_by<'_0_0, Self>
    fn nth<'_0> = core::iter::traits::iterator::Iterator::nth<'_0_0, Self>
    fn step_by<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::step_by<Self>[@TraitClause0_0]
    fn chain<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>, @TraitClause1_2::Item = Self::Item> = core::iter::traits::iterator::Iterator::chain<Self, U>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>> = core::iter::traits::iterator::Iterator::zip<Self, U>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::clone::Clone<Self::Item>> = core::iter::traits::iterator::Iterator::intersperse<Self>[@TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: core::marker::Sized<G>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<G, ()>, @TraitClause1_2::parent_clause0::Output = Self::Item> = core::iter::traits::iterator::Iterator::intersperse_with<Self, G>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause0::Output = B> = core::iter::traits::iterator::Iterator::map<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause0::Output = ()> = core::iter::traits::iterator::Iterator::for_each<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::filter<Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::iter::traits::iterator::Iterator::filter_map<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::enumerate<Self>[@TraitClause0_0]
    fn peekable<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::peekable<Self>[@TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::skip_while<Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::take_while<Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<P, (Self::Item)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::iter::traits::iterator::Iterator::map_while<Self, B, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::skip<Self>[@TraitClause0_0]
    fn take<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::take<Self>[@TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: core::marker::Sized<St>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<F>, [@TraitClause3]: core::marker::Sized<Self>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), Self::Item)>, for<'_0> @TraitClause1_4::parent_clause0::Output = core::option::Option<B>[@TraitClause1_1]> = core::iter::traits::iterator::Iterator::scan<Self, St, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>, [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_4::parent_clause0::Output = U> = core::iter::traits::iterator::Iterator::flat_map<Self, U, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<Self::Item>> = core::iter::traits::iterator::Iterator::flatten<Self>[@TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<Self::Item, const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause0::Output = R> = core::iter::traits::iterator::Iterator::map_windows<Self, F, R, const N : usize>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::fuse<Self>[@TraitClause0_0]
    fn inspect<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = ()> = core::iter::traits::iterator::Iterator::inspect<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::by_ref<'_0_0, Self>[@TraitClause0_0]
    fn collect<B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::iter::traits::collect::FromIterator<B, Self::Item>, [@TraitClause2]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::collect<Self, B>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::try_trait::Try<Self::Item>, [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause1_2::Output>> = core::iter::traits::iterator::Iterator::try_collect<'_0_0, Self, B>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: core::marker::Sized<E>, [@TraitClause1]: core::iter::traits::collect::Extend<E, Self::Item>, [@TraitClause2]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::collect_into<'_0_0, Self, E>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::default::Default<B>, [@TraitClause4]: core::iter::traits::collect::Extend<B, Self::Item>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_5::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::partition<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<Self>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, T : 'a, Self::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::partition_in_place<'a, Self, T, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>, @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::is_partitioned<Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<Self>, [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::Item)>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::iter::traits::iterator::Iterator::try_fold<'_0_0, Self, B, F, R>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>, [@TraitClause4]: core::ops::try_trait::Try<R>, @TraitClause1_3::parent_clause0::Output = R, @TraitClause1_4::Output = ()> = core::iter::traits::iterator::Iterator::try_for_each<'_0_0, Self, F, R>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::Item)>, @TraitClause1_3::parent_clause0::Output = B> = core::iter::traits::iterator::Iterator::fold<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item, Self::Item)>, @TraitClause1_2::parent_clause0::Output = Self::Item> = core::iter::traits::iterator::Iterator::reduce<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>, [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (Self::Item, Self::Item)>, @TraitClause1_3::Output = Self::Item, @TraitClause1_5::parent_clause0::Output = R> = core::iter::traits::iterator::Iterator::try_reduce<'_0_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::all<'_0_0, Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::any<'_0_0, Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::find<'_0_0, Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::iter::traits::iterator::Iterator::find_map<'_0_0, Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (Self::Item))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause0::Output = R> = core::iter::traits::iterator::Iterator::try_find<'_0_0, Self, R, impl FnMut(&Self::Item) -> R>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>, @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::position<'_0_0, Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::ops::function::FnMut<P, (Self::Item)>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<Self>, [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<Self>, @TraitClause1_1::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::rposition<'_0_0, Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::cmp::Ord<Self::Item>> = core::iter::traits::iterator::Iterator::max<Self>[@TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::cmp::Ord<Self::Item>> = core::iter::traits::iterator::Iterator::min<Self>[@TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<Self>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::iter::traits::iterator::Iterator::max_by_key<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::iter::traits::iterator::Iterator::max_by<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<Self>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::iter::traits::iterator::Iterator::min_by_key<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::iter::traits::iterator::Iterator::min_by<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<Self>> = core::iter::traits::iterator::Iterator::rev<Self>[@TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: core::marker::Sized<A>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<FromA>, [@TraitClause3]: core::marker::Sized<FromB>, [@TraitClause4]: core::default::Default<FromA>, [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>, [@TraitClause6]: core::default::Default<FromB>, [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>, [@TraitClause8]: core::marker::Sized<Self>, [@TraitClause9]: core::iter::traits::iterator::Iterator<Self>, Self::Item = (A, B)> = core::iter::traits::iterator::Iterator::unzip<Self, A, B, FromA, FromB>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>, [@TraitClause3]: core::marker::Copy<T>, T : 'a, Self::Item = &'a (T)> = core::iter::traits::iterator::Iterator::copied<'a, Self, T>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>, [@TraitClause3]: core::clone::Clone<T>, T : 'a, Self::Item = &'a (T)> = core::iter::traits::iterator::Iterator::cloned<'a, Self, T>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::clone::Clone<Self>> = core::iter::traits::iterator::Iterator::cycle<Self>[@TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::array_chunks<Self, const N : usize>[@TraitClause0_0]
    fn sum<S, [@TraitClause0]: core::marker::Sized<S>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::accum::Sum<S, Self::Item>> = core::iter::traits::iterator::Iterator::sum<Self, S>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: core::iter::traits::accum::Product<P, Self::Item>> = core::iter::traits::iterator::Iterator::product<Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::Ord<Self::Item>, [@TraitClause3]: core::marker::Sized<Self>, @TraitClause1_1::Item = Self::Item> = core::iter::traits::iterator::Iterator::cmp<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::cmp::Ordering> = core::iter::traits::iterator::Iterator::cmp_by<Self, I, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::partial_cmp<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]> = core::iter::traits::iterator::Iterator::partial_cmp_by<Self, I, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::eq<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::eq_by<Self, I, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::ne<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::lt<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::le<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::gt<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::ge<Self, I>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: core::marker::Sized<Self>, [@TraitClause1]: core::cmp::PartialOrd<Self::Item, Self::Item>> = core::iter::traits::iterator::Iterator::is_sorted<Self>[@TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::iterator::Iterator::is_sorted_by<Self, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<K>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>, [@TraitClause4]: core::cmp::PartialOrd<K, K>, @TraitClause1_3::parent_clause0::Output = K> = core::iter::traits::iterator::Iterator::is_sorted_by_key<Self, F, K>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0, [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>> = core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0_0, Self>[@TraitClause0_0]
}

#[lang_item("IntoIterator")]
pub trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause2::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>
}

pub opaque type core::iter::adapters::intersperse::Intersperse<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::clone::Clone<@TraitClause1::Item>,

pub opaque type core::iter::adapters::intersperse::IntersperseWith<I, G>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<G>,
      [@TraitClause2]: core::iter::traits::iterator::Iterator<I>,

#[lang_item("IterPeekable")]
pub opaque type core::iter::adapters::peekable::Peekable<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

pub opaque type core::iter::adapters::flatten::FlatMap<I, U, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<U>,
      [@TraitClause2]: core::marker::Sized<F>,
      [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

pub opaque type core::iter::adapters::flatten::Flatten<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::iter::traits::collect::IntoIterator<@TraitClause1::Item>,

pub opaque type core::iter::adapters::map_windows::MapWindows<I, F, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,
      [@TraitClause2]: core::iter::traits::iterator::Iterator<I>,

#[lang_item("FromIterator")]
pub trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::FromIterator::from_iter<Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

pub trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend<'_0, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::Extend::extend<'_0_0, Self, A, T>[@TraitClause0_0, @TraitClause0_1]
    fn extend_one<'_0> = core::iter::traits::collect::Extend::extend_one<'_0_0, Self, A>
    fn extend_reserve<'_0> = core::iter::traits::collect::Extend::extend_reserve<'_0_0, Self, A>
    fn extend_one_unchecked<'_0, [@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::collect::Extend::extend_one_unchecked<'_0_0, Self, A>[@TraitClause0_0]
}

#[lang_item("DoubleEndedIterator")]
pub trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0_0, Self>
    fn advance_back_by<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by<'_0_0, Self>
    fn nth_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::nth_back<'_0_0, Self>
    fn try_rfold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<Self>, [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::iter::traits::double_ended::DoubleEndedIterator::try_rfold<'_0_0, Self, B, F, R>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn rfold<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<Self>, [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>, @TraitClause1_3::parent_clause0::Output = B> = core::iter::traits::double_ended::DoubleEndedIterator::rfold<Self, B, F>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn rfind<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<Self>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::parent_clause0::Item))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::iter::traits::double_ended::DoubleEndedIterator::rfind<'_0_0, Self, P>[@TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
}

pub trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn len<'_0> = core::iter::traits::exact_size::ExactSizeIterator::len<'_0_0, Self>
    fn is_empty<'_0> = core::iter::traits::exact_size::ExactSizeIterator::is_empty<'_0_0, Self>
}

pub opaque type core::iter::adapters::array_chunks::ArrayChunks<I, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

pub trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

pub trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

pub trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
    fn size<'_0, [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>> = core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size<'_0_0, Self>[@TraitClause0_0]
}

pub fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next_chunk<'_0, T, const N : usize, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> core::result::Result<Array<T, const N : usize>, core::array::iter::IntoIter<T, const N : usize>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>[core::marker::Sized<Array<T, const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::size_hint<'_0, T, const N : usize>(@1: &'_0 (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::count<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::last<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::advance_by<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::nth<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::step_by<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> core::iter::adapters::step_by::StepBy<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::chain<T, U, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: U) -> core::iter::adapters::chain::Chain<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause3::Item = T,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::zip<T, U, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: U) -> core::iter::adapters::zip::Zip<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::intersperse<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: T) -> core::iter::adapters::intersperse::Intersperse<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::intersperse_with<T, G, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: G) -> core::iter::adapters::intersperse::IntersperseWith<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], G>[@TraitClause2, @TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<G>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<G, ()>,
    @TraitClause3::parent_clause0::Output = T,

#[lang_item("IteratorMap")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map<T, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::iter::adapters::map::Map<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (T)>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::for_each<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T)>,
    @TraitClause3::parent_clause0::Output = (),

#[lang_item("iter_filter")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::filter<T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> core::iter::adapters::filter::Filter<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::filter_map<T, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::iter::adapters::filter_map::FilterMap<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (T)>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::enumerate<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::enumerate::Enumerate<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::peekable<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::peekable::Peekable<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::skip_while<T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> core::iter::adapters::skip_while::SkipWhile<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::take_while<T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> core::iter::adapters::take_while::TakeWhile<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map_while<T, B, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> core::iter::adapters::map_while::MapWhile<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<P, (T)>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::skip<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> core::iter::adapters::skip::Skip<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::take<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> core::iter::adapters::take::Take<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::scan<T, St, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: St, @3: F) -> core::iter::adapters::scan::Scan<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<St>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<F>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), T)>,
    for<'_0> @TraitClause5::parent_clause0::Output = core::option::Option<B>[@TraitClause2],

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::flat_map<T, U, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::iter::adapters::flatten::FlatMap<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause5]: core::ops::function::FnMut<F, (T)>,
    @TraitClause5::parent_clause0::Output = U,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::flatten<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::flatten::Flatten<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map_windows<T, F, R, const N : usize, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::iter::adapters::map_windows::MapWindows<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<T, const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause0::Output = R,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::fuse<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::fuse::Fuse<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::inspect<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::iter::adapters::inspect::Inspect<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause0::Output = (),

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::by_ref<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::collect<T, B, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::iter::traits::collect::FromIterator<B, T>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_collect<'_0, T, B, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::try_trait::Try<T>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: core::iter::traits::collect::FromIterator<B, @TraitClause3::Output>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::collect_into<'_0, T, E, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::iter::traits::collect::Extend<E, T>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partition<T, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::default::Default<B>,
    [@TraitClause5]: core::iter::traits::collect::Extend<B, T>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause6::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partition_in_place<'a, T, T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_partitioned<T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (T)>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_fold<'_0, T, B, F, R, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<R>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: core::ops::function::FnMut<F, (B, T)>,
    [@TraitClause6]: core::ops::try_trait::Try<R>,
    @TraitClause5::parent_clause0::Output = R,
    @TraitClause6::Output = B,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_for_each<'_0, T, F, R, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (T)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = (),

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::fold<T, Acc, Fold, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: Acc, @3: Fold) -> Acc
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<Acc>,
    [@TraitClause2]: core::marker::Sized<Fold>,
    [@TraitClause3]: core::ops::function::FnMut<Fold, (Acc, T)>,
    @TraitClause3::parent_clause0::Output = Acc,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::reduce<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T, T)>,
    @TraitClause3::parent_clause0::Output = T,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_reduce<'_0, T, R, impl FnMut(Self::Item, Self::Item) -> R, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (T, T)>,
    @TraitClause4::Output = T,
    @TraitClause6::parent_clause0::Output = R,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::all<'_0, T, F, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T)>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::any<'_0, T, F, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T)>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::find<'_0, T, P, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::find_map<'_0, T, B, F, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> core::option::Option<B>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (T)>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_find<'_0, T, R, impl FnMut(&Self::Item) -> R, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (T))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause0::Output = R,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::position<'_0, T, P, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (T)>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::rposition<'_0, T, P, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::ops::function::FnMut<P, (T)>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::exact_size::ExactSizeIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max_by_key<T, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max_by<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min_by_key<T, B, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min_by<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::rev<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::rev::Rev<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::unzip<T, A, B, FromA, FromB, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<FromA>,
    [@TraitClause4]: core::marker::Sized<FromB>,
    [@TraitClause5]: core::default::Default<FromA>,
    [@TraitClause6]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause7]: core::default::Default<FromB>,
    [@TraitClause8]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause9]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause10]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::copied<'a, T, T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::copied::Copied<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::marker::Copy<T>,
    T : 'a,
    core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cloned<'a, T, T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::cloned::Cloned<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::clone::Clone<T>,
    T : 'a,
    core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a (T),

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cycle<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::cycle::Cycle<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::array_chunks<T, const N : usize, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> core::iter::adapters::array_chunks::ArrayChunks<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], const N : usize>[@TraitClause1, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::sum<T, S, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> S
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<S>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Sum<S, T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::product<T, P, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> P
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Product<P, T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cmp<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::Ord<T>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    @TraitClause2::Item = T,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cmp_by<T, I, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::cmp::Ordering,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partial_cmp<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partial_cmp_by<T, I, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::eq<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::eq_by<T, I, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::ne<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::lt<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::le<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::gt<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::ge<T, I, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::PartialOrd<T, T>,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted_by<T, F, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = bool,

pub fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted_by_key<T, F, K, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<K>,
    [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (T)>,
    [@TraitClause5]: core::cmp::PartialOrd<K, K>,
    @TraitClause4::parent_clause0::Output = K,

pub unsafe fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::__iterator_get_unchecked<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize> : core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = @TraitClause0
    type Item = T
    fn next<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_0_0, T, const N : usize>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next_chunk<'_0_0, T, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::size_hint<'_0_0, T, const N : usize>[@TraitClause0]
    fn count = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::count<T, const N : usize>[@TraitClause0]
    fn last = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::last<T, const N : usize>[@TraitClause0]
    fn advance_by<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::advance_by<'_0_0, T, const N : usize>[@TraitClause0]
    fn nth<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::nth<'_0_0, T, const N : usize>[@TraitClause0]
    fn step_by<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::step_by<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>, @TraitClause1_2::Item = T> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::chain<T, U, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::zip<T, U, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::intersperse<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: core::marker::Sized<G>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<G, ()>, @TraitClause1_2::parent_clause0::Output = T> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::intersperse_with<T, G, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (T)>, @TraitClause1_3::parent_clause0::Output = B> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (T)>, @TraitClause1_2::parent_clause0::Output = ()> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::for_each<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::filter<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (T)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::filter_map<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::enumerate<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::peekable<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::skip_while<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::take_while<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<P, (T)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map_while<T, B, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::skip<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::take<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: core::marker::Sized<St>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<F>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), T)>, for<'_0> @TraitClause1_4::parent_clause0::Output = core::option::Option<B>[@TraitClause1_1]> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::scan<T, St, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>, [@TraitClause4]: core::ops::function::FnMut<F, (T)>, @TraitClause1_4::parent_clause0::Output = U> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::flat_map<T, U, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::flatten<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<T, const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause0::Output = R> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::map_windows<T, F, R, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::fuse<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause0::Output = ()> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::inspect<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::by_ref<'_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::iter::traits::collect::FromIterator<B, T>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::collect<T, B, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::try_trait::Try<T>, [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause1_2::Output>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_collect<'_0_0, T, B, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: core::marker::Sized<E>, [@TraitClause1]: core::iter::traits::collect::Extend<E, T>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::collect_into<'_0_0, T, E, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::default::Default<B>, [@TraitClause4]: core::iter::traits::collect::Extend<B, T>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_5::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partition<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, T : 'a, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partition_in_place<'a, T, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (T)>, @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_partitioned<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: core::ops::function::FnMut<F, (B, T)>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_fold<'_0_0, T, B, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (T)>, [@TraitClause4]: core::ops::try_trait::Try<R>, @TraitClause1_3::parent_clause0::Output = R, @TraitClause1_4::Output = ()> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_for_each<'_0_0, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<Acc, Fold, [@TraitClause0]: core::marker::Sized<Acc>, [@TraitClause1]: core::marker::Sized<Fold>, [@TraitClause2]: core::ops::function::FnMut<Fold, (Acc, T)>, @TraitClause1_2::parent_clause0::Output = Acc> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::fold<T, Acc, Fold, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn reduce<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (T, T)>, @TraitClause1_2::parent_clause0::Output = T> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::reduce<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (T, T)>, @TraitClause1_3::Output = T, @TraitClause1_5::parent_clause0::Output = R> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_reduce<'_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (T)>, @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::all<'_0_0, T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (T)>, @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::any<'_0_0, T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::find<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (T)>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::find_map<'_0_0, T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<T>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (T))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause0::Output = R> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::try_find<'_0_0, T, R, impl FnMut(&Self::Item) -> R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (T)>, @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::position<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::ops::function::FnMut<P, (T)>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, @TraitClause1_1::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::rposition<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max_by_key<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::max_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min_by_key<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::min_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::rev<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: core::marker::Sized<A>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<FromA>, [@TraitClause3]: core::marker::Sized<FromB>, [@TraitClause4]: core::default::Default<FromA>, [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>, [@TraitClause6]: core::default::Default<FromB>, [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>, [@TraitClause8]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause9]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = (A, B)> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::unzip<T, A, B, FromA, FromB, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::marker::Copy<T>, T : 'a, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a (T)> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::copied<'a, T, T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::clone::Clone<T>, T : 'a, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]::Item = &'a (T)> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cloned<'a, T, T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cycle<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::array_chunks<T, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: core::marker::Sized<S>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Sum<S, T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::sum<T, S, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Product<P, T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::product<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::Ord<T>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, @TraitClause1_1::Item = T> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cmp<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::cmp::Ordering> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::cmp_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partial_cmp<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::partial_cmp_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::eq<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::eq_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::ne<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::lt<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::le<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::gt<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::ge<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: core::cmp::PartialOrd<T, T>> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = bool> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<K>, [@TraitClause2]: core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (T)>, [@TraitClause4]: core::cmp::PartialOrd<K, K>, @TraitClause1_3::parent_clause0::Output = K> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::is_sorted_by_key<T, F, K, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::__iterator_get_unchecked<'_0_0, T, const N : usize>[@TraitClause0]
}

#[lang_item("slice_iter")]
pub fn core::slice::{Slice<T>}::iter<'_0, T>(@1: &'_0 (Slice<T>)) -> core::slice::iter::Iter<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> core::option::Option<&'a (T)>[core::marker::Sized<&'_ (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> core::result::Result<Array<&'a (T), const N : usize>, core::array::iter::IntoIter<&'a (T), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>[core::marker::Sized<Array<&'a (T), const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<&'a (T), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::count<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::last<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::option::Option<&'a (T)>[core::marker::Sized<&'_ (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::advance_by<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: usize) -> core::option::Option<&'a (T)>[core::marker::Sized<&'_ (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::step_by<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::step_by::StepBy<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::chain<'a, T, U>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::chain::Chain<core::slice::iter::Iter<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause3::Item = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::zip<'a, T, U>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::zip::Zip<core::slice::iter::Iter<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::intersperse<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: &'a (T)) -> core::iter::adapters::intersperse::Intersperse<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<&'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::intersperse_with<'a, T, G>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: G) -> core::iter::adapters::intersperse::IntersperseWith<core::slice::iter::Iter<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<G>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<G, ()>,
    @TraitClause3::parent_clause0::Output = &'a (T),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map::Map<core::slice::iter::Iter<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T))>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::for_each<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    @TraitClause3::parent_clause0::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::filter<'a, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::filter::Filter<core::slice::iter::Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::filter_map<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::filter_map::FilterMap<core::slice::iter::Iter<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::enumerate<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::peekable<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::peekable::Peekable<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::skip_while<'a, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::skip_while::SkipWhile<core::slice::iter::Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::take_while<'a, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::take_while::TakeWhile<core::slice::iter::Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map_while<'a, T, B, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::map_while::MapWhile<core::slice::iter::Iter<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<P, (&'a (T))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::skip<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::skip::Skip<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::take<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::take::Take<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::scan<'a, T, St, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: St, @3: F) -> core::iter::adapters::scan::Scan<core::slice::iter::Iter<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<St>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<F>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (T))>,
    for<'_0> @TraitClause5::parent_clause0::Output = core::option::Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::flat_map<'a, T, U, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::flatten::FlatMap<core::slice::iter::Iter<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (T))>,
    @TraitClause5::parent_clause0::Output = U,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::flatten<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::flatten::Flatten<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<&'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map_windows<'a, T, F, R, const N : usize>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map_windows::MapWindows<core::slice::iter::Iter<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (T), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::fuse<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::fuse::Fuse<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::inspect<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::inspect::Inspect<core::slice::iter::Iter<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::by_ref<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::collect<'a, T, B>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::iter::traits::collect::FromIterator<B, &'a (T)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_collect<'a, '_1, T, B>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::try_trait::Try<&'a (T)>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: core::iter::traits::collect::FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::collect_into<'a, '_1, T, E>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::iter::traits::collect::Extend<E, &'a (T)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partition<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::default::Default<B>,
    [@TraitClause5]: core::iter::traits::collect::Extend<B, &'a (T)>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause6::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partition_in_place<'a, 'a, T, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_partitioned<'a, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'a (T))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<R>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::ops::function::FnMut<F, (B, &'a (T))>,
    [@TraitClause6]: core::ops::try_trait::Try<R>,
    @TraitClause5::parent_clause0::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T))>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::fold<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::ops::function::FnMut<F, (B, &'_ (T))>,
    @TraitClause3::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::reduce<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (T), &'a (T))>,
    @TraitClause3::parent_clause0::Output = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (T), &'a (T))>,
    @TraitClause4::Output = &'a (T),
    @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::all<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::any<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::find<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<&'_ (T)>[core::marker::Sized<&'_ (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'_ (T)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: F) -> core::option::Option<B>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'_ (T))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (T)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::position<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'_ (T))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::rposition<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::ops::function::FnMut<P, (@TraitClause4::parent_clause0::Item)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max_by_key<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max_by<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min_by_key<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min_by<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::rev<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::rev::Rev<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::unzip<'a, T, A, B, FromA, FromB>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<FromA>,
    [@TraitClause4]: core::marker::Sized<FromB>,
    [@TraitClause5]: core::default::Default<FromA>,
    [@TraitClause6]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause7]: core::default::Default<FromB>,
    [@TraitClause8]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause9]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause10]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::copied<'a, 'a, T, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::copied::Copied<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::marker::Copy<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cloned<'a, 'a, T, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::clone::Clone<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cycle<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::cycle::Cycle<core::slice::iter::Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::array_chunks<'a, T, const N : usize>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> core::iter::adapters::array_chunks::ArrayChunks<core::slice::iter::Iter<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::sum<'a, T, S>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<S>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Sum<S, &'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::product<'a, T, P>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Product<P, &'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cmp<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::Ord<&'a (T)>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cmp_by<'a, T, I, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partial_cmp<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partial_cmp_by<'a, T, I, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::eq<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::eq_by<'a, T, I, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::ne<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::lt<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::le<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::gt<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::ge<'a, T, I>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted<'a, T>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::PartialOrd<&'a (T), &'a (T)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted_by<'a, T, F>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'_ (T)), &'_0_1 (&'_ (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted_by_key<'a, T, F, K>(@1: core::slice::iter::Iter<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<K>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T))>,
    [@TraitClause5]: core::cmp::PartialOrd<K, K>,
    @TraitClause4::parent_clause0::Output = K,

pub unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0]), @2: usize) -> &'_ (T)
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (T)>
    type Item = &'a (T)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::count<'a, T>[@TraitClause0]
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>, @TraitClause1_2::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<&'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: core::marker::Sized<G>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<G, ()>, @TraitClause1_2::parent_clause0::Output = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (T))>, @TraitClause1_3::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'_ (T))>, @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (T))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<P, (&'a (T))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: core::marker::Sized<St>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<F>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (T))>, for<'_0> @TraitClause1_4::parent_clause0::Output = core::option::Option<B>[@TraitClause1_1]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T))>, @TraitClause1_4::parent_clause0::Output = U> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<&'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (T), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::iter::traits::collect::FromIterator<B, &'a (T)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::try_trait::Try<&'a (T)>, [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: core::marker::Sized<E>, [@TraitClause1]: core::iter::traits::collect::Extend<E, &'a (T)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::default::Default<B>, [@TraitClause4]: core::iter::traits::collect::Extend<B, &'a (T)>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_5::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'a (T))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: core::ops::function::FnMut<F, (B, &'a (T))>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (T))>, [@TraitClause4]: core::ops::try_trait::Try<R>, @TraitClause1_3::parent_clause0::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::ops::function::FnMut<F, (B, &'_ (T))>, @TraitClause1_2::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn reduce<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (T), &'a (T))>, @TraitClause1_2::parent_clause0::Output = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (T), &'a (T))>, @TraitClause1_3::Output = &'a (T), @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'_ (T))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'_ (T))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'_ (T)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (T)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (T)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'_ (T))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::ops::function::FnMut<P, (@TraitClause1_3::parent_clause0::Item)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: core::marker::Sized<A>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<FromA>, [@TraitClause3]: core::marker::Sized<FromB>, [@TraitClause4]: core::default::Default<FromA>, [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>, [@TraitClause6]: core::default::Default<FromB>, [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>, [@TraitClause8]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause9]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::marker::Copy<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::clone::Clone<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: core::marker::Sized<S>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Sum<S, &'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Product<P, &'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::Ord<&'a (T)>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::PartialOrd<&'a (T), &'a (T)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'_ (T)), &'_0_1 (&'_ (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<K>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (T))>, [@TraitClause4]: core::cmp::PartialOrd<K, K>, @TraitClause1_3::parent_clause0::Output = K> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
}

pub fn core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_0, '_1>(@1: &'_1 mut (i32), @2: &'_0 (i32))

pub fn core::slice::{Slice<T>}::chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::Chunks<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> core::option::Option<&'a (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> core::result::Result<Array<&'a (Slice<T>), const N : usize>, core::array::iter::IntoIter<&'a (Slice<T>), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>[core::marker::Sized<Array<&'a (Slice<T>), const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<&'a (Slice<T>), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::count<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::last<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::advance_by<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: usize) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::step_by<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::step_by::StepBy<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::chain<'a, T, U>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::chain::Chain<core::slice::iter::Chunks<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause3::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::zip<'a, T, U>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::zip::Zip<core::slice::iter::Chunks<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::intersperse<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: &'a (Slice<T>)) -> core::iter::adapters::intersperse::Intersperse<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::intersperse_with<'a, T, G>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: G) -> core::iter::adapters::intersperse::IntersperseWith<core::slice::iter::Chunks<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<G>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<G, ()>,
    @TraitClause3::parent_clause0::Output = &'a (Slice<T>),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map::Map<core::slice::iter::Chunks<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::for_each<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::filter<'a, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::filter::Filter<core::slice::iter::Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::filter_map<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::filter_map::FilterMap<core::slice::iter::Chunks<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::enumerate<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::enumerate::Enumerate<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::peekable<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::peekable::Peekable<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::skip_while<'a, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::skip_while::SkipWhile<core::slice::iter::Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::take_while<'a, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::take_while::TakeWhile<core::slice::iter::Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map_while<'a, T, B, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::map_while::MapWhile<core::slice::iter::Chunks<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::skip<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::skip::Skip<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::take<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::take::Take<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::scan<'a, T, St, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: St, @3: F) -> core::iter::adapters::scan::Scan<core::slice::iter::Chunks<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<St>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<F>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>,
    for<'_0> @TraitClause5::parent_clause0::Output = core::option::Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::flat_map<'a, T, U, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::flatten::FlatMap<core::slice::iter::Chunks<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause5::parent_clause0::Output = U,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::flatten<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::flatten::Flatten<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map_windows<'a, T, F, R, const N : usize>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map_windows::MapWindows<core::slice::iter::Chunks<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::fuse<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::fuse::Fuse<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::inspect<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::inspect::Inspect<core::slice::iter::Chunks<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::by_ref<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::collect<'a, T, B>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::iter::traits::collect::FromIterator<B, &'a (Slice<T>)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_collect<'a, '_1, T, B>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::try_trait::Try<&'a (Slice<T>)>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: core::iter::traits::collect::FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::collect_into<'a, '_1, T, E>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::iter::traits::collect::Extend<E, &'a (Slice<T>)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partition<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::default::Default<B>,
    [@TraitClause5]: core::iter::traits::collect::Extend<B, &'a (Slice<T>)>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause6::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partition_in_place<'a, 'a, T, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_partitioned<'a, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<R>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>,
    [@TraitClause6]: core::ops::try_trait::Try<R>,
    @TraitClause5::parent_clause0::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::fold<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::reduce<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause4::Output = &'a (Slice<T>),
    @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::all<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::any<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::find<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: F) -> core::option::Option<B>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::position<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::rposition<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max_by_key<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max_by<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min_by_key<'a, T, B, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min_by<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::rev<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::rev::Rev<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::unzip<'a, T, A, B, FromA, FromB>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<FromA>,
    [@TraitClause4]: core::marker::Sized<FromB>,
    [@TraitClause5]: core::default::Default<FromA>,
    [@TraitClause6]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause7]: core::default::Default<FromB>,
    [@TraitClause8]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause9]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause10]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::copied<'a, 'a, T, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::copied::Copied<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::marker::Copy<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cloned<'a, 'a, T, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::cloned::Cloned<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::clone::Clone<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cycle<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::cycle::Cycle<core::slice::iter::Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::array_chunks<'a, T, const N : usize>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::iter::adapters::array_chunks::ArrayChunks<core::slice::iter::Chunks<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::sum<'a, T, S>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<S>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Sum<S, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::product<'a, T, P>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Product<P, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cmp<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::Ord<&'a (Slice<T>)>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cmp_by<'a, T, I, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partial_cmp<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partial_cmp_by<'a, T, I, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::eq<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::eq_by<'a, T, I, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::ne<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::lt<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::le<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::gt<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::ge<'a, T, I>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted_by<'a, T, F>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted_by_key<'a, T, F, K>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<K>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: core::cmp::PartialOrd<K, K>,
    @TraitClause4::parent_clause0::Output = K,

pub unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: usize) -> &'_ (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::count<'a, T>[@TraitClause0]
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>, @TraitClause1_2::Item = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: core::marker::Sized<G>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<G, ()>, @TraitClause1_2::parent_clause0::Output = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: core::marker::Sized<St>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<F>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>, for<'_0> @TraitClause1_4::parent_clause0::Output = core::option::Option<B>[@TraitClause1_1]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_4::parent_clause0::Output = U> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::iter::traits::collect::FromIterator<B, &'a (Slice<T>)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::try_trait::Try<&'a (Slice<T>)>, [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: core::marker::Sized<E>, [@TraitClause1]: core::iter::traits::collect::Extend<E, &'a (Slice<T>)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::default::Default<B>, [@TraitClause4]: core::iter::traits::collect::Extend<B, &'a (Slice<T>)>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_5::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: core::ops::try_trait::Try<R>, @TraitClause1_3::parent_clause0::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_3::Output = &'a (Slice<T>), @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: core::marker::Sized<A>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<FromA>, [@TraitClause3]: core::marker::Sized<FromB>, [@TraitClause4]: core::default::Default<FromA>, [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>, [@TraitClause6]: core::default::Default<FromB>, [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>, [@TraitClause8]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause9]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::marker::Copy<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::clone::Clone<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: core::marker::Sized<S>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Sum<S, &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Product<P, &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<K>, [@TraitClause2]: core::marker::Sized<core::slice::iter::Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: core::cmp::PartialOrd<K, K>, @TraitClause1_3::parent_clause0::Output = K> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
}

pub fn core::slice::{Slice<T>}::chunks_exact<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::ChunksExact<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> core::option::Option<&'a (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> core::result::Result<Array<&'a (Slice<T>), const N : usize>, core::array::iter::IntoIter<&'a (Slice<T>), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>[core::marker::Sized<Array<&'a (Slice<T>), const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<&'a (Slice<T>), const N : usize>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::count<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::last<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::advance_by<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::step_by<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::step_by::StepBy<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::chain<'a, T, U>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::chain::Chain<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause3::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::zip<'a, T, U>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: U) -> core::iter::adapters::zip::Zip<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::intersperse<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: &'a (Slice<T>)) -> core::iter::adapters::intersperse::Intersperse<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::intersperse_with<'a, T, G>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: G) -> core::iter::adapters::intersperse::IntersperseWith<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<G>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<G, ()>,
    @TraitClause3::parent_clause0::Output = &'a (Slice<T>),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map::Map<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::for_each<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::filter<'a, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::filter::Filter<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::filter_map<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::filter_map::FilterMap<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::enumerate<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::enumerate::Enumerate<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::peekable<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::peekable::Peekable<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::skip_while<'a, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::skip_while::SkipWhile<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::take_while<'a, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::take_while::TakeWhile<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map_while<'a, T, B, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> core::iter::adapters::map_while::MapWhile<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::skip<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::skip::Skip<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::take<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: usize) -> core::iter::adapters::take::Take<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::scan<'a, T, St, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: St, @3: F) -> core::iter::adapters::scan::Scan<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<St>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<F>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>,
    for<'_0> @TraitClause5::parent_clause0::Output = core::option::Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::flat_map<'a, T, U, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::flatten::FlatMap<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause5::parent_clause0::Output = U,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::flatten<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::flatten::Flatten<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map_windows<'a, T, F, R, const N : usize>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::map_windows::MapWindows<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::fuse<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::fuse::Fuse<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::inspect<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::iter::adapters::inspect::Inspect<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::by_ref<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::collect<'a, T, B>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::iter::traits::collect::FromIterator<B, &'a (Slice<T>)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_collect<'a, '_1, T, B>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::try_trait::Try<&'a (Slice<T>)>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: core::iter::traits::collect::FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::collect_into<'a, '_1, T, E>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::iter::traits::collect::Extend<E, &'a (Slice<T>)>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partition<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::default::Default<B>,
    [@TraitClause5]: core::iter::traits::collect::Extend<B, &'a (Slice<T>)>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause6::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partition_in_place<'a, 'a, T, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<P>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_partitioned<'a, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<R>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>,
    [@TraitClause6]: core::ops::try_trait::Try<R>,
    @TraitClause5::parent_clause0::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = (),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::fold<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::reduce<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause4::Output = &'a (Slice<T>),
    @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::all<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::any<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::find<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: F) -> core::option::Option<B>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    [@TraitClause5]: core::ops::try_trait::Residual<@TraitClause4::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>,
    [@TraitClause6]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause0::Output = R,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::position<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::rposition<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max_by_key<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max_by<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min_by_key<'a, T, B, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::cmp::Ord<B>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause0::Output = B,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min_by<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::rev<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::rev::Rev<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::unzip<'a, T, A, B, FromA, FromB>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,
    [@TraitClause2]: core::marker::Sized<B>,
    [@TraitClause3]: core::marker::Sized<FromA>,
    [@TraitClause4]: core::marker::Sized<FromB>,
    [@TraitClause5]: core::default::Default<FromA>,
    [@TraitClause6]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause7]: core::default::Default<FromB>,
    [@TraitClause8]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause9]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause10]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::copied<'a, 'a, T, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::copied::Copied<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::marker::Copy<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cloned<'a, 'a, T, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::cloned::Cloned<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<T>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::clone::Clone<T>,
    T : 'a,
    core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cycle<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::cycle::Cycle<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::clone::Clone<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::array_chunks<'a, T, const N : usize>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> core::iter::adapters::array_chunks::ArrayChunks<core::slice::iter::ChunksExact<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::sum<'a, T, S>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<S>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Sum<S, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::product<'a, T, P>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: core::iter::traits::accum::Product<P, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cmp<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::Ord<&'a (Slice<T>)>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cmp_by<'a, T, I, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::cmp::Ordering,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partial_cmp<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partial_cmp_by<'a, T, I, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::eq<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::eq_by<'a, T, I, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause5]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::ne<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::lt<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::le<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::gt<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::ge<'a, T, I>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause3]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted_by<'a, T, F>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause0::Output = bool,

pub fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted_by_key<'a, T, F, K>(@1: core::slice::iter::ChunksExact<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<K>,
    [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: core::cmp::PartialOrd<K, K>,
    @TraitClause4::parent_clause0::Output = K,

pub unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> &'_ (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::count<'a, T>[@TraitClause0]
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>, @TraitClause1_2::Item = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: core::marker::Sized<G>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<G, ()>, @TraitClause1_2::parent_clause0::Output = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: core::marker::Sized<St>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<F>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>, for<'_0> @TraitClause1_4::parent_clause0::Output = core::option::Option<B>[@TraitClause1_1]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: core::marker::Sized<U>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_4::parent_clause0::Output = U> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::iter::traits::collect::FromIterator<B, &'a (Slice<T>)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::try_trait::Try<&'a (Slice<T>)>, [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: core::marker::Sized<E>, [@TraitClause1]: core::iter::traits::collect::Extend<E, &'a (Slice<T>)>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::default::Default<B>, [@TraitClause4]: core::iter::traits::collect::Extend<B, &'a (Slice<T>)>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_5::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<P>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<R>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>, [@TraitClause5]: core::ops::try_trait::Try<R>, @TraitClause1_4::parent_clause0::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: core::ops::try_trait::Try<R>, @TraitClause1_3::parent_clause0::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (B, &'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_3::Output = &'a (Slice<T>), @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause0::Output = core::option::Option<B>[@TraitClause1_0]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: core::marker::Sized<R>, [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::try_trait::Try<R>, [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause1_3::Residual, core::option::Option<&'a (Slice<T>)>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::parent_clause0]>, [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause0::Output = R> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::ops::function::FnMut<P, (&'a (Slice<T>))>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::Ord<&'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: core::marker::Sized<B>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::cmp::Ord<B>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause0::Output = B> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: core::marker::Sized<A>, [@TraitClause1]: core::marker::Sized<B>, [@TraitClause2]: core::marker::Sized<FromA>, [@TraitClause3]: core::marker::Sized<FromB>, [@TraitClause4]: core::default::Default<FromA>, [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>, [@TraitClause6]: core::default::Default<FromB>, [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>, [@TraitClause8]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause9]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::marker::Copy<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::clone::Clone<T>, T : 'a, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::clone::Clone<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: core::marker::Sized<S>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Sum<S, &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: core::marker::Sized<P>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: core::iter::traits::accum::Product<P, &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::Ord<&'a (Slice<T>)>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (Slice<T>)> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::cmp::Ordering> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::marker::Sized<F>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause4]: core::ops::function::FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>, [@TraitClause2]: core::cmp::PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: core::cmp::PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause0::Output = bool> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: core::marker::Sized<F>, [@TraitClause1]: core::marker::Sized<K>, [@TraitClause2]: core::marker::Sized<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: core::ops::function::FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: core::cmp::PartialOrd<K, K>, @TraitClause1_3::parent_clause0::Output = K> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
}

fn test_crate::main()
{
    let @0: (); // return
    let a@1: Array<i32, 7 : usize>; // local
    let i@2: i32; // local
    let @3: (); // anonymous local
    let @4: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // anonymous local
    let @5: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // anonymous local
    let @6: Array<i32, 7 : usize>; // anonymous local
    let iter@7: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // local
    let @8: (); // anonymous local
    let @9: core::option::Option<i32>[core::marker::Sized<i32>]; // anonymous local
    let @10: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]); // anonymous local
    let @11: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]); // anonymous local
    let v@12: i32; // local
    let @13: i32; // anonymous local
    let @14: (); // anonymous local
    let @15: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @16: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @17: &'_ (Slice<i32>); // anonymous local
    let @18: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@19: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // local
    let @20: (); // anonymous local
    let @21: core::option::Option<&'_ (i32)>[core::marker::Sized<&'_ (i32)>]; // anonymous local
    let @22: &'_ mut (core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @23: &'_ mut (core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let v@24: &'_ (i32); // local
    let @25: (); // anonymous local
    let @26: &'_ mut (i32); // anonymous local
    let @27: &'_ (i32); // anonymous local
    let @28: (); // anonymous local
    let @29: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @30: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @31: &'_ (Slice<i32>); // anonymous local
    let @32: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@33: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // local
    let @34: (); // anonymous local
    let @35: core::option::Option<&'_ (Slice<i32>)>[core::marker::Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @36: &'_ mut (core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @37: &'_ mut (core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @38: (); // anonymous local
    let @39: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @40: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @41: &'_ (Slice<i32>); // anonymous local
    let @42: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@43: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // local
    let @44: (); // anonymous local
    let @45: core::option::Option<&'_ (Slice<i32>)>[core::marker::Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @46: &'_ mut (core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @47: &'_ mut (core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let expected@48: i32; // local
    let @49: (); // anonymous local
    let @50: (&'_ (i32), &'_ (i32)); // anonymous local
    let @51: &'_ (i32); // anonymous local
    let @52: &'_ (i32); // anonymous local
    let left_val@53: &'_ (i32); // local
    let right_val@54: &'_ (i32); // local
    let @55: bool; // anonymous local
    let @56: i32; // anonymous local
    let @57: i32; // anonymous local
    let kind@58: core::panicking::AssertKind; // local
    let @59: core::panicking::AssertKind; // anonymous local
    let @60: &'_ (i32); // anonymous local
    let @61: &'_ (i32); // anonymous local
    let @62: &'_ (i32); // anonymous local
    let @63: &'_ (i32); // anonymous local
    let @64: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local

    storage_live(@10)
    storage_live(v@12)
    storage_live(@13)
    storage_live(@22)
    storage_live(v@24)
    storage_live(@25)
    storage_live(@26)
    storage_live(@27)
    storage_live(@36)
    storage_live(@46)
    storage_live(kind@58)
    storage_live(@59)
    storage_live(@60)
    storage_live(@61)
    storage_live(@62)
    storage_live(@63)
    storage_live(@64)
    storage_live(a@1)
    a@1 := [const (0 : i32), const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32)]
    storage_live(i@2)
    i@2 := const (0 : i32)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (a@1)
    @5 := core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<i32, 7 : usize>[core::marker::Sized<i32>](move (@6))
    storage_dead(@6)
    @4 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]>[core::marker::Sized<core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]>, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<i32, 7 : usize>[core::marker::Sized<i32>]](move (@5))
    storage_dead(@5)
    storage_live(iter@7)
    iter@7 := move (@4)
    loop {
        storage_live(@8)
        storage_live(@9)
        storage_live(@10)
        storage_live(@11)
        @11 := &mut iter@7
        @10 := &two-phase-mut *(@11)
        @9 := core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_, i32, 7 : usize>[core::marker::Sized<i32>](move (@10))
        storage_dead(@10)
        match @9 {
            0 => {
                break 0
            },
            1 => {
                storage_live(v@12)
                v@12 := copy ((@9 as variant @1).0)
                storage_live(@13)
                @13 := copy (v@12)
                i@2 := copy (i@2) + move (@13)
                storage_dead(@13)
                storage_dead(v@12)
                storage_dead(@11)
                storage_dead(@9)
                storage_dead(@8)
                continue 0
            },
        }
    }
    storage_dead(@11)
    storage_dead(@9)
    storage_dead(@8)
    drop iter@7
    storage_dead(iter@7)
    drop @4
    storage_dead(@4)
    storage_dead(@3)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    @18 := &a@1
    @17 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@18))
    storage_dead(@18)
    @16 := core::slice::{Slice<T>}::iter<'_, i32>[core::marker::Sized<i32>](move (@17))
    storage_dead(@17)
    @15 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'_, i32>[core::marker::Sized<i32>]](move (@16))
    storage_dead(@16)
    storage_live(iter@19)
    iter@19 := move (@15)
    loop {
        storage_live(@20)
        storage_live(@21)
        storage_live(@22)
        storage_live(@23)
        @23 := &mut iter@19
        @22 := &two-phase-mut *(@23)
        @21 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'_, '_, i32>[core::marker::Sized<i32>](move (@22))
        storage_dead(@22)
        match @21 {
            0 => {
                break 0
            },
            1 => {
                storage_live(v@24)
                v@24 := copy ((@21 as variant @1).0)
                storage_live(@25)
                storage_live(@26)
                @26 := &two-phase-mut i@2
                storage_live(@27)
                @27 := copy (v@24)
                @25 := core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_, '_>(move (@26), move (@27))
                storage_dead(@27)
                storage_dead(@26)
                storage_dead(@25)
                storage_dead(v@24)
                storage_dead(@23)
                storage_dead(@21)
                storage_dead(@20)
                continue 0
            },
        }
    }
    storage_dead(@23)
    storage_dead(@21)
    storage_dead(@20)
    storage_dead(iter@19)
    storage_dead(@15)
    storage_dead(@14)
    storage_live(@28)
    storage_live(@29)
    storage_live(@30)
    storage_live(@31)
    storage_live(@32)
    @32 := &a@1
    @31 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@32))
    storage_dead(@32)
    @30 := core::slice::{Slice<T>}::chunks<'_, i32>[core::marker::Sized<i32>](move (@31), const (2 : usize))
    storage_dead(@31)
    @29 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'_, i32>[core::marker::Sized<i32>]](move (@30))
    storage_dead(@30)
    storage_live(iter@33)
    iter@33 := move (@29)
    loop {
        storage_live(@34)
        storage_live(@35)
        storage_live(@36)
        storage_live(@37)
        @37 := &mut iter@33
        @36 := &two-phase-mut *(@37)
        @35 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'_, '_, i32>[core::marker::Sized<i32>](move (@36))
        storage_dead(@36)
        match @35 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                storage_dead(@37)
                storage_dead(@35)
                storage_dead(@34)
                continue 0
            },
        }
    }
    storage_dead(@37)
    storage_dead(@35)
    storage_dead(@34)
    storage_dead(iter@33)
    storage_dead(@29)
    storage_dead(@28)
    storage_live(@38)
    storage_live(@39)
    storage_live(@40)
    storage_live(@41)
    storage_live(@42)
    @42 := &a@1
    @41 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@42))
    storage_dead(@42)
    @40 := core::slice::{Slice<T>}::chunks_exact<'_, i32>[core::marker::Sized<i32>](move (@41), const (2 : usize))
    storage_dead(@41)
    @39 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'_, i32>[core::marker::Sized<i32>]](move (@40))
    storage_dead(@40)
    storage_live(iter@43)
    iter@43 := move (@39)
    loop {
        storage_live(@44)
        storage_live(@45)
        storage_live(@46)
        storage_live(@47)
        @47 := &mut iter@43
        @46 := &two-phase-mut *(@47)
        @45 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'_, '_, i32>[core::marker::Sized<i32>](move (@46))
        storage_dead(@46)
        match @45 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                storage_dead(@47)
                storage_dead(@45)
                storage_dead(@44)
                continue 0
            },
        }
    }
    storage_dead(@47)
    storage_dead(@45)
    storage_dead(@44)
    storage_dead(iter@43)
    storage_dead(@39)
    storage_dead(@38)
    storage_live(expected@48)
    expected@48 := const (28 : i32)
    storage_live(@49)
    storage_live(@50)
    storage_live(@51)
    @51 := &i@2
    storage_live(@52)
    @52 := &expected@48
    @50 := (move (@51), move (@52))
    storage_dead(@52)
    storage_dead(@51)
    storage_live(left_val@53)
    left_val@53 := copy ((@50).0)
    storage_live(right_val@54)
    right_val@54 := copy ((@50).1)
    storage_live(@55)
    storage_live(@56)
    @56 := copy (*(left_val@53))
    storage_live(@57)
    @57 := copy (*(right_val@54))
    @55 := move (@56) == move (@57)
    if move (@55) {
    }
    else {
        storage_dead(@57)
        storage_dead(@56)
        storage_live(kind@58)
        kind@58 := core::panicking::AssertKind::Eq {  }
        storage_live(@59)
        @59 := move (kind@58)
        storage_live(@60)
        storage_live(@61)
        @61 := &*(left_val@53)
        @60 := &*(@61)
        storage_live(@62)
        storage_live(@63)
        @63 := &*(right_val@54)
        @62 := &*(@63)
        storage_live(@64)
        @64 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@57)
    storage_dead(@56)
    storage_dead(@55)
    storage_dead(right_val@54)
    storage_dead(left_val@53)
    storage_dead(@50)
    storage_dead(@49)
    @0 := ()
    storage_dead(expected@48)
    storage_dead(i@2)
    storage_dead(a@1)
    @0 := ()
    return
}

#[lang_item("into_iter")]
pub fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

impl core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize> : core::iter::traits::collect::IntoIterator<Array<T, const N : usize>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = @TraitClause0
    parent_clause1 = core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>
    parent_clause2 = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]
    type Item = T
    type IntoIter = core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]
    fn into_iter = core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>[@TraitClause0]
}

impl core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    parent_clause2 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>[@TraitClause0, @TraitClause1]
}

#[lang_item("next")]
pub fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

#[lang_item("add_assign")]
pub trait core::ops::arith::AddAssign<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Rhs>
    fn add_assign<'_0> = core::ops::arith::AddAssign::add_assign<'_0_0, Self, Rhs>
}

pub fn core::ops::arith::AddAssign::add_assign<'_0, Self, Rhs>(@1: &'_0 mut (Self), @2: Rhs)

impl core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365<'_0> : core::ops::arith::AddAssign<i32, &'_0 (i32)>
{
    parent_clause0 = core::marker::Sized<&'_ (i32)>
    fn add_assign<'_0> = core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_0, '_0_0>
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

pub fn core::iter::traits::iterator::Iterator::size_hint<'_0, Self>(@1: &'_0 (Self)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::traits::iterator::Iterator::fold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::Item)>,
    @TraitClause3::parent_clause0::Output = B,

pub fn core::iter::traits::iterator::Iterator::count<Self>(@1: Self) -> usize
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::last<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::advance_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

pub unsafe fn core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Self::Item
where
    [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>,

pub fn core::iter::traits::iterator::Iterator::next_chunk<'_0, Self, const N : usize>(@1: &'_0 mut (Self)) -> core::result::Result<Array<Self::Item, const N : usize>, core::array::iter::IntoIter<Self::Item, const N : usize>[Self::parent_clause0]>[core::marker::Sized<Array<Self::Item, const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<Self::Item, const N : usize>[Self::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::nth<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::Item>[Self::parent_clause0]

pub fn core::iter::traits::iterator::Iterator::step_by<Self>(@1: Self, @2: usize) -> core::iter::adapters::step_by::StepBy<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::chain<Self, U>(@1: Self, @2: U) -> core::iter::adapters::chain::Chain<Self, @TraitClause2::IntoIter>[@TraitClause1, @TraitClause2::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause2::Item = Self::Item,

pub fn core::iter::traits::iterator::Iterator::zip<Self, U>(@1: Self, @2: U) -> core::iter::adapters::zip::Zip<Self, @TraitClause2::IntoIter>[@TraitClause1, @TraitClause2::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,

pub fn core::iter::traits::iterator::Iterator::intersperse<Self>(@1: Self, @2: Self::Item) -> core::iter::adapters::intersperse::Intersperse<Self>[@TraitClause0, Self, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::clone::Clone<Self::Item>,

pub fn core::iter::traits::iterator::Iterator::intersperse_with<Self, G>(@1: Self, @2: G) -> core::iter::adapters::intersperse::IntersperseWith<Self, G>[@TraitClause1, @TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<G>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<G, ()>,
    @TraitClause2::parent_clause0::Output = Self::Item,

#[lang_item("IteratorMap")]
pub fn core::iter::traits::iterator::Iterator::map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::map::Map<Self, F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = B,

pub fn core::iter::traits::iterator::Iterator::for_each<Self, F>(@1: Self, @2: F)
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = (),

#[lang_item("iter_filter")]
pub fn core::iter::traits::iterator::Iterator::filter<Self, P>(@1: Self, @2: P) -> core::iter::adapters::filter::Filter<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::filter_map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::filter_map::FilterMap<Self, F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

#[lang_item("enumerate_method")]
pub fn core::iter::traits::iterator::Iterator::enumerate<Self>(@1: Self) -> core::iter::adapters::enumerate::Enumerate<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::peekable<Self>(@1: Self) -> core::iter::adapters::peekable::Peekable<Self>[@TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::skip_while<Self, P>(@1: Self, @2: P) -> core::iter::adapters::skip_while::SkipWhile<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::take_while<Self, P>(@1: Self, @2: P) -> core::iter::adapters::take_while::TakeWhile<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::map_while<Self, B, P>(@1: Self, @2: P) -> core::iter::adapters::map_while::MapWhile<Self, P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

pub fn core::iter::traits::iterator::Iterator::skip<Self>(@1: Self, @2: usize) -> core::iter::adapters::skip::Skip<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::take<Self>(@1: Self, @2: usize) -> core::iter::adapters::take::Take<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::scan<Self, St, B, F>(@1: Self, @2: St, @3: F) -> core::iter::adapters::scan::Scan<Self, St, F>[@TraitClause3, @TraitClause0, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<St>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 mut (St), Self::Item)>,
    for<'_0> @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

pub fn core::iter::traits::iterator::Iterator::flat_map<Self, U, F>(@1: Self, @2: F) -> core::iter::adapters::flatten::FlatMap<Self, U, F>[@TraitClause2, @TraitClause0, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause4::parent_clause0::Output = U,

pub fn core::iter::traits::iterator::Iterator::flatten<Self>(@1: Self) -> core::iter::adapters::flatten::Flatten<Self>[@TraitClause0, Self, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<Self::Item>,

pub fn core::iter::traits::iterator::Iterator::map_windows<Self, F, R, const N : usize>(@1: Self, @2: F) -> core::iter::adapters::map_windows::MapWindows<Self, F, const N : usize>[@TraitClause2, @TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Array<Self::Item, const N : usize>))>,
    for<'_0> @TraitClause3::parent_clause0::Output = R,

pub fn core::iter::traits::iterator::Iterator::fuse<Self>(@1: Self) -> core::iter::adapters::fuse::Fuse<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::inspect<Self, F>(@1: Self, @2: F) -> core::iter::adapters::inspect::Inspect<Self, F>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = (),

pub fn core::iter::traits::iterator::Iterator::by_ref<'_0, Self>(@1: &'_0 mut (Self)) -> &'_0 mut (Self)
where
    [@TraitClause0]: core::marker::Sized<Self>,

#[lang_item("iterator_collect_fn")]
pub fn core::iter::traits::iterator::Iterator::collect<Self, B>(@1: Self) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::iter::traits::collect::FromIterator<B, Self::Item>,
    [@TraitClause2]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::try_collect<'_0, Self, B>(@1: &'_0 mut (Self)) -> @TraitClause3::TryType
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::try_trait::Try<Self::Item>,
    [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause2::Residual, B>,
    [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause2::Output>,

pub fn core::iter::traits::iterator::Iterator::collect_into<'_0, Self, E>(@1: Self, @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause0]: core::marker::Sized<E>,
    [@TraitClause1]: core::iter::traits::collect::Extend<E, Self::Item>,
    [@TraitClause2]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::partition<Self, B, F>(@1: Self, @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::default::Default<B>,
    [@TraitClause4]: core::iter::traits::collect::Extend<B, Self::Item>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause5::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::partition_in_place<'a, Self, T, P>(@1: Self, @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    Self::Item = &'a mut (T),
    for<'_0> @TraitClause4::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::is_partitioned<Self, P>(@1: Self, @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::try_fold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = B,

pub fn core::iter::traits::iterator::Iterator::try_for_each<'_0, Self, F, R>(@1: &'_0 mut (Self), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    @TraitClause3::parent_clause0::Output = R,
    @TraitClause4::Output = (),

pub fn core::iter::traits::iterator::Iterator::reduce<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item, Self::Item)>,
    @TraitClause2::parent_clause0::Output = Self::Item,

pub fn core::iter::traits::iterator::Iterator::try_reduce<'_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<R>,
    [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::try_trait::Try<R>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>,
    [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (Self::Item, Self::Item)>,
    @TraitClause3::Output = Self::Item,
    @TraitClause5::parent_clause0::Output = R,

pub fn core::iter::traits::iterator::Iterator::all<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::any<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::find<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::find_map<'_0, Self, B, F>(@1: &'_0 mut (Self), @2: F) -> core::option::Option<B>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

pub fn core::iter::traits::iterator::Iterator::try_find<'_0, Self, R, impl FnMut(&Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<R>,
    [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::try_trait::Try<R>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>,
    [@TraitClause5]: for<'_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (Self::Item))>,
    @TraitClause3::Output = bool,
    for<'_0> @TraitClause5::parent_clause0::Output = R,

pub fn core::iter::traits::iterator::Iterator::position<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::rposition<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::ops::function::FnMut<P, (Self::Item)>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<Self>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,
    @TraitClause1::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::max<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

pub fn core::iter::traits::iterator::Iterator::min<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

pub fn core::iter::traits::iterator::Iterator::max_by_key<Self, B, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::cmp::Ord<B>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause4::parent_clause0::Output = B,

pub fn core::iter::traits::iterator::Iterator::max_by<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>,
    for<'_0, '_1> @TraitClause2::parent_clause0::Output = core::cmp::Ordering,

pub fn core::iter::traits::iterator::Iterator::min_by_key<Self, B, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::cmp::Ord<B>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (Self::Item))>,
    for<'_0> @TraitClause4::parent_clause0::Output = B,

pub fn core::iter::traits::iterator::Iterator::min_by<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>,
    for<'_0, '_1> @TraitClause2::parent_clause0::Output = core::cmp::Ordering,

pub fn core::iter::traits::iterator::Iterator::rev<Self>(@1: Self) -> core::iter::adapters::rev::Rev<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,

pub fn core::iter::traits::iterator::Iterator::unzip<Self, A, B, FromA, FromB>(@1: Self) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<FromA>,
    [@TraitClause3]: core::marker::Sized<FromB>,
    [@TraitClause4]: core::default::Default<FromA>,
    [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause6]: core::default::Default<FromB>,
    [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause8]: core::marker::Sized<Self>,
    [@TraitClause9]: core::iter::traits::iterator::Iterator<Self>,
    Self::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::iter::traits::iterator::Iterator::copied<'a, Self, T>(@1: Self) -> core::iter::adapters::copied::Copied<Self>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::marker::Copy<T>,
    T : 'a,
    Self::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::iter::traits::iterator::Iterator::cloned<'a, Self, T>(@1: Self) -> core::iter::adapters::cloned::Cloned<Self>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::clone::Clone<T>,
    T : 'a,
    Self::Item = &'a (T),

pub fn core::iter::traits::iterator::Iterator::cycle<Self>(@1: Self) -> core::iter::adapters::cycle::Cycle<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::clone::Clone<Self>,

pub fn core::iter::traits::iterator::Iterator::array_chunks<Self, const N : usize>(@1: Self) -> core::iter::adapters::array_chunks::ArrayChunks<Self, const N : usize>[@TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::sum<Self, S>(@1: Self) -> S
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::accum::Sum<S, Self::Item>,

pub fn core::iter::traits::iterator::Iterator::product<Self, P>(@1: Self) -> P
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::accum::Product<P, Self::Item>,

pub fn core::iter::traits::iterator::Iterator::cmp<Self, I>(@1: Self, @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::Ord<Self::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,
    @TraitClause1::Item = Self::Item,

pub fn core::iter::traits::iterator::Iterator::cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = core::cmp::Ordering,

pub fn core::iter::traits::iterator::Iterator::partial_cmp<Self, I>(@1: Self, @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::partial_cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

pub fn core::iter::traits::iterator::Iterator::eq<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::eq_by<Self, I, F>(@1: Self, @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::ne<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::lt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::le<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::gt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::ge<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::is_sorted<Self>(@1: Self) -> bool
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::PartialOrd<Self::Item, Self::Item>,

pub fn core::iter::traits::iterator::Iterator::is_sorted_by<Self, F>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0, '_1> core::ops::function::FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>,
    for<'_0, '_1> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::iterator::Iterator::is_sorted_by_key<Self, F, K>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<K>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::cmp::PartialOrd<K, K>,
    @TraitClause3::parent_clause0::Output = K,

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialeq_ne")]
pub fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

#[lang_item("cmp_ord_max")]
pub fn core::cmp::Ord::max<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

#[lang_item("cmp_ord_min")]
pub fn core::cmp::Ord::min<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::cmp::Ord::clamp<Self>(@1: Self, @2: Self, @3: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::cmp::Eq::assert_receiver_is_total_eq<'_0, Self>(@1: &'_0 (Self))

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

#[lang_item("cmp_partialord_lt")]
pub fn core::cmp::PartialOrd::lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialord_le")]
pub fn core::cmp::PartialOrd::le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialord_gt")]
pub fn core::cmp::PartialOrd::gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialord_ge")]
pub fn core::cmp::PartialOrd::ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

pub fn core::cmp::PartialOrd::__chaining_lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::ops::control_flow::ControlFlow<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]

pub fn core::cmp::PartialOrd::__chaining_le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::ops::control_flow::ControlFlow<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]

pub fn core::cmp::PartialOrd::__chaining_gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::ops::control_flow::ControlFlow<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]

pub fn core::cmp::PartialOrd::__chaining_ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::ops::control_flow::ControlFlow<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]

#[lang_item("default_fn")]
pub fn core::default::Default::default<Self>() -> Self

#[lang_item("from_output")]
pub fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

#[lang_item("branch")]
pub fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

#[lang_item("from_residual")]
pub fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

pub fn core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size<'_0, Self>(@1: &'_0 (Self)) -> usize
where
    [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>,

pub fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

#[lang_item("from_iter_fn")]
pub fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::collect::Extend::extend_one<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)

pub fn core::iter::traits::collect::Extend::extend_reserve<'_0, Self, A>(@1: &'_0 mut (Self), @2: usize)

pub unsafe fn core::iter::traits::collect::Extend::extend_one_unchecked<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)
where
    [@TraitClause0]: core::marker::Sized<Self>,

pub fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]

pub fn core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#27]>]

pub fn core::iter::traits::double_ended::DoubleEndedIterator::nth_back<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]

pub fn core::iter::traits::double_ended::DoubleEndedIterator::try_rfold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = B,

pub fn core::iter::traits::double_ended::DoubleEndedIterator::rfold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>,
    @TraitClause3::parent_clause0::Output = B,

pub fn core::iter::traits::double_ended::DoubleEndedIterator::rfind<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<P, (&'_0_0 (Self::parent_clause0::Item))>,
    for<'_0> @TraitClause2::parent_clause0::Output = bool,

pub fn core::iter::traits::exact_size::ExactSizeIterator::len<'_0, Self>(@1: &'_0 (Self)) -> usize

pub fn core::iter::traits::exact_size::ExactSizeIterator::is_empty<'_0, Self>(@1: &'_0 (Self)) -> bool



