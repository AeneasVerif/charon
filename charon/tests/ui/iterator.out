# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::array::iter::IntoIter
#[lang_item("ArrayIntoIter")]
pub opaque type IntoIter<T, const N : usize>
where
    [@TraitClause0]: Sized<T>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>[Self]
    fn clone_from<'_0, '_1, [@TraitClause0]: Destruct<Self>> = clone_from<'_0_0, '_0_1, Self>[Self, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::marker::Copy
#[lang_item("copy")]
pub trait Copy<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Clone<Self>
    non-dyn-compatible
}

// Full name: core::num::nonzero::private::Sealed
pub trait Sealed<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::num::nonzero::private::Sealed::{vtable}
}

// Full name: core::num::nonzero::ZeroablePrimitive
pub trait ZeroablePrimitive<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Copy<Self>
    parent_clause2 : [@TraitClause2]: Sealed<Self>
    parent_clause3 : [@TraitClause3]: Sized<Self::NonZeroInner>
    parent_clause4 : [@TraitClause4]: Copy<Self::NonZeroInner>
    type NonZeroInner
    non-dyn-compatible
}

// Full name: core::num::nonzero::NonZero
#[lang_item("NonZero")]
pub opaque type NonZero<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: ZeroablePrimitive<T>,

// Full name: core::clone::impls::{impl Clone for usize}::clone
pub fn {impl Clone for usize}::clone<'_0>(@1: &'_0 (usize)) -> usize

pub fn core::clone::impls::{impl Clone for usize}::clone_from<'_0, '_1>(@1: &'_0 mut (usize), @2: &'_1 (usize))
where
    [@TraitClause0]: Destruct<usize>,

// Full name: core::clone::impls::{impl Clone for usize}
impl Clone for usize {
    parent_clause0 = Sized<usize>
    fn clone<'_0> = {impl Clone for usize}::clone<'_0_0>
    fn clone_from<'_0, '_1, [@TraitClause0]: Destruct<usize>> = core::clone::impls::{impl Clone for usize}::clone_from<'_0_0, '_0_1>[@TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::marker::{impl Copy for usize}
impl Copy for usize {
    parent_clause0 = MetaSized<usize>
    parent_clause1 = {impl Clone for usize}
    non-dyn-compatible
}

// Full name: core::num::nonzero::{impl Sealed for usize}
impl Sealed for usize {
    parent_clause0 = MetaSized<usize>
    vtable: {impl Sealed for usize}::{vtable}
}

// Full name: core::num::niche_types::NonZeroUsizeInner
pub opaque type NonZeroUsizeInner

// Full name: core::num::niche_types::{impl Clone for NonZeroUsizeInner}::clone
pub fn {impl Clone for NonZeroUsizeInner}::clone<'_0>(@1: &'_0 (NonZeroUsizeInner)) -> NonZeroUsizeInner

pub fn core::num::niche_types::{impl Clone for NonZeroUsizeInner}::clone_from<'_0, '_1>(@1: &'_0 mut (NonZeroUsizeInner), @2: &'_1 (NonZeroUsizeInner))
where
    [@TraitClause0]: Destruct<NonZeroUsizeInner>,

// Full name: core::num::niche_types::{impl Clone for NonZeroUsizeInner}
impl Clone for NonZeroUsizeInner {
    parent_clause0 = Sized<NonZeroUsizeInner>
    fn clone<'_0> = {impl Clone for NonZeroUsizeInner}::clone<'_0_0>
    fn clone_from<'_0, '_1, [@TraitClause0]: Destruct<NonZeroUsizeInner>> = core::num::niche_types::{impl Clone for NonZeroUsizeInner}::clone_from<'_0_0, '_0_1>[@TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::num::niche_types::{impl Copy for NonZeroUsizeInner}
impl Copy for NonZeroUsizeInner {
    parent_clause0 = MetaSized<NonZeroUsizeInner>
    parent_clause1 = {impl Clone for NonZeroUsizeInner}
    non-dyn-compatible
}

// Full name: core::num::nonzero::{impl ZeroablePrimitive for usize}
impl ZeroablePrimitive for usize {
    parent_clause0 = Sized<usize>
    parent_clause1 = {impl Copy for usize}
    parent_clause2 = {impl Sealed for usize}
    parent_clause3 = Sized<NonZeroUsizeInner>
    parent_clause4 = {impl Copy for NonZeroUsizeInner}
    type NonZeroInner = NonZeroUsizeInner
    non-dyn-compatible
}

// Full name: core::iter::adapters::step_by::StepBy
pub opaque type StepBy<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::chain::Chain
pub opaque type Chain<A, B>
where
    [@TraitClause0]: Sized<A>,
    [@TraitClause1]: Sized<B>,

// Full name: core::iter::adapters::zip::Zip
pub opaque type Zip<A, B>
where
    [@TraitClause0]: Sized<A>,
    [@TraitClause1]: Sized<B>,

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = call_once<Self, Args>[Self]
    non-dyn-compatible
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = call_mut<'_0_0, Self, Args>[Self]
    non-dyn-compatible
}

// Full name: core::iter::adapters::map::Map
pub opaque type Map<I, F>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<F>,

// Full name: core::iter::adapters::filter::Filter
pub opaque type Filter<I, P>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<P>,

// Full name: core::iter::adapters::filter_map::FilterMap
pub opaque type FilterMap<I, F>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<F>,

// Full name: core::iter::adapters::enumerate::Enumerate
#[lang_item("Enumerate")]
pub opaque type Enumerate<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::skip_while::SkipWhile
pub opaque type SkipWhile<I, P>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<P>,

// Full name: core::iter::adapters::take_while::TakeWhile
pub opaque type TakeWhile<I, P>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<P>,

// Full name: core::iter::adapters::map_while::MapWhile
pub opaque type MapWhile<I, P>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<P>,

// Full name: core::iter::adapters::skip::Skip
pub opaque type Skip<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::take::Take
pub opaque type Take<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::scan::Scan
pub opaque type Scan<I, St, F>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<F>,

// Full name: core::iter::adapters::fuse::Fuse
pub opaque type Fuse<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::inspect::Inspect
pub opaque type Inspect<I, F>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<F>,

// Full name: core::ops::try_trait::FromResidual
#[lang_item("FromResidual")]
pub trait FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<R>
    fn from_residual = from_residual<Self, R>[Self]
    non-dyn-compatible
}

// Full name: core::ops::control_flow::ControlFlow
#[lang_item("ControlFlow")]
pub enum ControlFlow<B, C>
where
    [@TraitClause0]: Sized<B>,
    [@TraitClause1]: Sized<C>,
{
  Continue(C),
  Break(B),
}

// Full name: core::ops::try_trait::Try
#[lang_item("Try")]
pub trait Try<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FromResidual<Self, Self::Residual>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    parent_clause3 : [@TraitClause3]: Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = from_output<Self>[Self]
    fn branch = branch<Self>[Self]
    non-dyn-compatible
}

// Full name: core::ops::try_trait::Residual
pub trait Residual<Self, O>
where
    Self::parent_clause3::Output = O,
    Self::parent_clause3::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<O>
    parent_clause2 : [@TraitClause2]: Sized<Self::TryType>
    parent_clause3 : [@TraitClause3]: Try<Self::TryType>
    type TryType
    non-dyn-compatible
}

// Full name: core::default::Default
#[lang_item("Default")]
pub trait Default<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn default = default<Self>[Self]
    non-dyn-compatible
}

// Full name: core::cmp::PartialEq
#[lang_item("eq")]
pub trait PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>[Self]
    fn ne<'_0, '_1> = core::cmp::PartialEq::ne<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialEq::{vtable}<Rhs>
}

// Full name: core::cmp::Eq
#[lang_item("Eq")]
pub trait Eq<Self>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Self>
    fn assert_receiver_is_total_eq<'_0> = assert_receiver_is_total_eq<'_0_0, Self>[Self]
    non-dyn-compatible
}

// Full name: core::cmp::Ordering
#[lang_item("Ordering")]
pub enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: core::cmp::PartialOrd
#[lang_item("partial_ord")]
pub trait PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>[Self]
    fn lt<'_0, '_1> = core::cmp::PartialOrd::lt<'_0_0, '_0_1, Self, Rhs>[Self]
    fn le<'_0, '_1> = core::cmp::PartialOrd::le<'_0_0, '_0_1, Self, Rhs>[Self]
    fn gt<'_0, '_1> = core::cmp::PartialOrd::gt<'_0_0, '_0_1, Self, Rhs>[Self]
    fn ge<'_0, '_1> = core::cmp::PartialOrd::ge<'_0_0, '_0_1, Self, Rhs>[Self]
    fn __chaining_lt<'_0, '_1> = __chaining_lt<'_0_0, '_0_1, Self, Rhs>[Self]
    fn __chaining_le<'_0, '_1> = __chaining_le<'_0_0, '_0_1, Self, Rhs>[Self]
    fn __chaining_gt<'_0, '_1> = __chaining_gt<'_0_0, '_0_1, Self, Rhs>[Self]
    fn __chaining_ge<'_0, '_1> = __chaining_ge<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialOrd::{vtable}<Rhs>
}

// Full name: core::cmp::Ord
#[lang_item("Ord")]
pub trait Ord<Self>
{
    parent_clause0 : [@TraitClause0]: Eq<Self>
    parent_clause1 : [@TraitClause1]: PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>[Self]
    fn max<[@TraitClause0]: Sized<Self>> = core::cmp::Ord::max<Self>[Self, @TraitClause0_0]
    fn min<[@TraitClause0]: Sized<Self>> = core::cmp::Ord::min<Self>[Self, @TraitClause0_0]
    fn clamp<[@TraitClause0]: Sized<Self>> = clamp<Self>[Self, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::iter::adapters::rev::Rev
pub opaque type Rev<T>
where
    [@TraitClause0]: Sized<T>,

// Full name: core::iter::adapters::copied::Copied
pub opaque type Copied<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::cloned::Cloned
pub opaque type Cloned<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::adapters::cycle::Cycle
pub opaque type Cycle<I>
where
    [@TraitClause0]: Sized<I>,

// Full name: core::iter::traits::collect::IntoIterator
#[lang_item("IntoIterator")]
pub trait IntoIterator<Self>
where
    Self::parent_clause3::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Item>
    parent_clause2 : [@TraitClause2]: Sized<Self::IntoIter>
    parent_clause3 : [@TraitClause3]: Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>[Self]
    non-dyn-compatible
}

// Full name: core::iter::traits::iterator::Iterator
#[lang_item("iterator")]
pub trait Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>[Self]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: Sized<Self>> = next_chunk<'_0_0, Self, const N : usize>[Self, @TraitClause0_0]
    fn size_hint<'_0> = core::iter::traits::iterator::Iterator::size_hint<'_0_0, Self>[Self]
    fn count<[@TraitClause0]: Sized<Self>> = core::iter::traits::iterator::Iterator::count<Self>[Self, @TraitClause0_0]
    fn last<[@TraitClause0]: Sized<Self>> = core::iter::traits::iterator::Iterator::last<Self>[Self, @TraitClause0_0]
    fn advance_by<'_0> = core::iter::traits::iterator::Iterator::advance_by<'_0_0, Self>[Self]
    fn nth<'_0> = core::iter::traits::iterator::Iterator::nth<'_0_0, Self>[Self]
    fn step_by<[@TraitClause0]: Sized<Self>> = step_by<Self>[Self, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: IntoIterator<U>, @TraitClause1_2::Item = Self::Item> = chain<Self, U>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: IntoIterator<U>> = zip<Self, U>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: Sized<Self>, [@TraitClause1]: Clone<Self::Item>> = intersperse<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: Sized<G>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<G, ()>, @TraitClause1_2::parent_clause1::Output = Self::Item> = intersperse_with<Self, G>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause1::Output = B> = map<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause1::Output = ()> = core::iter::traits::iterator::Iterator::for_each<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = filter<Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = filter_map<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: Sized<Self>> = enumerate<Self>[Self, @TraitClause0_0]
    fn peekable<[@TraitClause0]: Sized<Self>> = peekable<Self>[Self, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = skip_while<Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = take_while<Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<P, (Self::Item)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = map_while<Self, B, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: Sized<Self>> = skip<Self>[Self, @TraitClause0_0]
    fn take<[@TraitClause0]: Sized<Self>> = take<Self>[Self, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: Sized<St>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<F>, [@TraitClause3]: Sized<Self>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 mut (St), Self::Item)>, for<'_0> @TraitClause1_4::parent_clause1::Output = Option<B>[@TraitClause1_1]> = scan<Self, St, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: IntoIterator<U>, [@TraitClause4]: FnMut<F, (Self::Item)>, @TraitClause1_4::parent_clause1::Output = U> = flat_map<Self, U, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: Sized<Self>, [@TraitClause1]: IntoIterator<Self::Item>> = flatten<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (Array<Self::Item, const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause1::Output = R> = map_windows<Self, F, R, const N : usize>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: Sized<Self>> = fuse<Self>[Self, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = ()> = inspect<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: Sized<Self>> = by_ref<'_0_0, Self>[Self, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: Sized<B>, [@TraitClause1]: FromIterator<B, Self::Item>, [@TraitClause2]: Sized<Self>> = collect<Self, B>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: Try<Self::Item>, [@TraitClause3]: Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: FromIterator<B, @TraitClause1_2::Output>> = try_collect<'_0_0, Self, B>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: Sized<E>, [@TraitClause1]: Extend<E, Self::Item>, [@TraitClause2]: Sized<Self>> = collect_into<'_0_0, Self, E>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: Default<B>, [@TraitClause4]: Extend<B, Self::Item>, [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_5::parent_clause1::Output = bool> = partition<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: DoubleEndedIterator<Self>, [@TraitClause4]: for<'_0> FnMut<P, (&'_0_0 (T))>, T : 'a, Self::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause1::Output = bool> = partition_in_place<'a, Self, T, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<P, (Self::Item)>, @TraitClause1_2::parent_clause1::Output = bool> = is_partitioned<Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<Self>, [@TraitClause4]: FnMut<F, (B, Self::Item)>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = core::iter::traits::iterator::Iterator::try_fold<'_0_0, Self, B, F, R>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (Self::Item)>, [@TraitClause4]: Try<R>, @TraitClause1_3::parent_clause1::Output = R, @TraitClause1_4::Output = ()> = try_for_each<'_0_0, Self, F, R>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (B, Self::Item)>, @TraitClause1_3::parent_clause1::Output = B> = core::iter::traits::iterator::Iterator::fold<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<F, (Self::Item, Self::Item)>, @TraitClause1_2::parent_clause1::Output = Self::Item> = reduce<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<Self::Item>[Self::parent_clause1]>, [@TraitClause5]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (Self::Item, Self::Item)>, @TraitClause1_3::Output = Self::Item, @TraitClause1_5::parent_clause1::Output = R> = try_reduce<'_0_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::all<'_0_0, Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<F, (Self::Item)>, @TraitClause1_2::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::any<'_0_0, Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::find<'_0_0, Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (Self::Item)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::iter::traits::iterator::Iterator::find_map<'_0_0, Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<Self::Item>[Self::parent_clause1]>, [@TraitClause5]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (Self::Item))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause1::Output = R> = try_find<'_0_0, Self, R, impl FnMut(&Self::Item) -> R>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: FnMut<P, (Self::Item)>, @TraitClause1_2::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::position<'_0_0, Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: FnMut<P, (Self::Item)>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: ExactSizeIterator<Self>, [@TraitClause4]: DoubleEndedIterator<Self>, @TraitClause1_1::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::rposition<'_0_0, Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: Sized<Self>, [@TraitClause1]: Ord<Self::Item>> = core::iter::traits::iterator::Iterator::max<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: Sized<Self>, [@TraitClause1]: Ord<Self::Item>> = core::iter::traits::iterator::Iterator::min<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Self>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = max_by_key<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = max_by<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Self>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Self::Item))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = min_by_key<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = min_by<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: Sized<Self>, [@TraitClause1]: DoubleEndedIterator<Self>> = rev<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: Sized<A>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<FromA>, [@TraitClause3]: Sized<FromB>, [@TraitClause4]: Default<FromA>, [@TraitClause5]: Extend<FromA, A>, [@TraitClause6]: Default<FromB>, [@TraitClause7]: Extend<FromB, B>, [@TraitClause8]: Sized<Self>, [@TraitClause9]: Iterator<Self>, Self::Item = (A, B)> = unzip<Self, A, B, FromA, FromB>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: Iterator<Self>, [@TraitClause3]: Copy<T>, T : 'a, Self::Item = &'a (T)> = copied<'a, Self, T>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: Iterator<Self>, [@TraitClause3]: Clone<T>, T : 'a, Self::Item = &'a (T)> = cloned<'a, Self, T>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: Sized<Self>, [@TraitClause1]: Clone<Self>> = cycle<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: Sized<Self>> = array_chunks<Self, const N : usize>[Self, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: Sized<S>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: Sum<S, Self::Item>> = core::iter::traits::iterator::Iterator::sum<Self, S>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: Product<P, Self::Item>> = core::iter::traits::iterator::Iterator::product<Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: Ord<Self::Item>, [@TraitClause3]: Sized<Self>, @TraitClause1_1::Item = Self::Item> = core::iter::traits::iterator::Iterator::cmp<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Ordering> = cmp_by<Self, I, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::partial_cmp<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Option<Ordering>[Sized<Ordering>]> = partial_cmp_by<Self, I, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::eq<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (Self::Item, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = bool> = eq_by<Self, I, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::ne<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::lt<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::le<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::gt<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<Self::Item, @TraitClause1_1::Item>, [@TraitClause3]: Sized<Self>> = core::iter::traits::iterator::Iterator::ge<Self, I>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: Sized<Self>, [@TraitClause1]: PartialOrd<Self::Item, Self::Item>> = is_sorted<Self>[Self, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (Self::Item), &'_0_1 (Self::Item))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = bool> = core::iter::traits::iterator::Iterator::is_sorted_by<Self, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<K>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (Self::Item)>, [@TraitClause4]: PartialOrd<K, K>, @TraitClause1_3::parent_clause1::Output = K> = is_sorted_by_key<Self, F, K>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0, [@TraitClause0]: TrustedRandomAccessNoCoerce<Self>> = core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0_0, Self>[Self, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::iter::traits::collect::FromIterator
#[lang_item("FromIterator")]
pub trait FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn from_iter<T, [@TraitClause0]: Sized<T>, [@TraitClause1]: IntoIterator<T>, @TraitClause1_1::Item = A> = from_iter<Self, A, T>[Self, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

// Full name: core::iter::traits::collect::Extend
pub trait Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn extend<'_0, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: IntoIterator<T>, @TraitClause1_1::Item = A> = extend<'_0_0, Self, A, T>[Self, @TraitClause0_0, @TraitClause0_1]
    fn extend_one<'_0> = extend_one<'_0_0, Self, A>[Self]
    fn extend_reserve<'_0> = extend_reserve<'_0_0, Self, A>[Self]
    fn extend_one_unchecked<'_0, [@TraitClause0]: Sized<Self>> = extend_one_unchecked<'_0_0, Self, A>[Self, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::iter::traits::double_ended::DoubleEndedIterator
#[lang_item("DoubleEndedIterator")]
pub trait DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Iterator<Self>
    fn next_back<'_0> = next_back<'_0_0, Self>[Self]
    fn advance_back_by<'_0> = advance_back_by<'_0_0, Self>[Self]
    fn nth_back<'_0> = nth_back<'_0_0, Self>[Self]
    fn try_rfold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<Self>, [@TraitClause4]: FnMut<F, (B, Self::parent_clause1::Item)>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = try_rfold<'_0_0, Self, B, F, R>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn rfold<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Self>, [@TraitClause3]: FnMut<F, (B, Self::parent_clause1::Item)>, @TraitClause1_3::parent_clause1::Output = B> = rfold<Self, B, F>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn rfind<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Self>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (Self::parent_clause1::Item))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = rfind<'_0_0, Self, P>[Self, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    non-dyn-compatible
}

// Full name: core::iter::traits::exact_size::ExactSizeIterator
pub trait ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Iterator<Self>
    fn len<'_0> = len<'_0_0, Self>[Self]
    fn is_empty<'_0> = is_empty<'_0_0, Self>[Self]
    non-dyn-compatible
}

// Full name: core::iter::traits::accum::Sum
pub trait Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn sum<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[Self, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

// Full name: core::iter::traits::accum::Product
pub trait Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn product<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[Self, @TraitClause0_0, @TraitClause0_1]
    non-dyn-compatible
}

// Full name: core::iter::adapters::intersperse::Intersperse
pub opaque type Intersperse<I>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,
    [@TraitClause2]: Clone<@TraitClause1::Item>,

// Full name: core::iter::adapters::intersperse::IntersperseWith
pub opaque type IntersperseWith<I, G>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Iterator<I>,

// Full name: core::iter::adapters::peekable::Peekable
#[lang_item("IterPeekable")]
pub opaque type Peekable<I>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,

// Full name: core::iter::adapters::flatten::FlatMap
pub opaque type FlatMap<I, U, F>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: IntoIterator<U>,

// Full name: core::iter::adapters::flatten::Flatten
pub opaque type Flatten<I>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,
    [@TraitClause2]: IntoIterator<@TraitClause1::Item>,

// Full name: core::iter::adapters::map_windows::MapWindows
pub opaque type MapWindows<I, F, const N : usize>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Iterator<I>,

// Full name: core::iter::adapters::array_chunks::ArrayChunks
pub opaque type ArrayChunks<I, const N : usize>
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,

// Full name: core::iter::adapters::zip::TrustedRandomAccessNoCoerce
pub trait TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
    fn size<'_0, [@TraitClause0]: Iterator<Self>> = size<'_0_0, Self>[Self, @TraitClause0_0]
    non-dyn-compatible
}

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0])) -> Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next_chunk<'_0, T, const N : usize, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0])) -> Result<Array<T, const N : usize>, IntoIter<T, const N : usize>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>[Sized<Array<T, const N : usize>>, Sized<IntoIter<T, const N : usize>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::size_hint
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::size_hint<'_0, T, const N : usize>(@1: &'_0 (IntoIter<T, const N : usize>[@TraitClause0])) -> (usize, Option<usize>[Sized<usize>])
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::count
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::count<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> usize
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::last
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::last<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::advance_by
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::advance_by<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::nth<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::step_by<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> StepBy<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::chain<T, U, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: U) -> Chain<IntoIter<T, const N : usize>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,
    @TraitClause3::Item = T,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::zip<T, U, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: U) -> Zip<IntoIter<T, const N : usize>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::intersperse<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: T) -> Intersperse<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: Clone<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::intersperse_with<T, G, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: G) -> IntersperseWith<IntoIter<T, const N : usize>[@TraitClause0], G>[@TraitClause2, @TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<G, ()>,
    @TraitClause3::parent_clause1::Output = T,

#[lang_item("IteratorMap")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map<T, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Map<IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (T)>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::for_each<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (T)>,
    @TraitClause3::parent_clause1::Output = (),

#[lang_item("iter_filter")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::filter<T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> Filter<IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::filter_map<T, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> FilterMap<IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (T)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::enumerate<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Enumerate<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::peekable<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Peekable<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::skip_while<T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> SkipWhile<IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::take_while<T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> TakeWhile<IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map_while<T, B, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> MapWhile<IntoIter<T, const N : usize>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<P, (T)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::skip<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> Skip<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::take<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: usize) -> Take<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::scan<T, St, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: St, @3: F) -> Scan<IntoIter<T, const N : usize>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<F>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 mut (St), T)>,
    for<'_0> @TraitClause5::parent_clause1::Output = Option<B>[@TraitClause2],

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::flat_map<T, U, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> FlatMap<IntoIter<T, const N : usize>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<U>,
    [@TraitClause5]: FnMut<F, (T)>,
    @TraitClause5::parent_clause1::Output = U,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::flatten<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Flatten<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: IntoIterator<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map_windows<T, F, R, const N : usize, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> MapWindows<IntoIter<T, const N : usize>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Array<T, const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause1::Output = R,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::fuse<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Fuse<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::inspect<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Inspect<IntoIter<T, const N : usize>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause1::Output = (),

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::by_ref<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0])) -> &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::collect<T, B, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: FromIterator<B, T>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_collect<'_0, T, B, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: Try<T>,
    [@TraitClause4]: Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: FromIterator<B, @TraitClause3::Output>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::collect_into<'_0, T, E, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
    [@TraitClause2]: Extend<E, T>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partition<T, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: Default<B>,
    [@TraitClause5]: Extend<B, T>,
    [@TraitClause6]: for<'_0> FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause6::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partition_in_place<'a, T, T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_partitioned<T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (T)>,
    @TraitClause3::parent_clause1::Output = bool,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_fold
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_fold<'_0, T, B, F, R, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: FnMut<F, (B, T)>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_for_each<'_0, T, F, R, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (T)>,
    [@TraitClause5]: Try<R>,
    @TraitClause4::parent_clause1::Output = R,
    @TraitClause5::Output = (),

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::fold
pub fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::fold<T, Acc, Fold, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: Acc, @3: Fold) -> Acc
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Acc>,
    [@TraitClause2]: Sized<Fold>,
    [@TraitClause3]: FnMut<Fold, (Acc, T)>,
    @TraitClause3::parent_clause1::Output = Acc,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::reduce<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (T, T)>,
    @TraitClause3::parent_clause1::Output = T,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_reduce<'_0, T, R, impl FnMut(Self::Item, Self::Item) -> R, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (T, T)>,
    @TraitClause4::Output = T,
    @TraitClause6::parent_clause1::Output = R,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::all<'_0, T, F, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (T)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::any<'_0, T, F, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (T)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::find<'_0, T, P, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::find_map<'_0, T, B, F, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: F) -> Option<B>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (T)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_find<'_0, T, R, impl FnMut(&Self::Item) -> R, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (T))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause1::Output = R,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::position<'_0, T, P, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (T)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::rposition<'_0, T, P, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: FnMut<P, (T)>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: ExactSizeIterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    @TraitClause2::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: Ord<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: Ord<T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max_by_key<T, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max_by<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min_by_key<T, B, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (T))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min_by<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::rev<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Rev<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::unzip<T, A, B, FromA, FromB, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<FromA>,
    [@TraitClause4]: Sized<FromB>,
    [@TraitClause5]: Default<FromA>,
    [@TraitClause6]: Extend<FromA, A>,
    [@TraitClause7]: Default<FromB>,
    [@TraitClause8]: Extend<FromB, B>,
    [@TraitClause9]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause10]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::copied<'a, T, T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Copied<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: Copy<T>,
    T : 'a,
    {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cloned<'a, T, T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Cloned<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: Clone<T>,
    T : 'a,
    {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a (T),

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cycle<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> Cycle<IntoIter<T, const N : usize>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: Clone<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::array_chunks<T, const N : usize, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> ArrayChunks<IntoIter<T, const N : usize>[@TraitClause0], const N : usize>[@TraitClause1, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::sum<T, S, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> S
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<S>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: Sum<S, T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::product<T, P, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> P
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: Product<P, T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cmp<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: Ord<T>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    @TraitClause2::Item = T,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cmp_by<T, I, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Ordering,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partial_cmp<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partial_cmp_by<T, I, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Option<Ordering>[Sized<Ordering>],

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::eq<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::eq_by<T, I, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (T, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::ne<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::lt<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::le<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::gt<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::ge<T, I, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<T, @TraitClause2::Item>,
    [@TraitClause4]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted<T, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0]) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause2]: PartialOrd<T, T>,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted_by<T, F, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = bool,

pub fn core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted_by_key<T, F, K, const N : usize>(@1: IntoIter<T, const N : usize>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<K>,
    [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (T)>,
    [@TraitClause5]: PartialOrd<K, K>,
    @TraitClause4::parent_clause1::Output = K,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::__iterator_get_unchecked
pub unsafe fn {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::__iterator_get_unchecked<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]), @2: usize) -> T
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}
impl<T, const N : usize> Iterator for IntoIter<T, const N : usize>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<IntoIter<T, const N : usize>[@TraitClause0]>
    parent_clause1 = @TraitClause0
    type Item = T
    fn next<'_0> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next<'_0_0, T, const N : usize>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next_chunk<'_0_0, T, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::size_hint<'_0_0, T, const N : usize>[@TraitClause0]
    fn count = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::count<T, const N : usize>[@TraitClause0]
    fn last = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::last<T, const N : usize>[@TraitClause0]
    fn advance_by<'_0> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::advance_by<'_0_0, T, const N : usize>[@TraitClause0]
    fn nth<'_0> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::nth<'_0_0, T, const N : usize>[@TraitClause0]
    fn step_by<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::step_by<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>, @TraitClause1_2::Item = T> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::chain<T, U, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::zip<T, U, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: Clone<T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::intersperse<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: Sized<G>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<G, ()>, @TraitClause1_2::parent_clause1::Output = T> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::intersperse_with<T, G, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (T)>, @TraitClause1_3::parent_clause1::Output = B> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (T)>, @TraitClause1_2::parent_clause1::Output = ()> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::for_each<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::filter<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (T)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::filter_map<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::enumerate<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::peekable<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::skip_while<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::take_while<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<P, (T)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map_while<T, B, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::skip<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::take<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: Sized<St>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<F>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 mut (St), T)>, for<'_0> @TraitClause1_4::parent_clause1::Output = Option<B>[@TraitClause1_1]> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::scan<T, St, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: IntoIterator<U>, [@TraitClause4]: FnMut<F, (T)>, @TraitClause1_4::parent_clause1::Output = U> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::flat_map<T, U, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: IntoIterator<T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::flatten<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (Array<T, const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause1::Output = R> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::map_windows<T, F, R, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::fuse<T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause1::Output = ()> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::inspect<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::by_ref<'_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: Sized<B>, [@TraitClause1]: FromIterator<B, T>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::collect<T, B, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: Try<T>, [@TraitClause3]: Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: FromIterator<B, @TraitClause1_2::Output>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_collect<'_0_0, T, B, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: Sized<E>, [@TraitClause1]: Extend<E, T>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::collect_into<'_0_0, T, E, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: Default<B>, [@TraitClause4]: Extend<B, T>, [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_5::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partition<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<P, (&'_0_0 (T))>, T : 'a, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partition_in_place<'a, T, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (T)>, @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_partitioned<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: FnMut<F, (B, T)>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_fold<'_0_0, T, B, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (T)>, [@TraitClause4]: Try<R>, @TraitClause1_3::parent_clause1::Output = R, @TraitClause1_4::Output = ()> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_for_each<'_0_0, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<Acc, Fold, [@TraitClause0]: Sized<Acc>, [@TraitClause1]: Sized<Fold>, [@TraitClause2]: FnMut<Fold, (Acc, T)>, @TraitClause1_2::parent_clause1::Output = Acc> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::fold<T, Acc, Fold, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn reduce<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (T, T)>, @TraitClause1_2::parent_clause1::Output = T> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::reduce<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (T, T)>, @TraitClause1_3::Output = T, @TraitClause1_5::parent_clause1::Output = R> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_reduce<'_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (T)>, @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::all<'_0_0, T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (T)>, @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::any<'_0_0, T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (T))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::find<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (T)>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::find_map<'_0_0, T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<T>[{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (T))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause1::Output = R> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::try_find<'_0_0, T, R, impl FnMut(&Self::Item) -> R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (T)>, @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::position<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: FnMut<P, (T)>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: ExactSizeIterator<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>, @TraitClause1_1::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::rposition<'_0_0, T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: Ord<T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: Ord<T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max_by_key<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::max_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (T))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min_by_key<T, B, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::min_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: DoubleEndedIterator<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::rev<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: Sized<A>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<FromA>, [@TraitClause3]: Sized<FromB>, [@TraitClause4]: Default<FromA>, [@TraitClause5]: Extend<FromA, A>, [@TraitClause6]: Default<FromB>, [@TraitClause7]: Extend<FromB, B>, [@TraitClause8]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause9]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = (A, B)> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::unzip<T, A, B, FromA, FromB, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: Copy<T>, T : 'a, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a (T)> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::copied<'a, T, T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: Iterator<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: Clone<T>, T : 'a, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]::Item = &'a (T)> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cloned<'a, T, T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: Clone<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cycle<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::array_chunks<T, const N : usize, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: Sized<S>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: Sum<S, T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::sum<T, S, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: Product<P, T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::product<T, P, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: Ord<T>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, @TraitClause1_1::Item = T> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cmp<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Ordering> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::cmp_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partial_cmp<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Option<Ordering>[Sized<Ordering>]> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::partial_cmp_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::eq<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (T, @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::eq_by<T, I, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::ne<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::lt<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::le<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::gt<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<T, @TraitClause1_1::Item>, [@TraitClause3]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::ge<T, I, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause1]: PartialOrd<T, T>> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted<T, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (T), &'_0_1 (T))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = bool> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted_by<T, F, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<K>, [@TraitClause2]: Sized<IntoIter<T, const N : usize>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (T)>, [@TraitClause4]: PartialOrd<K, K>, @TraitClause1_3::parent_clause1::Output = K> = core::array::iter::{impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::is_sorted_by_key<T, F, K, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::__iterator_get_unchecked<'_0_0, T, const N : usize>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::array::iter::{impl IntoIterator for Array<T, const N : usize>}::into_iter
pub fn {impl IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>(@1: Array<T, const N : usize>) -> IntoIter<T, const N : usize>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl IntoIterator for Array<T, const N : usize>}
impl<T, const N : usize> IntoIterator for Array<T, const N : usize>
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Array<T, const N : usize>>
    parent_clause1 = @TraitClause0
    parent_clause2 = Sized<IntoIter<T, const N : usize>[@TraitClause0]>
    parent_clause3 = {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<T, const N : usize>[@TraitClause0]
    type Item = T
    type IntoIter = IntoIter<T, const N : usize>[@TraitClause0]
    fn into_iter = {impl IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::array::iter::{impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}::drop
pub fn {impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}::drop<'_0, T, const N : usize>(@1: &'_0 mut (IntoIter<T, const N : usize>[@TraitClause0]))
where
    [@TraitClause0]: Sized<T>,

// Full name: core::array::iter::{impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}
impl<T, const N : usize> Drop for IntoIter<T, const N : usize>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<IntoIter<T, const N : usize>[@TraitClause0]>
    fn drop<'_0> = {impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}::drop<'_0_0, T, const N : usize>[@TraitClause0]
    vtable: {impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}::{vtable}<T, const N : usize>[@TraitClause0]
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::clone::Clone::clone_from
pub fn clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))
where
    [@TraitClause0]: Clone<Self>,
    [@TraitClause1]: Destruct<Self>,

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

#[lang_item("cmp_partialeq_ne")]
pub fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

// Full name: core::cmp::Eq::assert_receiver_is_total_eq
pub fn assert_receiver_is_total_eq<'_0, Self>(@1: &'_0 (Self))
where
    [@TraitClause0]: Eq<Self>,

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> Ordering
where
    [@TraitClause0]: Ord<Self>,

#[lang_item("cmp_ord_max")]
pub fn core::cmp::Ord::max<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: Ord<Self>,
    [@TraitClause1]: Sized<Self>,

#[lang_item("cmp_ord_min")]
pub fn core::cmp::Ord::min<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: Ord<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::cmp::Ord::clamp
pub fn clamp<Self>(@1: Self, @2: Self, @3: Self) -> Self
where
    [@TraitClause0]: Ord<Self>,
    [@TraitClause1]: Sized<Self>,

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

#[lang_item("cmp_partialord_lt")]
pub fn core::cmp::PartialOrd::lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

#[lang_item("cmp_partialord_le")]
pub fn core::cmp::PartialOrd::le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

#[lang_item("cmp_partialord_gt")]
pub fn core::cmp::PartialOrd::gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

#[lang_item("cmp_partialord_ge")]
pub fn core::cmp::PartialOrd::ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::PartialOrd::__chaining_lt
pub fn __chaining_lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> ControlFlow<bool, ()>[Sized<bool>, Sized<()>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::PartialOrd::__chaining_le
pub fn __chaining_le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> ControlFlow<bool, ()>[Sized<bool>, Sized<()>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::PartialOrd::__chaining_gt
pub fn __chaining_gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> ControlFlow<bool, ()>[Sized<bool>, Sized<()>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::PartialOrd::__chaining_ge
pub fn __chaining_ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> ControlFlow<bool, ()>[Sized<bool>, Sized<()>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::default::Default::default
#[lang_item("default_fn")]
pub fn default<Self>() -> Self
where
    [@TraitClause0]: Default<Self>,

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::ops::arith::AddAssign
#[lang_item("add_assign")]
pub trait AddAssign<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Rhs>
    fn add_assign<'_0> = core::ops::arith::AddAssign::add_assign<'_0_0, Self, Rhs>[Self]
    vtable: core::ops::arith::AddAssign::{vtable}<Rhs>
}

// Full name: core::ops::arith::{impl AddAssign<&'_0 (i32)> for i32}::add_assign
pub fn {impl AddAssign<&'_0 (i32)> for i32}::add_assign<'_0, '_1>(@1: &'_1 mut (i32), @2: &'_0 (i32))

// Full name: core::ops::arith::{impl AddAssign<&'_0 (i32)> for i32}
impl<'_0> AddAssign<&'_0 (i32)> for i32 {
    parent_clause0 = MetaSized<i32>
    parent_clause1 = Sized<&'_ (i32)>
    fn add_assign<'_0> = {impl AddAssign<&'_0 (i32)> for i32}::add_assign<'_0, '_0_0>
    vtable: {impl AddAssign<&'_0 (i32)> for i32}::{vtable}<'_0>
}

// Full name: core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size
pub fn size<'_0, Self>(@1: &'_0 (Self)) -> usize
where
    [@TraitClause0]: TrustedRandomAccessNoCoerce<Self>,
    [@TraitClause1]: Iterator<Self>,

pub fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: Sum<Self, A>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Iterator<I>,
    @TraitClause2::Item = A,

pub fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: Product<Self, A>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Iterator<I>,
    @TraitClause2::Item = A,

// Full name: core::iter::traits::collect::FromIterator::from_iter
#[lang_item("from_iter_fn")]
pub fn from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: FromIterator<Self, A>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: IntoIterator<T>,
    @TraitClause2::Item = A,

#[lang_item("into_iter")]
pub fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> @TraitClause0::IntoIter
where
    [@TraitClause0]: IntoIterator<Self>,

// Full name: core::iter::traits::collect::{impl IntoIterator for I}::into_iter
pub fn {impl IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,

// Full name: core::iter::traits::collect::{impl IntoIterator for I}
impl<I> IntoIterator for I
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,
{
    parent_clause0 = @TraitClause0::parent_clause0
    parent_clause1 = @TraitClause1::parent_clause1
    parent_clause2 = @TraitClause0
    parent_clause3 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = {impl IntoIterator for I}::into_iter<I>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}

// Full name: core::iter::traits::collect::Extend::extend
pub fn extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: Extend<Self, A>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: IntoIterator<T>,
    @TraitClause2::Item = A,

// Full name: core::iter::traits::collect::Extend::extend_one
pub fn extend_one<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)
where
    [@TraitClause0]: Extend<Self, A>,

// Full name: core::iter::traits::collect::Extend::extend_reserve
pub fn extend_reserve<'_0, Self, A>(@1: &'_0 mut (Self), @2: usize)
where
    [@TraitClause0]: Extend<Self, A>,

// Full name: core::iter::traits::collect::Extend::extend_one_unchecked
pub unsafe fn extend_one_unchecked<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)
where
    [@TraitClause0]: Extend<Self, A>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::next_back
pub fn next_back<'_0, Self>(@1: &'_0 mut (Self)) -> Option<@TraitClause0::parent_clause1::Item>[@TraitClause0::parent_clause1::parent_clause1]
where
    [@TraitClause0]: DoubleEndedIterator<Self>,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by
pub fn advance_back_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: DoubleEndedIterator<Self>,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::nth_back
pub fn nth_back<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Option<@TraitClause0::parent_clause1::Item>[@TraitClause0::parent_clause1::parent_clause1]
where
    [@TraitClause0]: DoubleEndedIterator<Self>,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::try_rfold
pub fn try_rfold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: DoubleEndedIterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<Self>,
    [@TraitClause5]: FnMut<F, (B, @TraitClause0::parent_clause1::Item)>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::rfold
pub fn rfold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: DoubleEndedIterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (B, @TraitClause0::parent_clause1::Item)>,
    @TraitClause4::parent_clause1::Output = B,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::rfind
pub fn rfind<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> Option<@TraitClause0::parent_clause1::Item>[@TraitClause0::parent_clause1::parent_clause1]
where
    [@TraitClause0]: DoubleEndedIterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (@TraitClause0::parent_clause1::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::iter::traits::exact_size::ExactSizeIterator::len
pub fn len<'_0, Self>(@1: &'_0 (Self)) -> usize
where
    [@TraitClause0]: ExactSizeIterator<Self>,

// Full name: core::iter::traits::exact_size::ExactSizeIterator::is_empty
pub fn is_empty<'_0, Self>(@1: &'_0 (Self)) -> bool
where
    [@TraitClause0]: ExactSizeIterator<Self>,

#[lang_item("next")]
pub fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,

// Full name: core::iter::traits::iterator::Iterator::next_chunk
pub fn next_chunk<'_0, Self, const N : usize>(@1: &'_0 mut (Self)) -> Result<Array<@TraitClause0::Item, const N : usize>, IntoIter<@TraitClause0::Item, const N : usize>[@TraitClause0::parent_clause1]>[Sized<Array<@TraitClause0::Item, const N : usize>>, Sized<IntoIter<@TraitClause0::Item, const N : usize>[@TraitClause0::parent_clause1]>]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::size_hint<'_0, Self>(@1: &'_0 (Self)) -> (usize, Option<usize>[Sized<usize>])
where
    [@TraitClause0]: Iterator<Self>,

pub fn core::iter::traits::iterator::Iterator::count<Self>(@1: Self) -> usize
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::last<Self>(@1: Self) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::advance_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: Iterator<Self>,

pub fn core::iter::traits::iterator::Iterator::nth<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,

// Full name: core::iter::traits::iterator::Iterator::step_by
pub fn step_by<Self>(@1: Self, @2: usize) -> StepBy<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::chain
pub fn chain<Self, U>(@1: Self, @2: U) -> Chain<Self, @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: IntoIterator<U>,
    @TraitClause3::Item = @TraitClause0::Item,

// Full name: core::iter::traits::iterator::Iterator::zip
pub fn zip<Self, U>(@1: Self, @2: U) -> Zip<Self, @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: IntoIterator<U>,

// Full name: core::iter::traits::iterator::Iterator::intersperse
pub fn intersperse<Self>(@1: Self, @2: @TraitClause0::Item) -> Intersperse<Self>[@TraitClause1, @TraitClause0, @TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: Clone<@TraitClause0::Item>,

// Full name: core::iter::traits::iterator::Iterator::intersperse_with
pub fn intersperse_with<Self, G>(@1: Self, @2: G) -> IntersperseWith<Self, G>[@TraitClause2, @TraitClause1, @TraitClause0]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<G, ()>,
    @TraitClause3::parent_clause1::Output = @TraitClause0::Item,

// Full name: core::iter::traits::iterator::Iterator::map
#[lang_item("IteratorMap")]
pub fn map<Self, B, F>(@1: Self, @2: F) -> Map<Self, F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::iter::traits::iterator::Iterator::for_each<Self, F>(@1: Self, @2: F)
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = (),

// Full name: core::iter::traits::iterator::Iterator::filter
#[lang_item("iter_filter")]
pub fn filter<Self, P>(@1: Self, @2: P) -> Filter<Self, P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::filter_map
pub fn filter_map<Self, B, F>(@1: Self, @2: F) -> FilterMap<Self, F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

// Full name: core::iter::traits::iterator::Iterator::enumerate
#[lang_item("enumerate_method")]
pub fn enumerate<Self>(@1: Self) -> Enumerate<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::peekable
pub fn peekable<Self>(@1: Self) -> Peekable<Self>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::skip_while
pub fn skip_while<Self, P>(@1: Self, @2: P) -> SkipWhile<Self, P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::take_while
pub fn take_while<Self, P>(@1: Self, @2: P) -> TakeWhile<Self, P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::map_while
pub fn map_while<Self, B, P>(@1: Self, @2: P) -> MapWhile<Self, P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<P, (@TraitClause0::Item)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

// Full name: core::iter::traits::iterator::Iterator::skip
pub fn skip<Self>(@1: Self, @2: usize) -> Skip<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::take
pub fn take<Self>(@1: Self, @2: usize) -> Take<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::scan
pub fn scan<Self, St, B, F>(@1: Self, @2: St, @3: F) -> Scan<Self, St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<F>,
    [@TraitClause4]: Sized<Self>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 mut (St), @TraitClause0::Item)>,
    for<'_0> @TraitClause5::parent_clause1::Output = Option<B>[@TraitClause2],

// Full name: core::iter::traits::iterator::Iterator::flat_map
pub fn flat_map<Self, U, F>(@1: Self, @2: F) -> FlatMap<Self, U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: IntoIterator<U>,
    [@TraitClause5]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause5::parent_clause1::Output = U,

// Full name: core::iter::traits::iterator::Iterator::flatten
pub fn flatten<Self>(@1: Self) -> Flatten<Self>[@TraitClause1, @TraitClause0, @TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: IntoIterator<@TraitClause0::Item>,

// Full name: core::iter::traits::iterator::Iterator::map_windows
pub fn map_windows<Self, F, R, const N : usize>(@1: Self, @2: F) -> MapWindows<Self, F, const N : usize>[@TraitClause3, @TraitClause1, @TraitClause0]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Array<@TraitClause0::Item, const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause1::Output = R,

// Full name: core::iter::traits::iterator::Iterator::fuse
pub fn fuse<Self>(@1: Self) -> Fuse<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::inspect
pub fn inspect<Self, F>(@1: Self, @2: F) -> Inspect<Self, F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = (),

// Full name: core::iter::traits::iterator::Iterator::by_ref
pub fn by_ref<'_0, Self>(@1: &'_0 mut (Self)) -> &'_0 mut (Self)
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::collect
#[lang_item("iterator_collect_fn")]
pub fn collect<Self, B>(@1: Self) -> B
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: FromIterator<B, @TraitClause0::Item>,
    [@TraitClause3]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::try_collect
pub fn try_collect<'_0, Self, B>(@1: &'_0 mut (Self)) -> @TraitClause4::TryType
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: Try<@TraitClause0::Item>,
    [@TraitClause4]: Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: FromIterator<B, @TraitClause3::Output>,

// Full name: core::iter::traits::iterator::Iterator::collect_into
pub fn collect_into<'_0, Self, E>(@1: Self, @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<E>,
    [@TraitClause2]: Extend<E, @TraitClause0::Item>,
    [@TraitClause3]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::partition
pub fn partition<Self, B, F>(@1: Self, @2: F) -> (B, B)
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: Default<B>,
    [@TraitClause5]: Extend<B, @TraitClause0::Item>,
    [@TraitClause6]: for<'_0> FnMut<F, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause6::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::partition_in_place
pub fn partition_in_place<'a, Self, T, P>(@1: Self, @2: P) -> usize
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: DoubleEndedIterator<Self>,
    [@TraitClause5]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    @TraitClause0::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::is_partitioned
pub fn is_partitioned<Self, P>(@1: Self, @2: P) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<P, (@TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::try_fold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<Self>,
    [@TraitClause5]: FnMut<F, (B, @TraitClause0::Item)>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

// Full name: core::iter::traits::iterator::Iterator::try_for_each
pub fn try_for_each<'_0, Self, F, R>(@1: &'_0 mut (Self), @2: F) -> R
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (@TraitClause0::Item)>,
    [@TraitClause5]: Try<R>,
    @TraitClause4::parent_clause1::Output = R,
    @TraitClause5::Output = (),

pub fn core::iter::traits::iterator::Iterator::fold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (B, @TraitClause0::Item)>,
    @TraitClause4::parent_clause1::Output = B,

// Full name: core::iter::traits::iterator::Iterator::reduce
pub fn reduce<Self, F>(@1: Self, @2: F) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<F, (@TraitClause0::Item, @TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = @TraitClause0::Item,

// Full name: core::iter::traits::iterator::Iterator::try_reduce
pub fn try_reduce<'_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]>,
    [@TraitClause6]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (@TraitClause0::Item, @TraitClause0::Item)>,
    @TraitClause4::Output = @TraitClause0::Item,
    @TraitClause6::parent_clause1::Output = R,

pub fn core::iter::traits::iterator::Iterator::all<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::any<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::find<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::find_map<'_0, Self, B, F>(@1: &'_0 mut (Self), @2: F) -> Option<B>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (@TraitClause0::Item)>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

// Full name: core::iter::traits::iterator::Iterator::try_find
pub fn try_find<'_0, Self, R, impl FnMut(&Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]>,
    [@TraitClause6]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (@TraitClause0::Item))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause1::Output = R,

pub fn core::iter::traits::iterator::Iterator::position<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: FnMut<P, (@TraitClause0::Item)>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::rposition<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: FnMut<P, (@TraitClause0::Item)>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: ExactSizeIterator<Self>,
    [@TraitClause5]: DoubleEndedIterator<Self>,
    @TraitClause2::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::max<Self>(@1: Self) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: Ord<@TraitClause0::Item>,

pub fn core::iter::traits::iterator::Iterator::min<Self>(@1: Self) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: Ord<@TraitClause0::Item>,

// Full name: core::iter::traits::iterator::Iterator::max_by_key
pub fn max_by_key<Self, B, F>(@1: Self, @2: F) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Self>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

// Full name: core::iter::traits::iterator::Iterator::max_by
pub fn max_by<Self, F>(@1: Self, @2: F) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (@TraitClause0::Item), &'_0_1 (@TraitClause0::Item))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

// Full name: core::iter::traits::iterator::Iterator::min_by_key
pub fn min_by_key<Self, B, F>(@1: Self, @2: F) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Self>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (@TraitClause0::Item))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

// Full name: core::iter::traits::iterator::Iterator::min_by
pub fn min_by<Self, F>(@1: Self, @2: F) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (@TraitClause0::Item), &'_0_1 (@TraitClause0::Item))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

// Full name: core::iter::traits::iterator::Iterator::rev
pub fn rev<Self>(@1: Self) -> Rev<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: DoubleEndedIterator<Self>,

// Full name: core::iter::traits::iterator::Iterator::unzip
pub fn unzip<Self, A, B, FromA, FromB>(@1: Self) -> (FromA, FromB)
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<FromA>,
    [@TraitClause4]: Sized<FromB>,
    [@TraitClause5]: Default<FromA>,
    [@TraitClause6]: Extend<FromA, A>,
    [@TraitClause7]: Default<FromB>,
    [@TraitClause8]: Extend<FromB, B>,
    [@TraitClause9]: Sized<Self>,
    [@TraitClause10]: Iterator<Self>,
    @TraitClause0::Item = (A, B),

// Full name: core::iter::traits::iterator::Iterator::copied
#[lang_item("iter_copied")]
pub fn copied<'a, Self, T>(@1: Self) -> Copied<Self>[@TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: Iterator<Self>,
    [@TraitClause4]: Copy<T>,
    T : 'a,
    @TraitClause0::Item = &'a (T),

// Full name: core::iter::traits::iterator::Iterator::cloned
#[lang_item("iter_cloned")]
pub fn cloned<'a, Self, T>(@1: Self) -> Cloned<Self>[@TraitClause2]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: Iterator<Self>,
    [@TraitClause4]: Clone<T>,
    T : 'a,
    @TraitClause0::Item = &'a (T),

// Full name: core::iter::traits::iterator::Iterator::cycle
pub fn cycle<Self>(@1: Self) -> Cycle<Self>[@TraitClause1]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: Clone<Self>,

// Full name: core::iter::traits::iterator::Iterator::array_chunks
pub fn array_chunks<Self, const N : usize>(@1: Self) -> ArrayChunks<Self, const N : usize>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::sum<Self, S>(@1: Self) -> S
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<S>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: Sum<S, @TraitClause0::Item>,

pub fn core::iter::traits::iterator::Iterator::product<Self, P>(@1: Self) -> P
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: Product<P, @TraitClause0::Item>,

pub fn core::iter::traits::iterator::Iterator::cmp<Self, I>(@1: Self, @2: I) -> Ordering
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: Ord<@TraitClause0::Item>,
    [@TraitClause4]: Sized<Self>,
    @TraitClause2::Item = @TraitClause0::Item,

// Full name: core::iter::traits::iterator::Iterator::cmp_by
pub fn cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> Ordering
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (@TraitClause0::Item, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Ordering,

pub fn core::iter::traits::iterator::Iterator::partial_cmp<Self, I>(@1: Self, @2: I) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::partial_cmp_by
pub fn partial_cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (@TraitClause0::Item, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Option<Ordering>[Sized<Ordering>],

pub fn core::iter::traits::iterator::Iterator::eq<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::eq_by
pub fn eq_by<Self, I, F>(@1: Self, @2: I, @3: F) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (@TraitClause0::Item, @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = bool,

pub fn core::iter::traits::iterator::Iterator::ne<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::lt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::le<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::gt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

pub fn core::iter::traits::iterator::Iterator::ge<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<@TraitClause0::Item, @TraitClause2::Item>,
    [@TraitClause4]: Sized<Self>,

// Full name: core::iter::traits::iterator::Iterator::is_sorted
pub fn is_sorted<Self>(@1: Self) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<Self>,
    [@TraitClause2]: PartialOrd<@TraitClause0::Item, @TraitClause0::Item>,

pub fn core::iter::traits::iterator::Iterator::is_sorted_by<Self, F>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Self>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (@TraitClause0::Item), &'_0_1 (@TraitClause0::Item))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::iter::traits::iterator::Iterator::is_sorted_by_key
pub fn is_sorted_by_key<Self, F, K>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<K>,
    [@TraitClause3]: Sized<Self>,
    [@TraitClause4]: FnMut<F, (@TraitClause0::Item)>,
    [@TraitClause5]: PartialOrd<K, K>,
    @TraitClause4::parent_clause1::Output = K,

pub unsafe fn core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> @TraitClause0::Item
where
    [@TraitClause0]: Iterator<Self>,
    [@TraitClause1]: TrustedRandomAccessNoCoerce<Self>,

pub fn core::ops::arith::AddAssign::add_assign<'_0, Self, Rhs>(@1: &'_0 mut (Self), @2: Rhs)
where
    [@TraitClause0]: AddAssign<Self, Rhs>,

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnMut::call_mut
pub fn call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

// Full name: core::ops::function::FnOnce::call_once
pub fn call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: core::ops::try_trait::Try::from_output
#[lang_item("from_output")]
pub fn from_output<Self>(@1: @TraitClause0::Output) -> Self
where
    [@TraitClause0]: Try<Self>,

// Full name: core::ops::try_trait::Try::branch
#[lang_item("branch")]
pub fn branch<Self>(@1: Self) -> ControlFlow<@TraitClause0::Residual, @TraitClause0::Output>[@TraitClause0::parent_clause1::parent_clause1, @TraitClause0::parent_clause2]
where
    [@TraitClause0]: Try<Self>,

// Full name: core::ops::try_trait::FromResidual::from_residual
#[lang_item("from_residual")]
pub fn from_residual<Self, R>(@1: R) -> Self
where
    [@TraitClause0]: FromResidual<Self, R>,

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

// Full name: core::slice::iter::Iter
#[lang_item("SliceIter")]
pub opaque type Iter<'a, T>
where
    [@TraitClause0]: Sized<T>,
    T : 'a,
    T : 'a,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::next
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::next<'a, '_1, T>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0])) -> Option<&'a (T)>[Sized<&'_ (T)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0])) -> Result<Array<&'a (T), const N : usize>, IntoIter<&'a (T), const N : usize>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>[Sized<Array<&'a (T), const N : usize>>, Sized<IntoIter<&'a (T), const N : usize>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::size_hint
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::size_hint<'a, '_1, T>(@1: &'_1 (Iter<'a, T>[@TraitClause0])) -> (usize, Option<usize>[Sized<usize>])
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::count
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::count<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::last
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::last<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Option<&'a (T)>[Sized<&'_ (T)>]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::advance_by
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::advance_by<'a, '_1, T>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::nth
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::nth<'a, '_1, T>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: usize) -> Option<&'a (T)>[Sized<&'_ (T)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::step_by<'a, T>(@1: Iter<'a, T>[@TraitClause0], @2: usize) -> StepBy<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::chain<'a, T, U>(@1: Iter<'a, T>[@TraitClause0], @2: U) -> Chain<Iter<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,
    @TraitClause3::Item = &'a (T),

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::zip<'a, T, U>(@1: Iter<'a, T>[@TraitClause0], @2: U) -> Zip<Iter<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::intersperse<'a, T>(@1: Iter<'a, T>[@TraitClause0], @2: &'a (T)) -> Intersperse<Iter<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<&'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>(@1: Iter<'a, T>[@TraitClause0], @2: G) -> IntersperseWith<Iter<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<G, ()>,
    @TraitClause3::parent_clause1::Output = &'a (T),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Map<Iter<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (T))>,
    @TraitClause4::parent_clause1::Output = B,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::for_each
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::for_each<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (T))>,
    @TraitClause3::parent_clause1::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::filter<'a, T, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> Filter<Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> FilterMap<Iter<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (T))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::enumerate<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Enumerate<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::peekable<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Peekable<Iter<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::skip_while<'a, T, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> SkipWhile<Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::take_while<'a, T, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> TakeWhile<Iter<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> MapWhile<Iter<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<P, (&'a (T))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::skip<'a, T>(@1: Iter<'a, T>[@TraitClause0], @2: usize) -> Skip<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::take<'a, T>(@1: Iter<'a, T>[@TraitClause0], @2: usize) -> Take<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: St, @3: F) -> Scan<Iter<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<F>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (T))>,
    for<'_0> @TraitClause5::parent_clause1::Output = Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> FlatMap<Iter<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<U>,
    [@TraitClause5]: FnMut<F, (&'a (T))>,
    @TraitClause5::parent_clause1::Output = U,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::flatten<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Flatten<Iter<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: IntoIterator<&'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> MapWindows<Iter<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (T), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::fuse<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Fuse<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::inspect<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Inspect<Iter<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = (),

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::by_ref<'a, '_1, T>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0])) -> &'_1 mut (Iter<'a, T>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::collect<'a, T, B>(@1: Iter<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: FromIterator<B, &'a (T)>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_collect<'a, '_1, T, B>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Try<&'a (T)>,
    [@TraitClause4]: Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::collect_into<'a, '_1, T, E>(@1: Iter<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
    [@TraitClause2]: Extend<E, &'a (T)>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partition<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Default<B>,
    [@TraitClause5]: Extend<B, &'a (T)>,
    [@TraitClause6]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause6::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>(@1: Iter<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (T))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: FnMut<F, (B, &'a (T))>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (T))>,
    [@TraitClause5]: Try<R>,
    @TraitClause4::parent_clause1::Output = R,
    @TraitClause5::Output = (),

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::fold
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::fold<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: FnMut<F, (B, &'a (T))>,
    @TraitClause3::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::reduce<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (T), &'a (T))>,
    @TraitClause3::parent_clause1::Output = &'a (T),

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (T), &'a (T))>,
    @TraitClause4::Output = &'a (T),
    @TraitClause6::parent_clause1::Output = R,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::all
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::all<'a, '_1, T, F>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (T))>,
    @TraitClause3::parent_clause1::Output = bool,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::any
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::any<'a, '_1, T, F>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (T))>,
    @TraitClause3::parent_clause1::Output = bool,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::find
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::find<'a, '_1, T, P>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: P) -> Option<&'a (T)>[Sized<&'_ (T)>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::find_map
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: F) -> Option<B>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (T))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (T)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause1::Output = R,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::position
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::position<'a, '_1, T, P>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (T))>,
    @TraitClause3::parent_clause1::Output = bool,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::rposition
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::rposition<'a, '_1, T, P>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: FnMut<P, (@TraitClause4::parent_clause1::Item)>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: ExactSizeIterator<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max_by<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min_by<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::rev<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Rev<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>(@1: Iter<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<FromA>,
    [@TraitClause4]: Sized<FromB>,
    [@TraitClause5]: Default<FromA>,
    [@TraitClause6]: Extend<FromA, A>,
    [@TraitClause7]: Default<FromB>,
    [@TraitClause8]: Extend<FromB, B>,
    [@TraitClause9]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause10]: Iterator<Iter<'a, T>[@TraitClause0]>,
    {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>(@1: Iter<'a, T>[@TraitClause0]) -> Copied<Iter<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Copy<T>,
    T : 'a,
    {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>(@1: Iter<'a, T>[@TraitClause0]) -> Cloned<Iter<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Clone<T>,
    T : 'a,
    {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cycle<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> Cycle<Iter<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>(@1: Iter<'a, T>[@TraitClause0]) -> ArrayChunks<Iter<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::sum<'a, T, S>(@1: Iter<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<S>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Sum<S, &'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::product<'a, T, P>(@1: Iter<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Product<P, &'a (T)>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cmp<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: Ord<&'a (T)>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (T),

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>(@1: Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>(@1: Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Option<Ordering>[Sized<Ordering>],

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::eq<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>(@1: Iter<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (T), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::ne<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::lt<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::le<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::gt<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::ge<'a, T, I>(@1: Iter<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (T), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Iter<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted<'a, T>(@1: Iter<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause2]: PartialOrd<&'a (T), &'a (T)>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted_by
pub fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>(@1: Iter<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<K>,
    [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (T))>,
    [@TraitClause5]: PartialOrd<K, K>,
    @TraitClause4::parent_clause1::Output = K,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::__iterator_get_unchecked
pub unsafe fn {impl Iterator for Iter<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (Iter<'a, T>[@TraitClause0]), @2: usize) -> &'a (T)
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}
impl<'a, T> Iterator for Iter<'a, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Iter<'_, T>[@TraitClause0]>
    parent_clause1 = Sized<&'_ (T)>
    type Item = &'a (T)
    fn next<'_0> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = {impl Iterator for Iter<'a, T>[@TraitClause0]}::count<'a, T>[@TraitClause0]
    fn last = {impl Iterator for Iter<'a, T>[@TraitClause0]}::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>, @TraitClause1_2::Item = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<&'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: Sized<G>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<G, ()>, @TraitClause1_2::parent_clause1::Output = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (T))>, @TraitClause1_3::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (T))>, @TraitClause1_2::parent_clause1::Output = ()> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (T))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<P, (&'a (T))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: Sized<St>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<F>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (T))>, for<'_0> @TraitClause1_4::parent_clause1::Output = Option<B>[@TraitClause1_1]> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<U>, [@TraitClause4]: FnMut<F, (&'a (T))>, @TraitClause1_4::parent_clause1::Output = U> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: IntoIterator<&'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (T), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = ()> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: Sized<B>, [@TraitClause1]: FromIterator<B, &'a (T)>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: Try<&'a (T)>, [@TraitClause3]: Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: Sized<E>, [@TraitClause1]: Extend<E, &'a (T)>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: Default<B>, [@TraitClause4]: Extend<B, &'a (T)>, [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_5::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<P, (&'_0_0 (T))>, T : 'a, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (T))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: FnMut<F, (B, &'a (T))>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (T))>, [@TraitClause4]: Try<R>, @TraitClause1_3::parent_clause1::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: FnMut<F, (B, &'a (T))>, @TraitClause1_2::parent_clause1::Output = B> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn reduce<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (T), &'a (T))>, @TraitClause1_2::parent_clause1::Output = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (T), &'a (T))>, @TraitClause1_3::Output = &'a (T), @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (T))>, @TraitClause1_2::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (T))>, @TraitClause1_2::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (T))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (T)>[{impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (T)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (T))>, @TraitClause1_2::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: FnMut<P, (@TraitClause1_3::parent_clause1::Item)>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: ExactSizeIterator<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (T)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: DoubleEndedIterator<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: Sized<A>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<FromA>, [@TraitClause3]: Sized<FromB>, [@TraitClause4]: Default<FromA>, [@TraitClause5]: Extend<FromA, A>, [@TraitClause6]: Default<FromB>, [@TraitClause7]: Extend<FromB, B>, [@TraitClause8]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause9]: Iterator<Iter<'a, T>[@TraitClause0]>, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: Copy<T>, T : 'a, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: Clone<T>, T : 'a, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: Sized<S>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: Sum<S, &'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: Product<P, &'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: Ord<&'a (T)>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (T)> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Option<Ordering>[Sized<Ordering>]> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (T), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (T), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Iter<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause1]: PartialOrd<&'a (T), &'a (T)>> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (T)), &'_0_1 (&'a (T)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = bool> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<K>, [@TraitClause2]: Sized<Iter<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (T))>, [@TraitClause4]: PartialOrd<K, K>, @TraitClause1_3::parent_clause1::Output = K> = core::slice::iter::{impl Iterator for Iter<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = {impl Iterator for Iter<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::slice::iter::Chunks
pub opaque type Chunks<'a, T>
where
    [@TraitClause0]: Sized<T>,
    T : 'a,
    T : 'a,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::next
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0])) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0])) -> Result<Array<&'a (Slice<T>), const N : usize>, IntoIter<&'a (Slice<T>), const N : usize>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>[Sized<Array<&'a (Slice<T>), const N : usize>>, Sized<IntoIter<&'a (Slice<T>), const N : usize>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::size_hint
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::size_hint<'a, '_1, T>(@1: &'_1 (Chunks<'a, T>[@TraitClause0])) -> (usize, Option<usize>[Sized<usize>])
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::count
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::count<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::last
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::last<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::advance_by<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::nth
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::nth<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: usize) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::step_by<'a, T>(@1: Chunks<'a, T>[@TraitClause0], @2: usize) -> StepBy<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::chain<'a, T, U>(@1: Chunks<'a, T>[@TraitClause0], @2: U) -> Chain<Chunks<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,
    @TraitClause3::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::zip<'a, T, U>(@1: Chunks<'a, T>[@TraitClause0], @2: U) -> Zip<Chunks<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::intersperse<'a, T>(@1: Chunks<'a, T>[@TraitClause0], @2: &'a (Slice<T>)) -> Intersperse<Chunks<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>(@1: Chunks<'a, T>[@TraitClause0], @2: G) -> IntersperseWith<Chunks<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<G, ()>,
    @TraitClause3::parent_clause1::Output = &'a (Slice<T>),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Map<Chunks<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::for_each<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::filter<'a, T, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> Filter<Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> FilterMap<Chunks<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::enumerate<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Enumerate<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::peekable<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Peekable<Chunks<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::skip_while<'a, T, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> SkipWhile<Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::take_while<'a, T, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> TakeWhile<Chunks<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> MapWhile<Chunks<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::skip<'a, T>(@1: Chunks<'a, T>[@TraitClause0], @2: usize) -> Skip<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::take<'a, T>(@1: Chunks<'a, T>[@TraitClause0], @2: usize) -> Take<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: St, @3: F) -> Scan<Chunks<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<F>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>,
    for<'_0> @TraitClause5::parent_clause1::Output = Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> FlatMap<Chunks<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<U>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause5::parent_clause1::Output = U,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::flatten<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Flatten<Chunks<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: IntoIterator<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> MapWindows<Chunks<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::fuse<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Fuse<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::inspect<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Inspect<Chunks<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = (),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::by_ref<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0])) -> &'_1 mut (Chunks<'a, T>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::collect<'a, T, B>(@1: Chunks<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: FromIterator<B, &'a (Slice<T>)>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_collect<'a, '_1, T, B>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Try<&'a (Slice<T>)>,
    [@TraitClause4]: Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::collect_into<'a, '_1, T, E>(@1: Chunks<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
    [@TraitClause2]: Extend<E, &'a (Slice<T>)>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partition<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Default<B>,
    [@TraitClause5]: Extend<B, &'a (Slice<T>)>,
    [@TraitClause6]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause6::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>(@1: Chunks<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: FnMut<F, (B, &'a (Slice<T>))>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: Try<R>,
    @TraitClause4::parent_clause1::Output = R,
    @TraitClause5::Output = (),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::fold<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (B, &'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::reduce<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause4::Output = &'a (Slice<T>),
    @TraitClause6::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::all<'a, '_1, T, F>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::any<'a, '_1, T, F>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::find<'a, '_1, T, P>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: P) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: F) -> Option<B>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::position<'a, '_1, T, P>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::rposition<'a, '_1, T, P>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: ExactSizeIterator<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max_by<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min_by<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::rev<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Rev<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>(@1: Chunks<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<FromA>,
    [@TraitClause4]: Sized<FromB>,
    [@TraitClause5]: Default<FromA>,
    [@TraitClause6]: Extend<FromA, A>,
    [@TraitClause7]: Default<FromB>,
    [@TraitClause8]: Extend<FromB, B>,
    [@TraitClause9]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause10]: Iterator<Chunks<'a, T>[@TraitClause0]>,
    {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Copied<Chunks<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Copy<T>,
    T : 'a,
    {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Cloned<Chunks<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Clone<T>,
    T : 'a,
    {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cycle<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> Cycle<Chunks<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>(@1: Chunks<'a, T>[@TraitClause0]) -> ArrayChunks<Chunks<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::sum<'a, T, S>(@1: Chunks<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<S>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Sum<S, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::product<'a, T, P>(@1: Chunks<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Product<P, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cmp<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: Ord<&'a (Slice<T>)>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>(@1: Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>(@1: Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Option<Ordering>[Sized<Ordering>],

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::eq<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>(@1: Chunks<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::ne<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::lt<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::le<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::gt<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::ge<'a, T, I>(@1: Chunks<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<Chunks<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted<'a, T>(@1: Chunks<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause2]: PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>(@1: Chunks<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<K>,
    [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: PartialOrd<K, K>,
    @TraitClause4::parent_clause1::Output = K,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::__iterator_get_unchecked
pub unsafe fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0]), @2: usize) -> &'a (Slice<T>)
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}
impl<'a, T> Iterator for Chunks<'a, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Chunks<'_, T>[@TraitClause0]>
    parent_clause1 = Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::count<'a, T>[@TraitClause0]
    fn last = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>, @TraitClause1_2::Item = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: Sized<G>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<G, ()>, @TraitClause1_2::parent_clause1::Output = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = ()> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: Sized<St>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<F>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>, for<'_0> @TraitClause1_4::parent_clause1::Output = Option<B>[@TraitClause1_1]> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<U>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_4::parent_clause1::Output = U> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: IntoIterator<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = ()> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: Sized<B>, [@TraitClause1]: FromIterator<B, &'a (Slice<T>)>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: Try<&'a (Slice<T>)>, [@TraitClause3]: Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: Sized<E>, [@TraitClause1]: Extend<E, &'a (Slice<T>)>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: Default<B>, [@TraitClause4]: Extend<B, &'a (Slice<T>)>, [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_5::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<P, (&'_0_0 (T))>, T : 'a, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: FnMut<F, (B, &'a (Slice<T>))>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: Try<R>, @TraitClause1_3::parent_clause1::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (B, &'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_3::Output = &'a (Slice<T>), @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (Slice<T>)>[{impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: FnMut<P, (&'a (Slice<T>))>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: ExactSizeIterator<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: DoubleEndedIterator<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: Sized<A>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<FromA>, [@TraitClause3]: Sized<FromB>, [@TraitClause4]: Default<FromA>, [@TraitClause5]: Extend<FromA, A>, [@TraitClause6]: Default<FromB>, [@TraitClause7]: Extend<FromB, B>, [@TraitClause8]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause9]: Iterator<Chunks<'a, T>[@TraitClause0]>, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: Copy<T>, T : 'a, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: Clone<T>, T : 'a, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: Sized<S>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: Sum<S, &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: Product<P, &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: Ord<&'a (Slice<T>)>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Option<Ordering>[Sized<Ordering>]> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<Chunks<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause1]: PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<K>, [@TraitClause2]: Sized<Chunks<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: PartialOrd<K, K>, @TraitClause1_3::parent_clause1::Output = K> = core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::slice::iter::ChunksExact
pub opaque type ChunksExact<'a, T>
where
    [@TraitClause0]: Sized<T>,
    T : 'a,
    T : 'a,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next
pub fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next<'a, '_1, T>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0])) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next_chunk<'a, '_1, T, const N : usize>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0])) -> Result<Array<&'a (Slice<T>), const N : usize>, IntoIter<&'a (Slice<T>), const N : usize>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>[Sized<Array<&'a (Slice<T>), const N : usize>>, Sized<IntoIter<&'a (Slice<T>), const N : usize>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::size_hint
pub fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::size_hint<'a, '_1, T>(@1: &'_1 (ChunksExact<'a, T>[@TraitClause0])) -> (usize, Option<usize>[Sized<usize>])
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::count
pub fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::count<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::last
pub fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::last<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::advance_by<'a, '_1, T>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> Result<(), NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>[Sized<()>, Sized<NonZero<usize>[Sized<usize>, {impl ZeroablePrimitive for usize}]>]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::nth
pub fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::nth<'a, '_1, T>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::step_by<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0], @2: usize) -> StepBy<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::chain<'a, T, U>(@1: ChunksExact<'a, T>[@TraitClause0], @2: U) -> Chain<ChunksExact<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,
    @TraitClause3::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::zip<'a, T, U>(@1: ChunksExact<'a, T>[@TraitClause0], @2: U) -> Zip<ChunksExact<'a, T>[@TraitClause0], @TraitClause3::IntoIter>[@TraitClause2, @TraitClause3::parent_clause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: IntoIterator<U>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::intersperse<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0], @2: &'a (Slice<T>)) -> Intersperse<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>(@1: ChunksExact<'a, T>[@TraitClause0], @2: G) -> IntersperseWith<ChunksExact<'a, T>[@TraitClause0], G>[@TraitClause2, @TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<G>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<G, ()>,
    @TraitClause3::parent_clause1::Output = &'a (Slice<T>),

#[lang_item("IteratorMap")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Map<ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::for_each<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = (),

#[lang_item("iter_filter")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::filter<'a, T, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> Filter<ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> FilterMap<ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

#[lang_item("enumerate_method")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::enumerate<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Enumerate<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::peekable<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Peekable<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::skip_while<'a, T, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> SkipWhile<ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::take_while<'a, T, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> TakeWhile<ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> MapWhile<ChunksExact<'a, T>[@TraitClause0], P>[@TraitClause3, @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::skip<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0], @2: usize) -> Skip<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::take<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0], @2: usize) -> Take<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: St, @3: F) -> Scan<ChunksExact<'a, T>[@TraitClause0], St, F>[@TraitClause4, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<St>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<F>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>,
    for<'_0> @TraitClause5::parent_clause1::Output = Option<B>[@TraitClause2],

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> FlatMap<ChunksExact<'a, T>[@TraitClause0], U, F>[@TraitClause3, @TraitClause1, @TraitClause2, @TraitClause4]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<U>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause5::parent_clause1::Output = U,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::flatten<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Flatten<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0], @TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: IntoIterator<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> MapWindows<ChunksExact<'a, T>[@TraitClause0], F, const N : usize>[@TraitClause3, @TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>,
    for<'_0> @TraitClause4::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::fuse<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Fuse<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::inspect<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Inspect<ChunksExact<'a, T>[@TraitClause0], F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = (),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::by_ref<'a, '_1, T>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0])) -> &'_1 mut (ChunksExact<'a, T>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

#[lang_item("iterator_collect_fn")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::collect<'a, T, B>(@1: ChunksExact<'a, T>[@TraitClause0]) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: FromIterator<B, &'a (Slice<T>)>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_collect<'a, '_1, T, B>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0])) -> @TraitClause4::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Try<&'a (Slice<T>)>,
    [@TraitClause4]: Residual<@TraitClause3::Residual, B>,
    [@TraitClause5]: FromIterator<B, @TraitClause3::Output>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::collect_into<'a, '_1, T, E>(@1: ChunksExact<'a, T>[@TraitClause0], @2: &'_1 mut (E)) -> &'_1 mut (E)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
    [@TraitClause2]: Extend<E, &'a (Slice<T>)>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partition<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> (B, B)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Default<B>,
    [@TraitClause5]: Extend<B, &'a (Slice<T>)>,
    [@TraitClause6]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause6::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<P>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<P, (&'_0_0 (T))>,
    T : 'a,
    {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T),
    for<'_0> @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>(@1: ChunksExact<'a, T>[@TraitClause0], @2: P) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_fold<'a, '_1, T, B, F, R>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: B, @3: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<R>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: FnMut<F, (B, &'a (Slice<T>))>,
    [@TraitClause6]: Try<R>,
    @TraitClause5::parent_clause1::Output = R,
    @TraitClause6::Output = B,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_for_each<'a, '_1, T, F, R>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: F) -> R
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<R>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: Try<R>,
    @TraitClause4::parent_clause1::Output = R,
    @TraitClause5::Output = (),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::fold<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: B, @3: F) -> B
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (B, &'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::reduce<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_reduce<'a, '_1, T, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>,
    @TraitClause4::Output = &'a (Slice<T>),
    @TraitClause6::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::all<'a, '_1, T, F>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::any<'a, '_1, T, F>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::find<'a, '_1, T, P>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: P) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: F) -> Option<B>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    @TraitClause4::parent_clause1::Output = Option<B>[@TraitClause1],

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_find<'a, '_1, T, R, impl FnMut(&Self::Item) -> R>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause5::TryType
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<R>,
    [@TraitClause2]: Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Try<R>,
    [@TraitClause5]: Residual<@TraitClause4::Residual, Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>,
    [@TraitClause6]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>,
    @TraitClause4::Output = bool,
    for<'_0> @TraitClause6::parent_clause1::Output = R,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::position<'a, '_1, T, P>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>,
    @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::rposition<'a, '_1, T, P>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: P) -> Option<usize>[Sized<usize>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: ExactSizeIterator<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>,
    @TraitClause2::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Ord<&'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max_by<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<B>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Ord<B>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>,
    for<'_0> @TraitClause5::parent_clause1::Output = B,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min_by<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::rev<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Rev<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>(@1: ChunksExact<'a, T>[@TraitClause0]) -> (FromA, FromB)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Sized<B>,
    [@TraitClause3]: Sized<FromA>,
    [@TraitClause4]: Sized<FromB>,
    [@TraitClause5]: Default<FromA>,
    [@TraitClause6]: Extend<FromA, A>,
    [@TraitClause7]: Default<FromB>,
    [@TraitClause8]: Extend<FromB, B>,
    [@TraitClause9]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause10]: Iterator<ChunksExact<'a, T>[@TraitClause0]>,
    {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B),

#[lang_item("iter_copied")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Copied<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Copy<T>,
    T : 'a,
    {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

#[lang_item("iter_cloned")]
pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Cloned<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause2]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Iterator<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: Clone<T>,
    T : 'a,
    {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cycle<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> Cycle<ChunksExact<'a, T>[@TraitClause0]>[@TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: Clone<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>(@1: ChunksExact<'a, T>[@TraitClause0]) -> ArrayChunks<ChunksExact<'a, T>[@TraitClause0], const N : usize>[@TraitClause1, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::sum<'a, T, S>(@1: ChunksExact<'a, T>[@TraitClause0]) -> S
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<S>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Sum<S, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::product<'a, T, P>(@1: ChunksExact<'a, T>[@TraitClause0]) -> P
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<P>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: Product<P, &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cmp<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: Ord<&'a (Slice<T>)>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    @TraitClause2::Item = &'a (Slice<T>),

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> Ordering
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Ordering,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = Option<Ordering>[Sized<Ordering>],

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::eq<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I, @3: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Sized<F>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: IntoIterator<I>,
    [@TraitClause5]: FnMut<F, (&'a (Slice<T>), @TraitClause4::Item)>,
    @TraitClause5::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::ne<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialEq<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::lt<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::le<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::gt<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::ge<'a, T, I>(@1: ChunksExact<'a, T>[@TraitClause0], @2: I) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: IntoIterator<I>,
    [@TraitClause3]: PartialOrd<&'a (Slice<T>), @TraitClause2::Item>,
    [@TraitClause4]: Sized<ChunksExact<'a, T>[@TraitClause0]>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted<'a, T>(@1: ChunksExact<'a, T>[@TraitClause0]) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause2]: PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause3]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>,
    for<'_0, '_1> @TraitClause3::parent_clause1::Output = bool,

pub fn core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>(@1: ChunksExact<'a, T>[@TraitClause0], @2: F) -> bool
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: Sized<K>,
    [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>,
    [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>,
    [@TraitClause5]: PartialOrd<K, K>,
    @TraitClause4::parent_clause1::Output = K,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::__iterator_get_unchecked
pub unsafe fn {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (ChunksExact<'a, T>[@TraitClause0]), @2: usize) -> &'a (Slice<T>)
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}
impl<'a, T> Iterator for ChunksExact<'a, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<ChunksExact<'_, T>[@TraitClause0]>
    parent_clause1 = Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next<'a, '_0_0, T>[@TraitClause0]
    fn next_chunk<'_0, const N : usize, [@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next_chunk<'a, '_0_0, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn size_hint<'_0> = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::count<'a, T>[@TraitClause0]
    fn last = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::last<'a, T>[@TraitClause0]
    fn advance_by<'_0> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::advance_by<'a, '_0_0, T>[@TraitClause0]
    fn nth<'_0> = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::nth<'a, '_0_0, T>[@TraitClause0]
    fn step_by<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::step_by<'a, T>[@TraitClause0, @TraitClause0_0]
    fn chain<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>, @TraitClause1_2::Item = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::chain<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn zip<U, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: IntoIterator<U>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::zip<'a, T, U>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn intersperse<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::intersperse<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn intersperse_with<G, [@TraitClause0]: Sized<G>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<G, ()>, @TraitClause1_2::parent_clause1::Output = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::intersperse_with<'a, T, G>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn for_each<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = ()> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::for_each<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::filter<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn filter_map<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::filter_map<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn enumerate<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::enumerate<'a, T>[@TraitClause0, @TraitClause0_0]
    fn peekable<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::peekable<'a, T>[@TraitClause0, @TraitClause0_0]
    fn skip_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::skip_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn take_while<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::take_while<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn map_while<B, P, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map_while<'a, T, B, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn skip<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::skip<'a, T>[@TraitClause0, @TraitClause0_0]
    fn take<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::take<'a, T>[@TraitClause0, @TraitClause0_0]
    fn scan<St, B, F, [@TraitClause0]: Sized<St>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<F>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 mut (St), &'a (Slice<T>))>, for<'_0> @TraitClause1_4::parent_clause1::Output = Option<B>[@TraitClause1_1]> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::scan<'a, T, St, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flat_map<U, F, [@TraitClause0]: Sized<U>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<U>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_4::parent_clause1::Output = U> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::flat_map<'a, T, U, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn flatten<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: IntoIterator<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::flatten<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn map_windows<F, R, const N : usize, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: for<'_0> FnMut<F, (&'_0_0 (Array<&'a (Slice<T>), const N : usize>))>, for<'_0> @TraitClause1_3::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::map_windows<'a, T, F, R, const N : usize>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn fuse<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::fuse<'a, T>[@TraitClause0, @TraitClause0_0]
    fn inspect<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = ()> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::inspect<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn by_ref<'_0, [@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::by_ref<'a, '_0_0, T>[@TraitClause0, @TraitClause0_0]
    fn collect<B, [@TraitClause0]: Sized<B>, [@TraitClause1]: FromIterator<B, &'a (Slice<T>)>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::collect<'a, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_collect<'_0, B, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: Try<&'a (Slice<T>)>, [@TraitClause3]: Residual<@TraitClause1_2::Residual, B>, [@TraitClause4]: FromIterator<B, @TraitClause1_2::Output>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_collect<'a, '_0_0, T, B>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn collect_into<'_0, E, [@TraitClause0]: Sized<E>, [@TraitClause1]: Extend<E, &'a (Slice<T>)>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::collect_into<'a, '_0_0, T, E>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn partition<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: Default<B>, [@TraitClause4]: Extend<B, &'a (Slice<T>)>, [@TraitClause5]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_5::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partition<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn partition_in_place<'a, T, P, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<P>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<P, (&'_0_0 (T))>, T : 'a, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a mut (T), for<'_0> @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partition_in_place<'a, 'a, T, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn is_partitioned<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_partitioned<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_fold<'_0, B, F, R, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<R>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: FnMut<F, (B, &'a (Slice<T>))>, [@TraitClause5]: Try<R>, @TraitClause1_4::parent_clause1::Output = R, @TraitClause1_5::Output = B> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_fold<'a, '_0_0, T, B, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn try_for_each<'_0, F, R, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<R>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: Try<R>, @TraitClause1_3::parent_clause1::Output = R, @TraitClause1_4::Output = ()> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_for_each<'a, '_0_0, T, F, R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn fold<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (B, &'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::fold<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn reduce<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::reduce<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn try_reduce<'_0, R, impl FnMut(Self::Item, Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(Self::Item, Self::Item) -> R>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: FnMut<impl FnMut(Self::Item, Self::Item) -> R, (&'a (Slice<T>), &'a (Slice<T>))>, @TraitClause1_3::Output = &'a (Slice<T>), @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_reduce<'a, '_0_0, T, R, impl FnMut(Self::Item, Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn all<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::all<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn any<'_0, F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::any<'a, '_0_0, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0> FnMut<P, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::find<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn find_map<'_0, B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, @TraitClause1_3::parent_clause1::Output = Option<B>[@TraitClause1_0]> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::find_map<'a, '_0_0, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn try_find<'_0, R, impl FnMut(&Self::Item) -> R, [@TraitClause0]: Sized<R>, [@TraitClause1]: Sized<impl FnMut(&Self::Item) -> R>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: Try<R>, [@TraitClause4]: Residual<@TraitClause1_3::Residual, Option<&'a (Slice<T>)>[{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::parent_clause1]>, [@TraitClause5]: for<'_0> FnMut<impl FnMut(&Self::Item) -> R, (&'_0_0 (&'a (Slice<T>)))>, @TraitClause1_3::Output = bool, for<'_0> @TraitClause1_5::parent_clause1::Output = R> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::try_find<'a, '_0_0, T, R, impl FnMut(&Self::Item) -> R>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5]
    fn position<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: FnMut<P, (&'a (Slice<T>))>, @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::position<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rposition<'_0, P, [@TraitClause0]: Sized<P>, [@TraitClause1]: FnMut<P, (&'a (Slice<T>))>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: ExactSizeIterator<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>, @TraitClause1_1::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::rposition<'a, '_0_0, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn min<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: Ord<&'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn max_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn max_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::max_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn min_by_key<B, F, [@TraitClause0]: Sized<B>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Ord<B>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause4]: for<'_0> FnMut<F, (&'_0_0 (&'a (Slice<T>)))>, for<'_0> @TraitClause1_4::parent_clause1::Output = B> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min_by_key<'a, T, B, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn min_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::min_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn rev<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: DoubleEndedIterator<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::rev<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn unzip<A, B, FromA, FromB, [@TraitClause0]: Sized<A>, [@TraitClause1]: Sized<B>, [@TraitClause2]: Sized<FromA>, [@TraitClause3]: Sized<FromB>, [@TraitClause4]: Default<FromA>, [@TraitClause5]: Extend<FromA, A>, [@TraitClause6]: Default<FromB>, [@TraitClause7]: Extend<FromB, B>, [@TraitClause8]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause9]: Iterator<ChunksExact<'a, T>[@TraitClause0]>, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = (A, B)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::unzip<'a, T, A, B, FromA, FromB>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4, @TraitClause0_5, @TraitClause0_6, @TraitClause0_7, @TraitClause0_8, @TraitClause0_9]
    fn copied<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: Copy<T>, T : 'a, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::copied<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cloned<'a, T, [@TraitClause0]: Sized<T>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: Iterator<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: Clone<T>, T : 'a, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'a, T>[@TraitClause0]::Item = &'a (T)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cloned<'a, 'a, T, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cycle<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: Clone<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cycle<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn array_chunks<const N : usize, [@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::array_chunks<'a, T, const N : usize>[@TraitClause0, @TraitClause0_0]
    fn sum<S, [@TraitClause0]: Sized<S>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: Sum<S, &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::sum<'a, T, S>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn product<P, [@TraitClause0]: Sized<P>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: Product<P, &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::product<'a, T, P>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: Ord<&'a (Slice<T>)>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>, @TraitClause1_1::Item = &'a (Slice<T>)> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Ordering> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn partial_cmp<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partial_cmp<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn partial_cmp_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = Option<Ordering>[Sized<Ordering>]> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::partial_cmp_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn eq<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::eq<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn eq_by<I, F, [@TraitClause0]: Sized<I>, [@TraitClause1]: Sized<F>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: IntoIterator<I>, [@TraitClause4]: FnMut<F, (&'a (Slice<T>), @TraitClause1_3::Item)>, @TraitClause1_4::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::eq_by<'a, T, I, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn ne<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialEq<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::ne<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn lt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::lt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn le<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::le<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn gt<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::gt<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn ge<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I>, [@TraitClause2]: PartialOrd<&'a (Slice<T>), @TraitClause1_1::Item>, [@TraitClause3]: Sized<ChunksExact<'a, T>[@TraitClause0]>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::ge<'a, T, I>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3]
    fn is_sorted<[@TraitClause0]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause1]: PartialOrd<&'a (Slice<T>), &'a (Slice<T>)>> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted<'a, T>[@TraitClause0, @TraitClause0_0, @TraitClause0_1]
    fn is_sorted_by<F, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause2]: for<'_0, '_1> FnMut<F, (&'_0_0 (&'a (Slice<T>)), &'_0_1 (&'a (Slice<T>)))>, for<'_0, '_1> @TraitClause1_2::parent_clause1::Output = bool> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted_by<'a, T, F>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2]
    fn is_sorted_by_key<F, K, [@TraitClause0]: Sized<F>, [@TraitClause1]: Sized<K>, [@TraitClause2]: Sized<ChunksExact<'a, T>[@TraitClause0]>, [@TraitClause3]: FnMut<F, (&'a (Slice<T>))>, [@TraitClause4]: PartialOrd<K, K>, @TraitClause1_3::parent_clause1::Output = K> = core::slice::iter::{impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::is_sorted_by_key<'a, T, F, K>[@TraitClause0, @TraitClause0_0, @TraitClause0_1, @TraitClause0_2, @TraitClause0_3, @TraitClause0_4]
    fn __iterator_get_unchecked<'_0> = {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::slice::{Slice<T>}::iter
#[lang_item("slice_iter")]
pub fn iter<'_0, T>(@1: &'_0 (Slice<T>)) -> Iter<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::{Slice<T>}::chunks
pub fn chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> Chunks<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::{Slice<T>}::chunks_exact
pub fn chunks_exact<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> ChunksExact<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let a@1: Array<i32, 7 : usize>; // local
    let i@2: i32; // local
    let @3: (); // anonymous local
    let @4: IntoIter<i32, 7 : usize>[Sized<i32>]; // anonymous local
    let @5: IntoIter<i32, 7 : usize>[Sized<i32>]; // anonymous local
    let @6: Array<i32, 7 : usize>; // anonymous local
    let iter@7: IntoIter<i32, 7 : usize>[Sized<i32>]; // local
    let @8: (); // anonymous local
    let @9: Option<i32>[Sized<i32>]; // anonymous local
    let @10: &'_ mut (IntoIter<i32, 7 : usize>[Sized<i32>]); // anonymous local
    let @11: &'_ mut (IntoIter<i32, 7 : usize>[Sized<i32>]); // anonymous local
    let v@12: i32; // local
    let @13: i32; // anonymous local
    let @14: i32; // anonymous local
    let @15: (); // anonymous local
    let @16: Iter<'_, i32>[Sized<i32>]; // anonymous local
    let @17: Iter<'_, i32>[Sized<i32>]; // anonymous local
    let @18: &'_ (Slice<i32>); // anonymous local
    let @19: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@20: Iter<'_, i32>[Sized<i32>]; // local
    let @21: (); // anonymous local
    let @22: Option<&'_ (i32)>[Sized<&'_ (i32)>]; // anonymous local
    let @23: &'_ mut (Iter<'_, i32>[Sized<i32>]); // anonymous local
    let @24: &'_ mut (Iter<'_, i32>[Sized<i32>]); // anonymous local
    let v@25: &'_ (i32); // local
    let @26: (); // anonymous local
    let @27: &'_ mut (i32); // anonymous local
    let @28: &'_ (i32); // anonymous local
    let @29: (); // anonymous local
    let @30: Chunks<'_, i32>[Sized<i32>]; // anonymous local
    let @31: Chunks<'_, i32>[Sized<i32>]; // anonymous local
    let @32: &'_ (Slice<i32>); // anonymous local
    let @33: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@34: Chunks<'_, i32>[Sized<i32>]; // local
    let @35: (); // anonymous local
    let @36: Option<&'_ (Slice<i32>)>[Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @37: &'_ mut (Chunks<'_, i32>[Sized<i32>]); // anonymous local
    let @38: &'_ mut (Chunks<'_, i32>[Sized<i32>]); // anonymous local
    let @39: i32; // anonymous local
    let @40: (); // anonymous local
    let @41: ChunksExact<'_, i32>[Sized<i32>]; // anonymous local
    let @42: ChunksExact<'_, i32>[Sized<i32>]; // anonymous local
    let @43: &'_ (Slice<i32>); // anonymous local
    let @44: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@45: ChunksExact<'_, i32>[Sized<i32>]; // local
    let @46: (); // anonymous local
    let @47: Option<&'_ (Slice<i32>)>[Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @48: &'_ mut (ChunksExact<'_, i32>[Sized<i32>]); // anonymous local
    let @49: &'_ mut (ChunksExact<'_, i32>[Sized<i32>]); // anonymous local
    let @50: i32; // anonymous local
    let expected@51: i32; // local
    let @52: (); // anonymous local
    let @53: (&'_ (i32), &'_ (i32)); // anonymous local
    let @54: &'_ (i32); // anonymous local
    let @55: &'_ (i32); // anonymous local
    let left_val@56: &'_ (i32); // local
    let right_val@57: &'_ (i32); // local
    let @58: bool; // anonymous local
    let @59: i32; // anonymous local
    let @60: i32; // anonymous local
    let kind@61: AssertKind; // local
    let @62: AssertKind; // anonymous local
    let @63: &'_ (i32); // anonymous local
    let @64: &'_ (i32); // anonymous local
    let @65: &'_ (i32); // anonymous local
    let @66: &'_ (i32); // anonymous local
    let @67: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local

    storage_live(@10)
    storage_live(v@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@23)
    storage_live(v@25)
    storage_live(@26)
    storage_live(@27)
    storage_live(@28)
    storage_live(@37)
    storage_live(@39)
    storage_live(@48)
    storage_live(@50)
    storage_live(kind@61)
    storage_live(@62)
    storage_live(@63)
    storage_live(@64)
    storage_live(@65)
    storage_live(@66)
    storage_live(@67)
    storage_live(a@1)
    a@1 := [const (0 : i32), const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32)]
    storage_live(i@2)
    i@2 := const (0 : i32)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (a@1)
    @5 := {impl IntoIterator for Array<T, const N : usize>}::into_iter<i32, 7 : usize>[Sized<i32>](move (@6))
    storage_dead(@6)
    @4 := {impl IntoIterator for I}::into_iter<IntoIter<i32, 7 : usize>[Sized<i32>]>[Sized<IntoIter<i32, 7 : usize>[Sized<i32>]>, {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}<i32, 7 : usize>[Sized<i32>]](move (@5))
    storage_dead(@5)
    storage_live(iter@7)
    iter@7 := move (@4)
    loop {
        storage_live(@8)
        storage_live(@9)
        storage_live(@10)
        storage_live(@11)
        @11 := &mut iter@7
        @10 := &two-phase-mut *(@11)
        @9 := {impl Iterator for IntoIter<T, const N : usize>[@TraitClause0]}::next<'_, i32, 7 : usize>[Sized<i32>](move (@10))
        storage_dead(@10)
        match @9 {
            Option::None => {
                break 0
            },
            Option::Some => {
                storage_live(v@12)
                v@12 := copy ((@9 as variant Option::Some).0)
                storage_live(@13)
                @13 := copy (v@12)
                @14 := copy (i@2) panic.+ copy (@13)
                i@2 := move (@14)
                storage_dead(@13)
                storage_dead(v@12)
                storage_dead(@11)
                storage_dead(@9)
                storage_dead(@8)
                continue 0
            },
        }
    }
    storage_dead(@11)
    storage_dead(@9)
    storage_dead(@8)
    drop[{impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}<i32, 7 : usize>[Sized<i32>]] iter@7
    storage_dead(iter@7)
    drop[{impl Drop for IntoIter<T, const N : usize>[@TraitClause0]}<i32, 7 : usize>[Sized<i32>]] @4
    storage_dead(@4)
    storage_dead(@3)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    @19 := &a@1
    @18 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@19))
    storage_dead(@19)
    @17 := iter<'_, i32>[Sized<i32>](move (@18))
    storage_dead(@18)
    @16 := {impl IntoIterator for I}::into_iter<Iter<'_, i32>[Sized<i32>]>[Sized<Iter<'_, i32>[Sized<i32>]>, {impl Iterator for Iter<'a, T>[@TraitClause0]}<'_, i32>[Sized<i32>]](move (@17))
    storage_dead(@17)
    storage_live(iter@20)
    iter@20 := move (@16)
    loop {
        storage_live(@21)
        storage_live(@22)
        storage_live(@23)
        storage_live(@24)
        @24 := &mut iter@20
        @23 := &two-phase-mut *(@24)
        @22 := {impl Iterator for Iter<'a, T>[@TraitClause0]}::next<'_, '_, i32>[Sized<i32>](move (@23))
        storage_dead(@23)
        match @22 {
            Option::None => {
                break 0
            },
            Option::Some => {
                storage_live(v@25)
                v@25 := copy ((@22 as variant Option::Some).0)
                storage_live(@26)
                storage_live(@27)
                @27 := &two-phase-mut i@2
                storage_live(@28)
                @28 := copy (v@25)
                @26 := {impl AddAssign<&'_0 (i32)> for i32}::add_assign<'_, '_>(move (@27), move (@28))
                storage_dead(@28)
                storage_dead(@27)
                storage_dead(@26)
                storage_dead(v@25)
                storage_dead(@24)
                storage_dead(@22)
                storage_dead(@21)
                continue 0
            },
        }
    }
    storage_dead(@24)
    storage_dead(@22)
    storage_dead(@21)
    storage_dead(iter@20)
    storage_dead(@16)
    storage_dead(@15)
    storage_live(@29)
    storage_live(@30)
    storage_live(@31)
    storage_live(@32)
    storage_live(@33)
    @33 := &a@1
    @32 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@33))
    storage_dead(@33)
    @31 := chunks<'_, i32>[Sized<i32>](move (@32), const (2 : usize))
    storage_dead(@32)
    @30 := {impl IntoIterator for I}::into_iter<Chunks<'_, i32>[Sized<i32>]>[Sized<Chunks<'_, i32>[Sized<i32>]>, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'_, i32>[Sized<i32>]](move (@31))
    storage_dead(@31)
    storage_live(iter@34)
    iter@34 := move (@30)
    loop {
        storage_live(@35)
        storage_live(@36)
        storage_live(@37)
        storage_live(@38)
        @38 := &mut iter@34
        @37 := &two-phase-mut *(@38)
        @36 := {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'_, '_, i32>[Sized<i32>](move (@37))
        storage_dead(@37)
        match @36 {
            Option::None => {
                break 0
            },
            Option::Some => {
                @39 := copy (i@2) panic.+ const (1 : i32)
                i@2 := move (@39)
                storage_dead(@38)
                storage_dead(@36)
                storage_dead(@35)
                continue 0
            },
        }
    }
    storage_dead(@38)
    storage_dead(@36)
    storage_dead(@35)
    storage_dead(iter@34)
    storage_dead(@30)
    storage_dead(@29)
    storage_live(@40)
    storage_live(@41)
    storage_live(@42)
    storage_live(@43)
    storage_live(@44)
    @44 := &a@1
    @43 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@44))
    storage_dead(@44)
    @42 := chunks_exact<'_, i32>[Sized<i32>](move (@43), const (2 : usize))
    storage_dead(@43)
    @41 := {impl IntoIterator for I}::into_iter<ChunksExact<'_, i32>[Sized<i32>]>[Sized<ChunksExact<'_, i32>[Sized<i32>]>, {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}<'_, i32>[Sized<i32>]](move (@42))
    storage_dead(@42)
    storage_live(iter@45)
    iter@45 := move (@41)
    loop {
        storage_live(@46)
        storage_live(@47)
        storage_live(@48)
        storage_live(@49)
        @49 := &mut iter@45
        @48 := &two-phase-mut *(@49)
        @47 := {impl Iterator for ChunksExact<'a, T>[@TraitClause0]}::next<'_, '_, i32>[Sized<i32>](move (@48))
        storage_dead(@48)
        match @47 {
            Option::None => {
                break 0
            },
            Option::Some => {
                @50 := copy (i@2) panic.+ const (1 : i32)
                i@2 := move (@50)
                storage_dead(@49)
                storage_dead(@47)
                storage_dead(@46)
                continue 0
            },
        }
    }
    storage_dead(@49)
    storage_dead(@47)
    storage_dead(@46)
    storage_dead(iter@45)
    storage_dead(@41)
    storage_dead(@40)
    storage_live(expected@51)
    expected@51 := const (28 : i32)
    storage_live(@52)
    storage_live(@53)
    storage_live(@54)
    @54 := &i@2
    storage_live(@55)
    @55 := &expected@51
    @53 := (move (@54), move (@55))
    storage_dead(@55)
    storage_dead(@54)
    storage_live(left_val@56)
    left_val@56 := copy ((@53).0)
    storage_live(right_val@57)
    right_val@57 := copy ((@53).1)
    storage_live(@58)
    storage_live(@59)
    @59 := copy (*(left_val@56))
    storage_live(@60)
    @60 := copy (*(right_val@57))
    @58 := move (@59) == move (@60)
    if move (@58) {
    }
    else {
        storage_dead(@60)
        storage_dead(@59)
        storage_live(kind@61)
        kind@61 := AssertKind::Eq {  }
        storage_live(@62)
        @62 := move (kind@61)
        storage_live(@63)
        storage_live(@64)
        @64 := &*(left_val@56)
        @63 := &*(@64)
        storage_live(@65)
        storage_live(@66)
        @66 := &*(right_val@57)
        @65 := &*(@66)
        storage_live(@67)
        @67 := Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@60)
    storage_dead(@59)
    storage_dead(@58)
    storage_dead(right_val@57)
    storage_dead(left_val@56)
    storage_dead(@53)
    storage_dead(@52)
    @0 := ()
    storage_dead(expected@51)
    storage_dead(i@2)
    storage_dead(a@1)
    @0 := ()
    return
}



