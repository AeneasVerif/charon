# Final LLBC before serialization:

pub fn test_crate::test_loop1(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: (); // anonymous local

    storage_live(@8)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    loop {
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@2)
        storage_live(@7)
        @7 := copy (max@1)
        @5 := move (@6) < move (@7)
        if move (@5) {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@8)
            @8 := copy (i@2)
            s@3 := copy (s@3) + move (@8)
            storage_dead(@8)
            i@2 := copy (i@2) + const (1 : u32)
            storage_dead(@5)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@7)
    storage_dead(@6)
    storage_live(@9)
    storage_dead(@9)
    storage_dead(@5)
    storage_dead(@4)
    s@3 := copy (s@3) * const (2 : u32)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop2(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: (); // anonymous local
    let @9: bool; // anonymous local
    let @10: u32; // anonymous local
    let @11: u32; // anonymous local
    let @12: (); // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    loop {
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@2)
        storage_live(@7)
        @7 := copy (max@1)
        @5 := move (@6) < move (@7)
        if move (@5) {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@8)
            storage_live(@9)
            storage_live(@10)
            @10 := copy (i@2)
            @9 := move (@10) == const (17 : u32)
            if move (@9) {
            }
            else {
                storage_dead(@10)
                storage_dead(@9)
                storage_dead(@8)
                storage_live(@11)
                @11 := copy (i@2)
                s@3 := copy (s@3) + move (@11)
                storage_dead(@11)
                i@2 := copy (i@2) + const (1 : u32)
                storage_dead(@5)
                continue 0
            }
            storage_dead(@10)
            storage_dead(@9)
            storage_dead(@8)
            break 0
        }
        else {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@12)
            storage_dead(@12)
            break 0
        }
    }
    storage_dead(@5)
    storage_dead(@4)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop3(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let j@3: u32; // local
    let s@4: u32; // local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: (); // anonymous local
    let @10: bool; // anonymous local
    let @11: u32; // anonymous local
    let @12: u32; // anonymous local
    let @13: (); // anonymous local
    let @14: bool; // anonymous local
    let @15: u32; // anonymous local
    let @16: u32; // anonymous local
    let @17: u32; // anonymous local
    let @18: u32; // anonymous local
    let @19: (); // anonymous local
    let @20: u32; // anonymous local
    let @21: (); // anonymous local

    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(j@3)
    j@3 := const (0 : u32)
    storage_live(s@4)
    s@4 := const (0 : u32)
    storage_live(@5)
    loop {
        storage_live(@6)
        storage_live(@7)
        @7 := copy (i@2)
        storage_live(@8)
        @8 := copy (max@1)
        @6 := move (@7) < move (@8)
        if move (@6) {
            storage_dead(@8)
            storage_dead(@7)
            storage_live(@9)
            loop {
                storage_live(@10)
                storage_live(@11)
                @11 := copy (j@3)
                storage_live(@12)
                @12 := copy (max@1)
                @10 := move (@11) < move (@12)
                if move (@10) {
                    storage_dead(@12)
                    storage_dead(@11)
                    storage_live(@13)
                    storage_live(@14)
                    storage_live(@15)
                    storage_live(@16)
                    @16 := copy (i@2)
                    storage_live(@17)
                    @17 := copy (j@3)
                    @15 := move (@16) + move (@17)
                    storage_dead(@17)
                    storage_dead(@16)
                    @14 := move (@15) == const (17 : u32)
                    if move (@14) {
                    }
                    else {
                        storage_dead(@15)
                        storage_dead(@14)
                        storage_dead(@13)
                        storage_live(@18)
                        @18 := copy (i@2)
                        s@4 := copy (s@4) + move (@18)
                        storage_dead(@18)
                        j@3 := copy (j@3) + const (1 : u32)
                        storage_dead(@10)
                        storage_dead(@9)
                        storage_dead(@6)
                        continue 1
                    }
                    storage_dead(@15)
                    storage_dead(@14)
                    storage_dead(@13)
                    storage_dead(@10)
                    continue 0
                }
                else {
                    break 0
                }
            }
            storage_dead(@12)
            storage_dead(@11)
            storage_live(@19)
            storage_dead(@19)
            storage_dead(@10)
            storage_dead(@9)
            j@3 := const (0 : u32)
            storage_live(@20)
            @20 := copy (i@2)
            s@4 := copy (s@4) + move (@20)
            storage_dead(@20)
            i@2 := copy (i@2) + const (1 : u32)
            storage_dead(@6)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@21)
    storage_dead(@21)
    storage_dead(@6)
    storage_dead(@5)
    @0 := copy (s@4)
    storage_dead(s@4)
    storage_dead(j@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop4(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let j@3: u32; // local
    let s@4: u32; // local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: (); // anonymous local
    let @10: bool; // anonymous local
    let @11: u32; // anonymous local
    let @12: u32; // anonymous local
    let @13: (); // anonymous local
    let @14: bool; // anonymous local
    let @15: u32; // anonymous local
    let @16: u32; // anonymous local
    let @17: u32; // anonymous local
    let @18: u32; // anonymous local
    let @19: (); // anonymous local
    let @20: u32; // anonymous local
    let @21: (); // anonymous local

    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(i@2)
    i@2 := const (1 : u32)
    storage_live(j@3)
    j@3 := const (0 : u32)
    storage_live(s@4)
    s@4 := const (0 : u32)
    storage_live(@5)
    loop {
        storage_live(@6)
        storage_live(@7)
        @7 := copy (i@2)
        storage_live(@8)
        @8 := copy (max@1)
        @6 := move (@7) < move (@8)
        if move (@6) {
            storage_dead(@8)
            storage_dead(@7)
            storage_live(@9)
            loop {
                storage_live(@10)
                storage_live(@11)
                @11 := copy (j@3)
                storage_live(@12)
                @12 := copy (max@1)
                @10 := move (@11) < move (@12)
                if move (@10) {
                    storage_dead(@12)
                    storage_dead(@11)
                    storage_live(@13)
                    storage_live(@14)
                    storage_live(@15)
                    storage_live(@16)
                    @16 := copy (i@2)
                    storage_live(@17)
                    @17 := copy (j@3)
                    @15 := move (@16) + move (@17)
                    storage_dead(@17)
                    storage_dead(@16)
                    @14 := move (@15) == const (17 : u32)
                    if move (@14) {
                        storage_dead(@15)
                        storage_dead(@14)
                        storage_dead(@13)
                        storage_dead(@10)
                        continue 0
                    }
                    else {
                        storage_dead(@15)
                        storage_dead(@14)
                        storage_dead(@13)
                        storage_live(@18)
                        @18 := copy (i@2)
                        s@4 := copy (s@4) + move (@18)
                        storage_dead(@18)
                        j@3 := copy (j@3) + const (1 : u32)
                        storage_dead(@10)
                        storage_dead(@9)
                        break 1
                    }
                }
                else {
                    break 0
                }
            }
            storage_dead(@12)
            storage_dead(@11)
            storage_live(@19)
            storage_dead(@19)
            storage_dead(@10)
            storage_dead(@9)
            j@3 := const (0 : u32)
            storage_live(@20)
            @20 := copy (i@2)
            s@4 := copy (s@4) + move (@20)
            storage_dead(@20)
            i@2 := copy (i@2) + const (1 : u32)
            storage_dead(@6)
            continue 0
        }
        else {
            storage_dead(@8)
            storage_dead(@7)
            storage_live(@21)
            storage_dead(@21)
            break 0
        }
    }
    storage_dead(@6)
    storage_dead(@5)
    @0 := copy (s@4)
    storage_dead(s@4)
    storage_dead(j@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop5(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let j@3: u32; // local
    let s@4: u32; // local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: (); // anonymous local
    let @10: bool; // anonymous local
    let @11: u32; // anonymous local
    let @12: u32; // anonymous local
    let @13: u32; // anonymous local
    let @14: (); // anonymous local
    let @15: u32; // anonymous local
    let @16: (); // anonymous local

    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(j@3)
    j@3 := const (0 : u32)
    storage_live(s@4)
    s@4 := const (0 : u32)
    storage_live(@5)
    loop {
        storage_live(@6)
        storage_live(@7)
        @7 := copy (i@2)
        storage_live(@8)
        @8 := copy (max@1)
        @6 := move (@7) < move (@8)
        if move (@6) {
            storage_dead(@8)
            storage_dead(@7)
            storage_live(@9)
            loop {
                storage_live(@10)
                storage_live(@11)
                @11 := copy (j@3)
                storage_live(@12)
                @12 := copy (max@1)
                @10 := move (@11) < move (@12)
                if move (@10) {
                    storage_dead(@12)
                    storage_dead(@11)
                    storage_live(@13)
                    @13 := copy (j@3)
                    s@4 := copy (s@4) + move (@13)
                    storage_dead(@13)
                    j@3 := copy (j@3) + const (1 : u32)
                    storage_dead(@10)
                    continue 0
                }
                else {
                    break 0
                }
            }
            storage_dead(@12)
            storage_dead(@11)
            storage_live(@14)
            storage_dead(@14)
            storage_dead(@10)
            storage_dead(@9)
            storage_live(@15)
            @15 := copy (i@2)
            s@4 := copy (s@4) + move (@15)
            storage_dead(@15)
            i@2 := copy (i@2) + const (1 : u32)
            storage_dead(@6)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@16)
    storage_dead(@16)
    storage_dead(@6)
    storage_dead(@5)
    @0 := copy (s@4)
    storage_dead(s@4)
    storage_dead(j@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop6(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: (); // anonymous local
    let @9: bool; // anonymous local
    let @10: u32; // anonymous local
    let @11: u32; // anonymous local
    let @12: (); // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    loop {
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@2)
        storage_live(@7)
        @7 := copy (max@1)
        @5 := move (@6) < move (@7)
        if move (@5) {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@8)
            storage_live(@9)
            storage_live(@10)
            @10 := copy (i@2)
            @9 := move (@10) > const (3 : u32)
            if move (@9) {
            }
            else {
                storage_dead(@10)
                storage_dead(@9)
                storage_dead(@8)
                storage_live(@11)
                @11 := copy (i@2)
                s@3 := copy (s@3) + move (@11)
                storage_dead(@11)
                i@2 := copy (i@2) + const (1 : u32)
                storage_dead(@5)
                continue 0
            }
            storage_dead(@10)
            storage_dead(@9)
            storage_dead(@8)
            break 0
        }
        else {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@12)
            storage_dead(@12)
            break 0
        }
    }
    storage_dead(@5)
    storage_dead(@4)
    // All the below nodes are exit candidates (each of them is referenced twice)
    s@3 := copy (s@3) + const (1 : u32)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loop7(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: bool; // anonymous local
    let @9: u32; // anonymous local
    let @10: u32; // anonymous local
    let @11: (); // anonymous local
    let @12: bool; // anonymous local
    let @13: u32; // anonymous local
    let @14: u32; // anonymous local
    let @15: (); // anonymous local

    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (i@2)
    storage_live(@7)
    @7 := copy (max@1)
    @5 := move (@6) < move (@7)
    if move (@5) {
        storage_dead(@7)
        storage_dead(@6)
        loop {
            storage_live(@8)
            storage_live(@9)
            @9 := copy (i@2)
            storage_live(@10)
            @10 := copy (max@1)
            @8 := move (@9) < move (@10)
            if move (@8) {
                storage_dead(@10)
                storage_dead(@9)
                storage_live(@11)
                storage_live(@12)
                storage_live(@13)
                @13 := copy (i@2)
                @12 := move (@13) > const (3 : u32)
                if move (@12) {
                }
                else {
                    storage_dead(@13)
                    storage_dead(@12)
                    storage_dead(@11)
                    storage_live(@14)
                    @14 := copy (i@2)
                    s@3 := copy (s@3) + move (@14)
                    storage_dead(@14)
                    i@2 := copy (i@2) + const (1 : u32)
                    storage_dead(@8)
                    continue 0
                }
                storage_dead(@13)
                storage_dead(@12)
                storage_dead(@11)
                break 0
            }
            else {
                storage_dead(@10)
                storage_dead(@9)
                storage_live(@15)
                storage_dead(@15)
                break 0
            }
        }
        storage_dead(@8)
    }
    else {
        storage_dead(@7)
        storage_dead(@6)
        s@3 := const (2 : u32)
    }
    storage_dead(@5)
    storage_dead(@4)
    s@3 := copy (s@3) + const (1 : u32)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::test_loops()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: (); // anonymous local
    let @3: bool; // anonymous local
    let @4: u32; // anonymous local
    let x@5: u32; // local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: u32; // anonymous local
    let x@9: u32; // local
    let @10: (); // anonymous local
    let @11: bool; // anonymous local
    let @12: u32; // anonymous local
    let x@13: u32; // local
    let @14: (); // anonymous local
    let @15: bool; // anonymous local
    let @16: u32; // anonymous local
    let x@17: u32; // local
    let @18: (); // anonymous local
    let @19: bool; // anonymous local
    let @20: u32; // anonymous local
    let x@21: u32; // local
    let @22: (); // anonymous local
    let @23: bool; // anonymous local
    let @24: u32; // anonymous local

    storage_live(x@1)
    x@1 := test_crate::test_loop1(const (2 : u32))
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := copy (x@1)
    @3 := move (@4) == const (2 : u32)
    if move (@3) {
    }
    else {
        storage_dead(@4)
        panic(core::panicking::panic)
    }
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    storage_live(x@5)
    x@5 := test_crate::test_loop2(const (2 : u32))
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := copy (x@5)
    @7 := move (@8) == const (1 : u32)
    if move (@7) {
    }
    else {
        storage_dead(@8)
        panic(core::panicking::panic)
    }
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@6)
    storage_live(x@9)
    x@9 := test_crate::test_loop3(const (2 : u32))
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    @12 := copy (x@9)
    @11 := move (@12) == const (3 : u32)
    if move (@11) {
    }
    else {
        storage_dead(@12)
        panic(core::panicking::panic)
    }
    storage_dead(@12)
    storage_dead(@11)
    storage_dead(@10)
    storage_live(x@13)
    x@13 := test_crate::test_loop4(const (20 : u32))
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    @16 := copy (x@13)
    @15 := move (@16) == const (1 : u32)
    if move (@15) {
    }
    else {
        storage_dead(@16)
        panic(core::panicking::panic)
    }
    storage_dead(@16)
    storage_dead(@15)
    storage_dead(@14)
    storage_live(x@17)
    x@17 := test_crate::test_loop5(const (2 : u32))
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    @20 := copy (x@17)
    @19 := move (@20) == const (2 : u32)
    if move (@19) {
    }
    else {
        storage_dead(@20)
        panic(core::panicking::panic)
    }
    storage_dead(@20)
    storage_dead(@19)
    storage_dead(@18)
    storage_live(x@21)
    x@21 := test_crate::test_loop6(const (2 : u32))
    storage_live(@22)
    storage_live(@23)
    storage_live(@24)
    @24 := copy (x@21)
    @23 := move (@24) == const (2 : u32)
    if move (@23) {
    }
    else {
        storage_dead(@24)
        panic(core::panicking::panic)
    }
    storage_dead(@24)
    storage_dead(@23)
    storage_dead(@22)
    @0 := ()
    storage_dead(x@21)
    storage_dead(x@17)
    storage_dead(x@13)
    storage_dead(x@9)
    storage_dead(x@5)
    storage_dead(x@1)
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Range")]
pub struct core::ops::range::Range<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("iterator")]
pub trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>
}

pub fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Ordering")]
pub enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


#[lang_item("partial_ord")]
pub trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

pub trait core::iter::range::Step<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<Self>
    parent_clause2 : [@TraitClause2]: core::cmp::PartialOrd<Self, Self>
    fn steps_between<'_0, '_1> = core::iter::range::Step::steps_between<'_0_0, '_0_1, Self>
    fn forward_checked = core::iter::range::Step::forward_checked<Self>
    fn backward_checked = core::iter::range::Step::backward_checked<Self>
}

pub fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0])) -> core::option::Option<A>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

impl core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<A> : core::iter::traits::iterator::Iterator<core::ops::range::Range<A>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
{
    parent_clause0 = @TraitClause0
    type Item = A
    fn next<'_0> = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_0_0, A>[@TraitClause0, @TraitClause1]
}

pub fn core::clone::impls::{impl core::clone::Clone for i32}#14::clone<'_0>(@1: &'_0 (i32)) -> i32

impl core::clone::impls::{impl core::clone::Clone for i32}#14 : core::clone::Clone<i32>
{
    parent_clause0 = core::marker::Sized<i32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for i32}#14::clone<'_0_0>
}

pub fn core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30::eq<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30 : core::cmp::PartialEq<i32, i32>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30::eq<'_0_0, '_0_1>
}

pub fn core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76::partial_cmp<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

impl core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76 : core::cmp::PartialOrd<i32, i32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30
    fn partial_cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76::partial_cmp<'_0_0, '_0_1>
}

pub fn core::iter::range::{impl core::iter::range::Step for i32}#40::steps_between<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::{impl core::iter::range::Step for i32}#40::forward_checked(@1: i32, @2: usize) -> core::option::Option<i32>[core::marker::Sized<i32>]

pub fn core::iter::range::{impl core::iter::range::Step for i32}#40::backward_checked(@1: i32, @2: usize) -> core::option::Option<i32>[core::marker::Sized<i32>]

impl core::iter::range::{impl core::iter::range::Step for i32}#40 : core::iter::range::Step<i32>
{
    parent_clause0 = core::marker::Sized<i32>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for i32}#14
    parent_clause2 = core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76
    fn steps_between<'_0, '_1> = core::iter::range::{impl core::iter::range::Step for i32}#40::steps_between<'_0_0, '_0_1>
    fn forward_checked = core::iter::range::{impl core::iter::range::Step for i32}#40::forward_checked
    fn backward_checked = core::iter::range::{impl core::iter::range::Step for i32}#40::backward_checked
}

pub fn core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0>(@1: &'_0 (usize)) -> usize

impl core::clone::impls::{impl core::clone::Clone for usize}#5 : core::clone::Clone<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0_0>
}

pub fn core::cmp::impls::{impl core::cmp::PartialEq<usize> for usize}#21::eq<'_0, '_1>(@1: &'_0 (usize), @2: &'_1 (usize)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<usize> for usize}#21 : core::cmp::PartialEq<usize, usize>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<usize> for usize}#21::eq<'_0_0, '_0_1>
}

pub fn core::cmp::impls::{impl core::cmp::PartialOrd<usize> for usize}#58::partial_cmp<'_0, '_1>(@1: &'_0 (usize), @2: &'_1 (usize)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

impl core::cmp::impls::{impl core::cmp::PartialOrd<usize> for usize}#58 : core::cmp::PartialOrd<usize, usize>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<usize> for usize}#21
    fn partial_cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialOrd<usize> for usize}#58::partial_cmp<'_0_0, '_0_1>
}

pub fn core::iter::range::{impl core::iter::range::Step for usize}#43::steps_between<'_0, '_1>(@1: &'_0 (usize), @2: &'_1 (usize)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::{impl core::iter::range::Step for usize}#43::forward_checked(@1: usize, @2: usize) -> core::option::Option<usize>[core::marker::Sized<usize>]

pub fn core::iter::range::{impl core::iter::range::Step for usize}#43::backward_checked(@1: usize, @2: usize) -> core::option::Option<usize>[core::marker::Sized<usize>]

impl core::iter::range::{impl core::iter::range::Step for usize}#43 : core::iter::range::Step<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for usize}#5
    parent_clause2 = core::cmp::impls::{impl core::cmp::PartialOrd<usize> for usize}#58
    fn steps_between<'_0, '_1> = core::iter::range::{impl core::iter::range::Step for usize}#43::steps_between<'_0_0, '_0_1>
    fn forward_checked = core::iter::range::{impl core::iter::range::Step for usize}#43::forward_checked
    fn backward_checked = core::iter::range::{impl core::iter::range::Step for usize}#43::backward_checked
}

pub fn test_crate::nested_loops_enum(@1: usize, @2: usize) -> usize
{
    let @0: usize; // return
    let step_out@1: usize; // arg #1
    let step_in@2: usize; // arg #2
    let s@3: usize; // local
    let @4: (); // anonymous local
    let @5: core::ops::range::Range<i32>[core::marker::Sized<i32>]; // anonymous local
    let @6: core::ops::range::Range<i32>[core::marker::Sized<i32>]; // anonymous local
    let iter@7: core::ops::range::Range<i32>[core::marker::Sized<i32>]; // local
    let @8: (); // anonymous local
    let @9: core::option::Option<i32>[core::marker::Sized<i32>]; // anonymous local
    let @10: &'_ mut (core::ops::range::Range<i32>[core::marker::Sized<i32>]); // anonymous local
    let @11: &'_ mut (core::ops::range::Range<i32>[core::marker::Sized<i32>]); // anonymous local
    let @12: (); // anonymous local
    let @13: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let @14: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let @15: usize; // anonymous local
    let iter@16: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // local
    let @17: (); // anonymous local
    let @18: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let @19: &'_ mut (core::ops::range::Range<usize>[core::marker::Sized<usize>]); // anonymous local
    let @20: &'_ mut (core::ops::range::Range<usize>[core::marker::Sized<usize>]); // anonymous local
    let @21: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let @22: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let @23: usize; // anonymous local
    let iter@24: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // local
    let @25: (); // anonymous local
    let @26: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let @27: &'_ mut (core::ops::range::Range<usize>[core::marker::Sized<usize>]); // anonymous local
    let @28: &'_ mut (core::ops::range::Range<usize>[core::marker::Sized<usize>]); // anonymous local

    storage_live(@10)
    storage_live(@19)
    storage_live(@21)
    storage_live(@22)
    storage_live(@23)
    storage_live(iter@24)
    storage_live(@25)
    storage_live(@26)
    storage_live(@27)
    storage_live(@28)
    storage_live(s@3)
    s@3 := const (0 : usize)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := core::ops::range::Range { start: const (0 : i32), end: const (128 : i32) }
    @5 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::ops::range::Range<i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::ops::range::Range<i32>[core::marker::Sized<i32>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<i32>[core::marker::Sized<i32>, core::iter::range::{impl core::iter::range::Step for i32}#40]](move (@6))
    storage_dead(@6)
    storage_live(iter@7)
    iter@7 := move (@5)
    loop {
        storage_live(@8)
        storage_live(@9)
        storage_live(@10)
        storage_live(@11)
        @11 := &mut iter@7
        @10 := &two-phase-mut *(@11)
        @9 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_, i32>[core::marker::Sized<i32>, core::iter::range::{impl core::iter::range::Step for i32}#40](move (@10))
        storage_dead(@10)
        match @9 {
            0 => {
                break 0
            },
            1 => {
                s@3 := copy (s@3) + const (1 : usize)
                storage_dead(@11)
                storage_dead(@9)
                storage_dead(@8)
                continue 0
            },
        }
    }
    storage_dead(@11)
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(iter@7)
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    @15 := copy (step_out@1)
    @14 := core::ops::range::Range { start: const (0 : usize), end: move (@15) }
    storage_dead(@15)
    @13 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::ops::range::Range<usize>[core::marker::Sized<usize>]>[core::marker::Sized<core::ops::range::Range<usize>[core::marker::Sized<usize>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<usize>[core::marker::Sized<usize>, core::iter::range::{impl core::iter::range::Step for usize}#43]](move (@14))
    storage_dead(@14)
    storage_live(iter@16)
    iter@16 := move (@13)
    loop {
        storage_live(@17)
        storage_live(@18)
        storage_live(@19)
        storage_live(@20)
        @20 := &mut iter@16
        @19 := &two-phase-mut *(@20)
        @18 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_, usize>[core::marker::Sized<usize>, core::iter::range::{impl core::iter::range::Step for usize}#43](move (@19))
        storage_dead(@19)
        match @18 {
            0 => {
                break 0
            },
            1 => {
                storage_live(@21)
                storage_live(@22)
                storage_live(@23)
                @23 := copy (step_in@2)
                @22 := core::ops::range::Range { start: const (0 : usize), end: move (@23) }
                storage_dead(@23)
                @21 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::ops::range::Range<usize>[core::marker::Sized<usize>]>[core::marker::Sized<core::ops::range::Range<usize>[core::marker::Sized<usize>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<usize>[core::marker::Sized<usize>, core::iter::range::{impl core::iter::range::Step for usize}#43]](move (@22))
                storage_dead(@22)
                storage_live(iter@24)
                iter@24 := move (@21)
                loop {
                    storage_live(@25)
                    storage_live(@26)
                    storage_live(@27)
                    storage_live(@28)
                    @28 := &mut iter@24
                    @27 := &two-phase-mut *(@28)
                    @26 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_, usize>[core::marker::Sized<usize>, core::iter::range::{impl core::iter::range::Step for usize}#43](move (@27))
                    storage_dead(@27)
                    match @26 {
                        0 => {
                            break 0
                        },
                        1 => {
                            s@3 := copy (s@3) + const (1 : usize)
                            storage_dead(@28)
                            storage_dead(@26)
                            storage_dead(@25)
                            continue 0
                        },
                    }
                }
                storage_dead(@28)
                storage_dead(@26)
                storage_dead(@25)
                storage_dead(iter@24)
                storage_dead(@21)
                storage_dead(@20)
                storage_dead(@18)
                storage_dead(@17)
                continue 0
            },
        }
    }
    storage_dead(@20)
    storage_dead(@18)
    storage_dead(@17)
    storage_dead(iter@16)
    storage_dead(@13)
    storage_dead(@12)
    @0 := copy (s@3)
    storage_dead(s@3)
    return
}

pub fn core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0>(@1: &'_0 (u32)) -> u32

impl core::clone::impls::{impl core::clone::Clone for u32}#8 : core::clone::Clone<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0_0>
}

pub fn core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::eq<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24 : core::cmp::PartialEq<u32, u32>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::eq<'_0_0, '_0_1>
}

pub fn core::cmp::impls::{impl core::cmp::PartialOrd<u32> for u32}#64::partial_cmp<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

impl core::cmp::impls::{impl core::cmp::PartialOrd<u32> for u32}#64 : core::cmp::PartialOrd<u32, u32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24
    fn partial_cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialOrd<u32> for u32}#64::partial_cmp<'_0_0, '_0_1>
}

pub fn core::iter::range::{impl core::iter::range::Step for u32}#39::steps_between<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::{impl core::iter::range::Step for u32}#39::forward_checked(@1: u32, @2: usize) -> core::option::Option<u32>[core::marker::Sized<u32>]

pub fn core::iter::range::{impl core::iter::range::Step for u32}#39::backward_checked(@1: u32, @2: usize) -> core::option::Option<u32>[core::marker::Sized<u32>]

impl core::iter::range::{impl core::iter::range::Step for u32}#39 : core::iter::range::Step<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for u32}#8
    parent_clause2 = core::cmp::impls::{impl core::cmp::PartialOrd<u32> for u32}#64
    fn steps_between<'_0, '_1> = core::iter::range::{impl core::iter::range::Step for u32}#39::steps_between<'_0_0, '_0_1>
    fn forward_checked = core::iter::range::{impl core::iter::range::Step for u32}#39::forward_checked
    fn backward_checked = core::iter::range::{impl core::iter::range::Step for u32}#39::backward_checked
}

pub fn test_crate::loop_inside_if(@1: bool, @2: u32) -> u32
{
    let @0: u32; // return
    let b@1: bool; // arg #1
    let n@2: u32; // arg #2
    let @3: bool; // anonymous local
    let s@4: u32; // local
    let @5: (); // anonymous local
    let @6: core::ops::range::Range<u32>[core::marker::Sized<u32>]; // anonymous local
    let @7: core::ops::range::Range<u32>[core::marker::Sized<u32>]; // anonymous local
    let @8: u32; // anonymous local
    let iter@9: core::ops::range::Range<u32>[core::marker::Sized<u32>]; // local
    let @10: (); // anonymous local
    let @11: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @12: &'_ mut (core::ops::range::Range<u32>[core::marker::Sized<u32>]); // anonymous local
    let @13: &'_ mut (core::ops::range::Range<u32>[core::marker::Sized<u32>]); // anonymous local
    let i@14: u32; // local
    let @15: u32; // anonymous local

    storage_live(s@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(iter@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(i@14)
    storage_live(@15)
    storage_live(@3)
    @3 := copy (b@1)
    if move (@3) {
        storage_live(s@4)
        s@4 := const (0 : u32)
        storage_live(@5)
        storage_live(@6)
        storage_live(@7)
        storage_live(@8)
        @8 := copy (n@2)
        @7 := core::ops::range::Range { start: const (0 : u32), end: move (@8) }
        storage_dead(@8)
        @6 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::ops::range::Range<u32>[core::marker::Sized<u32>]>[core::marker::Sized<core::ops::range::Range<u32>[core::marker::Sized<u32>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<u32>[core::marker::Sized<u32>, core::iter::range::{impl core::iter::range::Step for u32}#39]](move (@7))
        storage_dead(@7)
        storage_live(iter@9)
        iter@9 := move (@6)
        loop {
            storage_live(@10)
            storage_live(@11)
            storage_live(@12)
            storage_live(@13)
            @13 := &mut iter@9
            @12 := &two-phase-mut *(@13)
            @11 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_, u32>[core::marker::Sized<u32>, core::iter::range::{impl core::iter::range::Step for u32}#39](move (@12))
            storage_dead(@12)
            match @11 {
                0 => {
                    break 0
                },
                1 => {
                    storage_live(i@14)
                    i@14 := copy ((@11 as variant @1).0)
                    storage_live(@15)
                    @15 := copy (i@14)
                    s@4 := copy (s@4) + move (@15)
                    storage_dead(@15)
                    storage_dead(i@14)
                    storage_dead(@13)
                    storage_dead(@11)
                    storage_dead(@10)
                    continue 0
                },
            }
        }
        storage_dead(@13)
        storage_dead(@11)
        storage_dead(@10)
        storage_dead(iter@9)
        storage_dead(@6)
        storage_dead(@5)
        @0 := copy (s@4)
        storage_dead(s@4)
    }
    else {
        @0 := const (0 : u32)
    }
    storage_dead(@3)
    return
}

pub fn test_crate::sum(@1: u32) -> u32
{
    let @0: u32; // return
    let max@1: u32; // arg #1
    let i@2: u32; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: (); // anonymous local

    storage_live(@8)
    storage_live(i@2)
    i@2 := const (0 : u32)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    loop {
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@2)
        storage_live(@7)
        @7 := copy (max@1)
        @5 := move (@6) < move (@7)
        if move (@5) {
            storage_dead(@7)
            storage_dead(@6)
            storage_live(@8)
            @8 := copy (i@2)
            s@3 := copy (s@3) + move (@8)
            storage_dead(@8)
            i@2 := copy (i@2) + const (1 : u32)
            storage_dead(@5)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@7)
    storage_dead(@6)
    storage_live(@9)
    storage_dead(@9)
    storage_dead(@5)
    storage_dead(@4)
    s@3 := copy (s@3) * const (2 : u32)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

pub fn test_crate::sum_array<const N : usize>(@1: Array<u32, const N : usize>) -> u32
{
    let @0: u32; // return
    let a@1: Array<u32, const N : usize>; // arg #1
    let i@2: usize; // local
    let s@3: u32; // local
    let @4: (); // anonymous local
    let @5: bool; // anonymous local
    let @6: usize; // anonymous local
    let @7: u32; // anonymous local
    let @8: usize; // anonymous local
    let @9: (); // anonymous local
    let @10: &'_ (Array<u32, const N : usize>); // anonymous local
    let @11: &'_ (u32); // anonymous local

    storage_live(@7)
    storage_live(@8)
    storage_live(@10)
    storage_live(@11)
    storage_live(i@2)
    i@2 := const (0 : usize)
    storage_live(s@3)
    s@3 := const (0 : u32)
    storage_live(@4)
    loop {
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@2)
        @5 := move (@6) < const (const N : usize)
        if move (@5) {
            storage_dead(@6)
            storage_live(@7)
            storage_live(@8)
            @8 := copy (i@2)
            storage_live(@10)
            @10 := &a@1
            storage_live(@11)
            @11 := @ArrayIndexShared<'_, u32, const N : usize>(move (@10), copy (@8))
            @7 := copy (*(@11))
            s@3 := copy (s@3) + move (@7)
            storage_dead(@7)
            storage_dead(@8)
            i@2 := copy (i@2) + const (1 : usize)
            storage_dead(@5)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@6)
    storage_live(@9)
    storage_dead(@9)
    storage_dead(@5)
    storage_dead(@4)
    @0 := copy (s@3)
    storage_dead(s@3)
    storage_dead(i@2)
    return
}

#[lang_item("Vec")]
pub opaque type alloc::vec::Vec<T, A>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<A>,

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

pub fn alloc::vec::{alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause1]}#1::len<'_0, T, A>(@1: &'_0 (alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause1])) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,

pub trait core::slice::index::private_slice_index::Sealed<Self>

#[lang_item("SliceIndex")]
pub trait core::slice::index::SliceIndex<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::slice::index::private_slice_index::Sealed<Self>
    type Output
    fn get<'_0> = core::slice::index::SliceIndex::get<'_0_0, Self, T>
    fn get_mut<'_0> = core::slice::index::SliceIndex::get_mut<'_0_0, Self, T>
    fn get_unchecked = core::slice::index::SliceIndex::get_unchecked<Self, T>
    fn get_unchecked_mut = core::slice::index::SliceIndex::get_unchecked_mut<Self, T>
    fn index<'_0> = core::slice::index::SliceIndex::index<'_0_0, Self, T>
    fn index_mut<'_0> = core::slice::index::SliceIndex::index_mut<'_0_0, Self, T>
}

pub fn alloc::vec::{impl core::ops::index::IndexMut<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#14::index_mut<'_0, T, I, A>(@1: &'_0 mut (alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]), @2: I) -> &'_0 mut (@TraitClause3::Output)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<A>,
    [@TraitClause3]: core::slice::index::SliceIndex<I, Slice<T>>,

impl core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for usize} : core::slice::index::private_slice_index::Sealed<usize>

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get<'_0, T>(@1: usize, @2: &'_0 (Slice<T>)) -> core::option::Option<&'_0 (T)>[core::marker::Sized<&'_0 (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_mut<'_0, T>(@1: usize, @2: &'_0 mut (Slice<T>)) -> core::option::Option<&'_0 mut (T)>[core::marker::Sized<&'_0 mut (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_unchecked<T>(@1: usize, @2: *const Slice<T>) -> *const T
where
    [@TraitClause0]: core::marker::Sized<T>,

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_unchecked_mut<T>(@1: usize, @2: *mut Slice<T>) -> *mut T
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::index<'_0, T>(@1: usize, @2: &'_0 (Slice<T>)) -> &'_0 (T)
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::index_mut<'_0, T>(@1: usize, @2: &'_0 mut (Slice<T>)) -> &'_0 mut (T)
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2<T> : core::slice::index::SliceIndex<usize, Slice<T>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for usize}
    type Output = T
    fn get<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get<'_0_0, T>[@TraitClause0]
    fn get_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_mut<'_0_0, T>[@TraitClause0]
    fn get_unchecked = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_unchecked<T>[@TraitClause0]
    fn get_unchecked_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::get_unchecked_mut<T>[@TraitClause0]
    fn index<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::index<'_0_0, T>[@TraitClause0]
    fn index_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2::index_mut<'_0_0, T>[@TraitClause0]
}

pub fn test_crate::clear<'_0>(@1: &'_0 mut (alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>]))
{
    let @0: (); // return
    let v@1: &'_ mut (alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>]); // arg #1
    let i@2: usize; // local
    let @3: bool; // anonymous local
    let @4: usize; // anonymous local
    let @5: usize; // anonymous local
    let @6: &'_ (alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>]); // anonymous local
    let @7: &'_ mut (u32); // anonymous local
    let @8: &'_ mut (alloc::vec::Vec<u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>]); // anonymous local
    let @9: usize; // anonymous local
    let @10: (); // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(i@2)
    i@2 := const (0 : usize)
    loop {
        storage_live(@3)
        storage_live(@4)
        @4 := copy (i@2)
        storage_live(@5)
        storage_live(@6)
        @6 := &*(v@1)
        @5 := alloc::vec::{alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause1]}#1::len<'_, u32, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<alloc::alloc::Global>](move (@6))
        storage_dead(@6)
        @3 := move (@4) < move (@5)
        if move (@3) {
            storage_dead(@5)
            storage_dead(@4)
            storage_live(@7)
            storage_live(@8)
            @8 := &mut *(v@1)
            storage_live(@9)
            @9 := copy (i@2)
            @7 := alloc::vec::{impl core::ops::index::IndexMut<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#14::index_mut<'_, u32, usize, alloc::alloc::Global>[core::marker::Sized<u32>, core::marker::Sized<usize>, core::marker::Sized<alloc::alloc::Global>, core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for usize}#2<u32>[core::marker::Sized<u32>]](move (@8), move (@9))
            storage_dead(@9)
            storage_dead(@8)
            *(@7) := const (0 : u32)
            storage_dead(@7)
            i@2 := copy (i@2) + const (1 : usize)
            storage_dead(@3)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@10)
    @0 := ()
    storage_dead(@10)
    storage_dead(@3)
    storage_dead(i@2)
    @0 := ()
    return
}

pub enum test_crate::List<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  Cons(T, alloc::boxed::Box<test_crate::List<T>[@TraitClause0]>[core::marker::Sized<alloc::alloc::Global>])
|  Nil()


pub fn test_crate::get_elem_mut<'_0>(@1: &'_0 mut (test_crate::List<usize>[core::marker::Sized<usize>]), @2: usize) -> &'_0 mut (usize)
{
    let @0: &'_ mut (usize); // return
    let ls@1: &'_ mut (test_crate::List<usize>[core::marker::Sized<usize>]); // arg #1
    let x@2: usize; // arg #2
    let y@3: &'_ mut (usize); // local
    let tl@4: &'_ mut (alloc::boxed::Box<test_crate::List<usize>[core::marker::Sized<usize>]>[core::marker::Sized<alloc::alloc::Global>]); // local
    let @5: bool; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let @8: &'_ mut (test_crate::List<usize>[core::marker::Sized<usize>]); // anonymous local

    storage_live(y@3)
    storage_live(tl@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    loop {
        match *(ls@1) {
            0 => {
                storage_live(y@3)
                y@3 := &mut (*(ls@1) as variant @0).0
                storage_live(tl@4)
                tl@4 := &mut (*(ls@1) as variant @0).1
                storage_live(@5)
                storage_live(@6)
                @6 := copy (*(y@3))
                storage_live(@7)
                @7 := copy (x@2)
                @5 := move (@6) == move (@7)
                if move (@5) {
                }
                else {
                    storage_dead(@7)
                    storage_dead(@6)
                    storage_live(@8)
                    @8 := &mut *(*(tl@4))
                    ls@1 := move (@8)
                    storage_dead(@8)
                    storage_dead(@5)
                    storage_dead(tl@4)
                    storage_dead(y@3)
                    continue 0
                }
                storage_dead(@7)
                storage_dead(@6)
                @0 := &mut *(y@3)
                storage_dead(@5)
                storage_dead(tl@4)
                storage_dead(y@3)
                return
            },
            1 => {
                panic(core::panicking::panic_explicit)
            },
        }
    }
}

pub fn test_crate::list_nth_mut_loop_with_id<'_0, T>(@1: &'_0 mut (test_crate::List<T>[@TraitClause0]), @2: u32) -> &'_0 mut (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ mut (T); // return
    let ls@1: &'_ mut (test_crate::List<T>[@TraitClause0]); // arg #1
    let i@2: u32; // arg #2
    let @3: (); // anonymous local
    let x@4: &'_ mut (T); // local
    let tl@5: &'_ mut (alloc::boxed::Box<test_crate::List<T>[@TraitClause0]>[core::marker::Sized<alloc::alloc::Global>]); // local
    let @6: bool; // anonymous local
    let @7: u32; // anonymous local
    let @8: &'_ mut (test_crate::List<T>[@TraitClause0]); // anonymous local
    let @9: (); // anonymous local

    storage_live(x@4)
    storage_live(tl@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@3)
    loop {
        match *(ls@1) {
            0 => {
                storage_live(x@4)
                x@4 := &mut (*(ls@1) as variant @0).0
                storage_live(tl@5)
                tl@5 := &mut (*(ls@1) as variant @0).1
                storage_live(@6)
                storage_live(@7)
                @7 := copy (i@2)
                @6 := move (@7) == const (0 : u32)
                if move (@6) {
                }
                else {
                    storage_dead(@7)
                    storage_live(@8)
                    @8 := &mut *(*(tl@5))
                    ls@1 := move (@8)
                    storage_dead(@8)
                    i@2 := copy (i@2) - const (1 : u32)
                    storage_dead(@6)
                    storage_dead(tl@5)
                    storage_dead(x@4)
                    continue 0
                }
                storage_dead(@7)
                @0 := &mut *(x@4)
                storage_dead(@6)
                storage_dead(tl@5)
                storage_dead(x@4)
                storage_dead(@3)
                return
            },
            _ => {
                storage_live(@9)
                storage_dead(@9)
                storage_dead(@3)
                panic(core::panicking::panic_explicit)
            },
        }
    }
}

#[lang_item("IntoIterator")]
pub trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause2::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>
}

#[lang_item("into_iter")]
pub fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

impl core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    parent_clause2 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>[@TraitClause0, @TraitClause1]
}

#[lang_item("next")]
pub fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

#[lang_item("index")]
pub trait core::ops::index::Index<Self, Idx>
{
    type Output
    fn index<'_0> = core::ops::index::Index::index<'_0_0, Self, Idx>
}

#[lang_item("index_mut")]
pub trait core::ops::index::IndexMut<Self, Idx>
{
    parent_clause0 : [@TraitClause0]: core::ops::index::Index<Self, Idx>
    fn index_mut<'_0> = core::ops::index::IndexMut::index_mut<'_0_0, Self, Idx>
}

pub fn core::ops::index::IndexMut::index_mut<'_0, Self, Idx>(@1: &'_0 mut (Self), @2: Idx) -> &'_0 mut (Self::parent_clause0::Output)

pub fn alloc::vec::{impl core::ops::index::Index<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#13::index<'_0, T, I, A>(@1: &'_0 (alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]), @2: I) -> &'_0 (@TraitClause3::Output)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<A>,
    [@TraitClause3]: core::slice::index::SliceIndex<I, Slice<T>>,

impl alloc::vec::{impl core::ops::index::Index<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#13<T, I, A> : core::ops::index::Index<alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2], I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<A>,
    [@TraitClause3]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    type Output = @TraitClause3::Output
    fn index<'_0> = alloc::vec::{impl core::ops::index::Index<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#13::index<'_0_0, T, I, A>[@TraitClause0, @TraitClause1, @TraitClause2, @TraitClause3]
}

impl alloc::vec::{impl core::ops::index::IndexMut<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#14<T, I, A> : core::ops::index::IndexMut<alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2], I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::marker::Sized<A>,
    [@TraitClause3]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    parent_clause0 = alloc::vec::{impl core::ops::index::Index<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#13<T, I, A>[@TraitClause0, @TraitClause1, @TraitClause2, @TraitClause3]
    fn index_mut<'_0> = alloc::vec::{impl core::ops::index::IndexMut<I> for alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause2]}#14::index_mut<'_0_0, T, I, A>[@TraitClause0, @TraitClause1, @TraitClause2, @TraitClause3]
}

pub fn core::iter::range::Step::steps_between<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::Step::forward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

pub fn core::iter::range::Step::backward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

#[lang_item("Ord")]
pub trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

pub trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

#[lang_item("FromIterator")]
pub trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::FromIterator::from_iter<Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("FromResidual")]
pub trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual = core::ops::try_trait::FromResidual::from_residual<Self, R>
}

#[lang_item("ControlFlow")]
pub enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


#[lang_item("Try")]
pub trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = core::ops::try_trait::Try::from_output<Self>
    fn branch = core::ops::try_trait::Try::branch<Self>
}

pub trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause2::Output = O,
    Self::parent_clause2::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::Try<Self::TryType>
    type TryType
}

pub trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend<'_0, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::Extend::extend<'_0_0, Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("Default")]
pub trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

#[lang_item("DoubleEndedIterator")]
pub trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0_0, Self>
}

pub trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

pub trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("default_fn")]
pub fn core::default::Default::default<Self>() -> Self

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

#[lang_item("from_output")]
pub fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

#[lang_item("branch")]
pub fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

#[lang_item("from_residual")]
pub fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

pub fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

#[lang_item("from_iter_fn")]
pub fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]

pub fn core::slice::index::SliceIndex::get<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> core::option::Option<&'_0 (Self::Output)>[core::marker::Sized<&'_0 (Self::Output)>]

pub fn core::slice::index::SliceIndex::get_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> core::option::Option<&'_0 mut (Self::Output)>[core::marker::Sized<&'_0 mut (Self::Output)>]

pub unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(@1: Self, @2: *const T) -> *const Self::Output

pub unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(@1: Self, @2: *mut T) -> *mut Self::Output

pub fn core::slice::index::SliceIndex::index<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> &'_0 (Self::Output)

pub fn core::slice::index::SliceIndex::index_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> &'_0 mut (Self::Output)

pub fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (Self::Output)



