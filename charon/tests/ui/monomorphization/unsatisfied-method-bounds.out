# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<A>
#[lang_item("meta_sized")]
pub trait MetaSized::<A>

// Full name: core::marker::MetaSized::<B>
#[lang_item("meta_sized")]
pub trait MetaSized::<B>

// Full name: alloc::string::String
#[lang_item("String")]
pub opaque type String

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun1()

// Full name: test_crate::A
struct A {}

// Full name: test_crate::MyIterator::<A>
trait MyIterator::<A>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<A>
    fn method<'_0> = method::<A><'_0_0>
    vtable: test_crate::MyIterator::{vtable}::<A><String>
}

// Full name: test_crate::B
struct B {}

// Full name: test_crate::MyIterator::<B>
trait MyIterator::<B>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<B>
    fn method<'_0> = method::<B><'_0_0>
    vtable: test_crate::MyIterator::{vtable}::<B><u8>
}

// Full name: test_crate::MyIterator::method
fn method<'_0>(@1: &'_0 (A))
{
    let @0: (); // return
    let self@1: &'_ (A); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::MyIterator::method
fn method<'_0>(@1: &'_0 (B))
{
    let @0: (); // return
    let self@1: &'_ (B); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::MyIterator::method::<A>
fn method::<A><'_0>(@1: &'_0 (A))
{
    let @0: (); // return
    let self@1: &'_ (A); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::MyIterator::method::<B>
fn method::<B><'_0>(@1: &'_0 (B))
{
    let @0: (); // return
    let self@1: &'_ (B); // arg #1

    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl MyIterator::<A>}::<A><'_0>(@1: &'_0 (A))
{
    let @0: (); // return
    let self@1: &'_ (A); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl MyIterator::<A>}
impl MyIterator::<A> {
    parent_clause0 = MetaSized::<A>
    fn method<'_0> = test_crate::{impl MyIterator::<A>}::<A><'_0_0>
    vtable: {impl MyIterator::<A>}::{vtable}
}

fn test_crate::{impl MyIterator::<B>}::<B><'_0>(@1: &'_0 (B))
{
    let @0: (); // return
    let self@1: &'_ (B); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl MyIterator::<B>}
impl MyIterator::<B> {
    parent_clause0 = MetaSized::<B>
    fn method<'_0> = test_crate::{impl MyIterator::<B>}::<B><'_0_0>
    vtable: {impl MyIterator::<B>}::{vtable}
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: &'_ (A); // anonymous local
    let @3: A; // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (B); // anonymous local
    let @6: B; // anonymous local

    @0 := ()
    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @3 := A {  }
    @2 := &@3
    @1 := test_crate::{impl MyIterator::<A>}::<A><'_>(move (@2))
    storage_dead(@2)
    storage_dead(@3)
    storage_dead(@1)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := B {  }
    @5 := &@6
    @4 := test_crate::{impl MyIterator::<B>}::<B><'_>(move (@5))
    storage_dead(@5)
    storage_dead(@6)
    storage_dead(@4)
    @0 := ()
    return
}



