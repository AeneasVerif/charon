# Final LLBC before serialization:

struct test_crate::Thing = {}

struct test_crate::main::closure =
{
  &'_ (u8),
}

struct test_crate::main::closure#1 =
{
  &'_ mut (u8),
}

struct test_crate::main::closure#2 =
{
  test_crate::Thing,
}

fn test_crate::apply_to_zero<impl Fn(u8) -> u8>(@1: test_crate::main::closure) -> u8
where
    [@TraitClause0]: core::marker::Sized<test_crate::main::closure>,
    [@TraitClause1]: core::ops::function::Fn<test_crate::main::closure, (u8)>,
    test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}::parent_clause0::parent_clause0::Output = u8,
{
    let @0: u8; // return
    let f@1: test_crate::main::closure; // arg #1
    let @2: &'_ (test_crate::main::closure); // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := &f@1
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}::call<'_, test_crate::main::closure, (u8)>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>
}

fn test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}::call<'_0>(@1: &'_0 (test_crate::main::closure), @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: &'_ (test_crate::main::closure); // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: u8; // anonymous local
    let @5: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (x@3)
    storage_live(@5)
    @5 := copy (*((*(@1)).0))
    @0 := copy (@4) + copy (@5)
    storage_dead(@5)
    storage_dead(@4)
    return
}

fn test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::call_once(@1: test_crate::main::closure, @2: (u8)) -> u8
{
    let @0: u8; // return
    let state@1: test_crate::main::closure; // arg #1
    let args@2: (u8); // arg #2
    let temp_ref@3: &'_ (test_crate::main::closure); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &state@1
    @0 := test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}::call<'_>(move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure} : core::ops::function::FnOnce<test_crate::main::closure, ((u8))>
{
    parent_clause0 = core::marker::Sized<((u8))>
    parent_clause1 = core::marker::Tuple<((u8))>
    parent_clause2 = core::marker::Sized<u8>
    type Output = u8
    fn call_once = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::call_once
}

impl test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure} : core::ops::function::FnMut<test_crate::main::closure, ((u8))>
{
    parent_clause0 = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}
    parent_clause1 = core::marker::Sized<((u8))>
    parent_clause2 = core::marker::Tuple<((u8))>
    fn call_mut<'_0> = test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure}::call_mut<'_>
}

impl test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure} : core::ops::function::Fn<test_crate::main::closure, ((u8))>
{
    parent_clause0 = test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure}
    parent_clause1 = core::marker::Sized<((u8))>
    parent_clause2 = core::marker::Tuple<((u8))>
    fn call<'_0> = test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}::call<'_>
}

fn test_crate::apply_to_zero_mut<impl FnMut(u8) -> u8>(@1: test_crate::main::closure#1) -> u8
where
    [@TraitClause0]: core::marker::Sized<test_crate::main::closure#1>,
    [@TraitClause1]: core::ops::function::FnMut<test_crate::main::closure#1, (u8)>,
    test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}::parent_clause0::Output = u8,
{
    let @0: u8; // return
    let f@1: test_crate::main::closure#1; // arg #1
    let @2: &'_ mut (test_crate::main::closure#1); // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := &mut f@1
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}::call_mut<'_, test_crate::main::closure#1, (u8)>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

fn test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}::call_mut<'_0>(@1: &'_0 mut (test_crate::main::closure#1), @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: &'_ mut (test_crate::main::closure#1); // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: u8; // anonymous local
    let @5: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    *((*(@1)).0) := copy (*((*(@1)).0)) + const (1 : u8)
    storage_live(@4)
    @4 := copy (x@3)
    storage_live(@5)
    @5 := copy (*((*(@1)).0))
    @0 := copy (@4) + copy (@5)
    storage_dead(@5)
    storage_dead(@4)
    return
}

fn test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#1}::call_once(@1: test_crate::main::closure#1, @2: (u8)) -> u8
{
    let @0: u8; // return
    let state@1: test_crate::main::closure#1; // arg #1
    let args@2: (u8); // arg #2
    let temp_ref@3: &'_ mut (test_crate::main::closure#1); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &mut state@1
    @0 := test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}::call_mut<'_>(move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#1} : core::ops::function::FnOnce<test_crate::main::closure#1, ((u8))>
{
    parent_clause0 = core::marker::Sized<((u8))>
    parent_clause1 = core::marker::Tuple<((u8))>
    parent_clause2 = core::marker::Sized<u8>
    type Output = u8
    fn call_once = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#1}::call_once
}

impl test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1} : core::ops::function::FnMut<test_crate::main::closure#1, ((u8))>
{
    parent_clause0 = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#1}
    parent_clause1 = core::marker::Sized<((u8))>
    parent_clause2 = core::marker::Tuple<((u8))>
    fn call_mut<'_0> = test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}::call_mut<'_>
}

fn test_crate::apply_to_zero_once<impl FnOnce(u8) -> u8>(@1: test_crate::main::closure#2) -> u8
where
    [@TraitClause0]: core::marker::Sized<test_crate::main::closure#2>,
    [@TraitClause1]: core::ops::function::FnOnce<test_crate::main::closure#2, (u8)>,
    test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2}::Output = u8,
{
    let @0: u8; // return
    let f@1: test_crate::main::closure#2; // arg #1
    let @2: test_crate::main::closure#2; // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2}::call_once<test_crate::main::closure#2, (u8)>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

#[lang_item("mem_drop")]
pub fn core::mem::drop<T>(@1: test_crate::Thing)
where
    [@TraitClause0]: core::marker::Sized<test_crate::Thing>,

fn test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2}::call_once(@1: test_crate::main::closure#2, @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: test_crate::main::closure#2; // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: (); // anonymous local
    let @5: test_crate::Thing; // anonymous local
    let @6: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := move ((@1).0)
    @4 := core::mem::drop<test_crate::Thing>[core::marker::Sized<test_crate::Thing>](move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (x@3)
    @0 := copy (@6) + const (1 : u8)
    storage_dead(@6)
    return
}

impl test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2} : core::ops::function::FnOnce<test_crate::main::closure#2, ((u8))>
{
    parent_clause0 = core::marker::Sized<((u8))>
    parent_clause1 = core::marker::Tuple<((u8))>
    parent_clause2 = core::marker::Sized<u8>
    type Output = u8
    fn call_once = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2}::call_once
}

fn test_crate::main()
{
    let @0: (); // return
    let z@1: u8; // local
    let @2: u8; // anonymous local
    let @3: test_crate::main::closure; // anonymous local
    let @4: &'_ (u8); // anonymous local
    let z@5: u8; // local
    let @6: u8; // anonymous local
    let @7: test_crate::main::closure#1; // anonymous local
    let @8: &'_ mut (u8); // anonymous local
    let z@9: test_crate::Thing; // local
    let @10: u8; // anonymous local
    let @11: test_crate::main::closure#2; // anonymous local

    storage_live(z@1)
    z@1 := const (1 : u8)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &z@1
    @3 := test_crate::main::closure { 0: move (@4) }
    storage_dead(@4)
    @2 := test_crate::apply_to_zero<test_crate::main::closure>[core::marker::Sized<test_crate::main::closure>, test_crate::main::{impl core::ops::function::Fn<((u8))> for test_crate::main::closure}](move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(z@5)
    z@5 := const (3 : u8)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &mut z@5
    @7 := test_crate::main::closure#1 { 0: move (@8) }
    storage_dead(@8)
    @6 := test_crate::apply_to_zero_mut<test_crate::main::closure#1>[core::marker::Sized<test_crate::main::closure#1>, test_crate::main::{impl core::ops::function::FnMut<((u8))> for test_crate::main::closure#1}](move (@7))
    storage_dead(@7)
    storage_dead(@6)
    storage_live(z@9)
    z@9 := test_crate::Thing {  }
    storage_live(@10)
    storage_live(@11)
    @11 := test_crate::main::closure#2 { 0: move (z@9) }
    @10 := test_crate::apply_to_zero_once<test_crate::main::closure#2>[core::marker::Sized<test_crate::main::closure#2>, test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure#2}](move (@11))
    storage_dead(@11)
    storage_dead(@10)
    @0 := ()
    storage_dead(z@9)
    storage_dead(z@5)
    storage_dead(z@1)
    @0 := ()
    return
}



