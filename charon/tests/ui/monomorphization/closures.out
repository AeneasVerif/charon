# Final LLBC before serialization:

// Full name: test_crate::Thing
struct Thing {}

struct test_crate::main::closure::<'_> {
  &'_ (u8),
}

struct test_crate::main::closure#1::<'_> {
  &'_ mut (u8),
}

struct test_crate::main::closure#2 {
  Thing,
}

fn test_crate::apply_to_zero::<test_crate::main::closure::<'_>>(@1: test_crate::main::closure::<'_>) -> u8
{
    let @0: u8; // return
    let f@1: test_crate::main::closure::<'_>; // arg #1
    let @2: &'_ (test_crate::main::closure::<'_>); // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := &f@1
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := {impl Fn<(u8)> for test_crate::main::closure<'_0>}<'_>::call(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

fn test_crate::apply_to_zero_mut::<test_crate::main::closure#1::<'_>>(@1: test_crate::main::closure#1::<'_>) -> u8
{
    let @0: u8; // return
    let f@1: test_crate::main::closure#1::<'_>; // arg #1
    let @2: &'_ mut (test_crate::main::closure#1::<'_>); // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := &mut f@1
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := {impl FnMut<(u8)> for test_crate::main::closure#1<'_0>}<'_>::call_mut(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

fn test_crate::apply_to_zero_once::<test_crate::main::closure#2>(@1: test_crate::main::closure#2) -> u8
{
    let @0: u8; // return
    let f@1: test_crate::main::closure#2; // arg #1
    let @2: test_crate::main::closure#2; // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := {impl FnOnce<(u8)> for test_crate::main::closure#2}::call_once(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let z@1: u8; // local
    let @2: u8; // anonymous local
    let @3: test_crate::main::closure::<'_>; // anonymous local
    let @4: &'_ (u8); // anonymous local
    let z@5: u8; // local
    let @6: u8; // anonymous local
    let @7: test_crate::main::closure#1::<'_>; // anonymous local
    let @8: &'_ mut (u8); // anonymous local
    let z@9: Thing; // local
    let @10: u8; // anonymous local
    let @11: test_crate::main::closure#2; // anonymous local

    storage_live(z@1)
    z@1 := const (1 : u8)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &z@1
    @3 := test_crate::main::closure::<'_> { 0: move (@4) }
    storage_dead(@4)
    @2 := test_crate::apply_to_zero::<test_crate::main::closure<'_>>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(z@5)
    z@5 := const (3 : u8)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &mut z@5
    @7 := test_crate::main::closure#1::<'_> { 0: move (@8) }
    storage_dead(@8)
    @6 := test_crate::apply_to_zero_mut::<test_crate::main::closure#1<'_>>(move (@7))
    storage_dead(@7)
    storage_dead(@6)
    storage_live(z@9)
    z@9 := Thing {  }
    storage_live(@10)
    storage_live(@11)
    @11 := test_crate::main::closure#2 { 0: move (z@9) }
    @10 := test_crate::apply_to_zero_once::<test_crate::main::closure#2>(move (@11))
    storage_dead(@11)
    storage_dead(@10)
    @0 := ()
    storage_dead(z@9)
    storage_dead(z@5)
    storage_dead(z@1)
    @0 := ()
    return
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: Sized<Args>
    parent_clause1 : [@TraitClause1]: Tuple<Args>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>[Self]
}

// Full name: core::ops::function::Fn
#[lang_item("r#fn")]
pub trait Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: FnMut<Self, Args>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>[Self]
}

// Full name: test_crate::main::{impl FnOnce<(u8)> for test_crate::main::closure<'_0>}
impl<'_0> FnOnce<(u8)> for test_crate::main::closure<'_0> {
    parent_clause0 = Sized<(u8)>
    parent_clause1 = Tuple<(u8)>
    parent_clause2 = Sized<u8>
    type Output = u8
    fn call_once = {impl FnOnce<(u8)> for test_crate::main::closure<'_0>}::call_once<'_0>
}

// Full name: test_crate::main::{impl FnMut<(u8)> for test_crate::main::closure<'_0>}
impl<'_0> FnMut<(u8)> for test_crate::main::closure<'_0> {
    parent_clause0 = {impl FnOnce<(u8)> for test_crate::main::closure<'_0>}<'_0>
    parent_clause1 = Sized<(u8)>
    parent_clause2 = Tuple<(u8)>
    fn call_mut<'_0> = {impl FnMut<(u8)> for test_crate::main::closure<'_0>}::call_mut<'_0, '_0_0>
}

// Full name: test_crate::main::{impl Fn<(u8)> for test_crate::main::closure<'_0>}
impl<'_0> Fn<(u8)> for test_crate::main::closure<'_0> {
    parent_clause0 = {impl FnMut<(u8)> for test_crate::main::closure<'_0>}<'_0>
    parent_clause1 = Sized<(u8)>
    parent_clause2 = Tuple<(u8)>
    fn call<'_0> = {impl Fn<(u8)> for test_crate::main::closure<'_0>}::call<'_0, '_0_0>
}

// Full name: test_crate::main::{impl FnOnce<(u8)> for test_crate::main::closure#1<'_0>}
impl<'_0> FnOnce<(u8)> for test_crate::main::closure#1<'_0> {
    parent_clause0 = Sized<(u8)>
    parent_clause1 = Tuple<(u8)>
    parent_clause2 = Sized<u8>
    type Output = u8
    fn call_once = {impl FnOnce<(u8)> for test_crate::main::closure#1<'_0>}::call_once<'_0>
}

// Full name: test_crate::main::{impl FnMut<(u8)> for test_crate::main::closure#1<'_0>}
impl<'_0> FnMut<(u8)> for test_crate::main::closure#1<'_0> {
    parent_clause0 = {impl FnOnce<(u8)> for test_crate::main::closure#1<'_0>}<'_0>
    parent_clause1 = Sized<(u8)>
    parent_clause2 = Tuple<(u8)>
    fn call_mut<'_0> = {impl FnMut<(u8)> for test_crate::main::closure#1<'_0>}::call_mut<'_0, '_0_0>
}

#[lang_item("mem_drop")]
pub fn core::mem::drop::<Thing>(@1: Thing)

// Full name: test_crate::main::{impl FnOnce<(u8)> for test_crate::main::closure#2}::call_once
fn {impl FnOnce<(u8)> for test_crate::main::closure#2}::call_once(@1: test_crate::main::closure#2, @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: test_crate::main::closure#2; // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: (); // anonymous local
    let @5: Thing; // anonymous local
    let @6: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := move ((@1).0)
    @4 := core::mem::drop::<Thing>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (x@3)
    @0 := copy (@6) + const (1 : u8)
    storage_dead(@6)
    return
}

// Full name: test_crate::main::{impl FnOnce<(u8)> for test_crate::main::closure#2}
impl FnOnce<(u8)> for test_crate::main::closure#2 {
    parent_clause0 = Sized<(u8)>
    parent_clause1 = Tuple<(u8)>
    parent_clause2 = Sized<u8>
    type Output = u8
    fn call_once = {impl FnOnce<(u8)> for test_crate::main::closure#2}::call_once
}



