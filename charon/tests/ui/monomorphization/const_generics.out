# Final LLBC before serialization:

struct test_crate::Foo<T>
  where
      [@TraitClause0]: core::marker::Sized<bool>,
 =
{
  value: bool,
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

fn test_crate::FooBool() -> @Adt1<bool>[core::marker::Sized<bool>]
{
    let @0: @Adt1<bool>[core::marker::Sized<bool>]; // return

    @0 := @Adt1 { value: const (false) }
    return
}

global test_crate::FooBool: @Adt1<bool>[core::marker::Sized<bool>] = test_crate::FooBool()

fn test_crate::main()
{
    let @0: (); // return
    let _b@1: bool; // local
    let @2: &'_ (@Adt1<bool>[core::marker::Sized<bool>]); // anonymous local
    let @3: &'_ (@Adt1<bool>[core::marker::Sized<bool>]); // anonymous local

    @3 := &test_crate::FooBool
    @2 := move (@3)
    _b@1 := copy ((*(@2)).value)
    @fake_read(_b@1)
    drop @2
    @0 := ()
    drop _b@1
    @0 := ()
    return
}

struct test_crate::Foo<T>
  where
      [@TraitClause0]: core::marker::Sized<i32>,
 =
{
  value: i32,
}

fn test_crate::FooInt() -> @Adt2<i32>[core::marker::Sized<i32>]
{
    let @0: @Adt2<i32>[core::marker::Sized<i32>]; // return

    @0 := @Adt2 { value: const (0 : i32) }
    return
}



