# Final LLBC before serialization:

struct test_crate::Foo<T>
  where
      [@TraitClause0]: core::marker::Sized<bool>,
 =
{
  value: bool,
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

fn test_crate::FooBool() -> test_crate::Foo<bool>[core::marker::Sized<bool>]
{
    let @0: test_crate::Foo<bool>[core::marker::Sized<bool>]; // return

    @0 := test_crate::Foo { value: const (false) }
    return
}

static test_crate::FooBool: test_crate::Foo<bool>[core::marker::Sized<bool>] = test_crate::FooBool()

fn test_crate::main()
{
    let @0: (); // return
    let _b@1: bool; // local
    let @2: &'_ (test_crate::Foo<bool>[core::marker::Sized<bool>]); // anonymous local
    let @3: &'_ (test_crate::Foo<bool>[core::marker::Sized<bool>]); // anonymous local

    storage_live(@3)
    storage_live(_b@1)
    storage_live(@2)
    @3 := &test_crate::FooBool
    @2 := move (@3)
    _b@1 := copy ((*(@2)).value)
    storage_dead(@2)
    @0 := ()
    storage_dead(_b@1)
    @0 := ()
    return
}

struct test_crate::Foo<T>
  where
      [@TraitClause0]: core::marker::Sized<i32>,
 =
{
  value: i32,
}

fn test_crate::FooInt() -> test_crate::Foo<i32>[core::marker::Sized<i32>]
{
    let @0: test_crate::Foo<i32>[core::marker::Sized<i32>]; // return

    @0 := test_crate::Foo { value: const (0 : i32) }
    return
}



