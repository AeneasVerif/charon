# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
}

struct test_crate::Foo::<bool> {
  value: bool,
}

struct test_crate::Foo::<i32> {
  value: i32,
}

fn test_crate::FooInt() -> test_crate::Foo::<i32>
{
    let @0: test_crate::Foo::<i32>; // return

    @0 := test_crate::Foo::<i32> { value: const (0 : i32) }
    return
}

fn test_crate::FooBool() -> test_crate::Foo::<bool>
{
    let @0: test_crate::Foo::<bool>; // return

    @0 := test_crate::Foo::<bool> { value: const (false) }
    return
}

static test_crate::FooBool: test_crate::Foo::<bool> = test_crate::FooBool()

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let _b@1: bool; // local
    let @2: &'_ (test_crate::Foo::<bool>); // anonymous local
    let @3: &'_ (test_crate::Foo::<bool>); // anonymous local

    storage_live(@3)
    storage_live(_b@1)
    storage_live(@2)
    @3 := &test_crate::FooBool
    @2 := move (@3)
    _b@1 := copy ((*(@2)).value)
    storage_dead(@2)
    @0 := ()
    storage_dead(_b@1)
    @0 := ()
    return
}



