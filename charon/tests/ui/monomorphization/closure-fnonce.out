# Final LLBC before serialization:

struct test_crate::NotCopy = {}

struct test_crate::main::closure =
{
  test_crate::NotCopy,
}

fn test_crate::apply_to_zero_once<impl FnOnce(u8) -> u8>(@1: test_crate::main::closure) -> u8
where
    [@TraitClause0]: core::marker::Sized<test_crate::main::closure>,
    [@TraitClause1]: core::ops::function::FnOnce<test_crate::main::closure, (u8)>,
    test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::Output = u8,
{
    let @0: u8; // return
    let f@1: test_crate::main::closure; // arg #1
    let @2: test_crate::main::closure; // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::call_once<test_crate::main::closure, (u8)>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("mem_drop")]
pub fn core::mem::drop<T>(@1: test_crate::NotCopy)
where
    [@TraitClause0]: core::marker::Sized<test_crate::NotCopy>,

fn test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::call_once(@1: test_crate::main::closure, @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: test_crate::main::closure; // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: (); // anonymous local
    let @5: test_crate::NotCopy; // anonymous local
    let @6: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := move ((@1).0)
    @4 := core::mem::drop<test_crate::NotCopy>[core::marker::Sized<test_crate::NotCopy>](move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (x@3)
    @0 := copy (@6) + const (1 : u8)
    storage_dead(@6)
    return
}

impl test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure} : core::ops::function::FnOnce<test_crate::main::closure, ((u8))>
{
    parent_clause0 = core::marker::Sized<((u8))>
    parent_clause1 = core::marker::Tuple<((u8))>
    parent_clause2 = core::marker::Sized<u8>
    type Output = u8
    fn call_once = test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}::call_once
}

fn test_crate::main()
{
    let @0: (); // return
    let z@1: test_crate::NotCopy; // local
    let @2: u8; // anonymous local
    let @3: test_crate::main::closure; // anonymous local

    storage_live(z@1)
    z@1 := test_crate::NotCopy {  }
    storage_live(@2)
    storage_live(@3)
    @3 := test_crate::main::closure { 0: move (z@1) }
    @2 := test_crate::apply_to_zero_once<test_crate::main::closure>[core::marker::Sized<test_crate::main::closure>, test_crate::main::{impl core::ops::function::FnOnce<((u8))> for test_crate::main::closure}](move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    storage_dead(z@1)
    @0 := ()
    return
}



