# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<closure>
#[lang_item("meta_sized")]
pub trait MetaSized::<closure>

// Full name: core::marker::Sized::<closure>
#[lang_item("sized")]
pub trait Sized::<closure>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<closure>
    non-dyn-compatible
}

// Full name: core::marker::MetaSized::<(u8)>
#[lang_item("meta_sized")]
pub trait MetaSized::<(u8)>

// Full name: core::marker::Sized::<(u8)>
#[lang_item("sized")]
pub trait Sized::<(u8)>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<(u8)>
    non-dyn-compatible
}

// Full name: core::marker::MetaSized::<NotCopy>
#[lang_item("meta_sized")]
pub trait MetaSized::<NotCopy>

// Full name: core::marker::Sized::<NotCopy>
#[lang_item("sized")]
pub trait Sized::<NotCopy>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<NotCopy>
    non-dyn-compatible
}

// Full name: core::marker::Tuple::<(u8)>
#[lang_item("tuple_trait")]
pub trait Tuple::<(u8)>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<(u8)>
    vtable: core::marker::Tuple::{vtable}::<(u8)>
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun1()

// Full name: test_crate::NotCopy
struct NotCopy {}

// Full name: core::ops::drop::Drop::<NotCopy>
#[lang_item("drop")]
pub trait Drop::<NotCopy>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<NotCopy>
    fn drop<'_0> = core::ops::drop::Drop::drop::<NotCopy><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<NotCopy>
}

// Full name: test_crate::NotCopy::{impl Drop::<NotCopy>}
impl Drop::<NotCopy> {
    parent_clause0 = MetaSized::<NotCopy>
    fn drop<'_0> = {impl Drop::<NotCopy>}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::NotCopy::{impl Drop::<NotCopy>}::drop
fn {impl Drop::<NotCopy>}::drop<'_0>(@1: &'_0 mut (NotCopy))
{
    let @0: (); // return
    let @1: *mut NotCopy; // arg #1
    let @2: &'_ mut (NotCopy); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

#[lang_item("mem_drop")]
pub fn core::mem::drop::<NotCopy>(@1: NotCopy)

// Full name: core::ops::drop::Drop::<closure>
#[lang_item("drop")]
pub trait Drop::<closure>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<closure>
    fn drop<'_0> = core::ops::drop::Drop::drop::<closure><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<closure>
}

// Full name: test_crate::main::closure
struct closure {
  NotCopy,
}

// Full name: test_crate::main::closure::{impl Drop::<closure>}
impl Drop::<closure> {
    parent_clause0 = MetaSized::<closure>
    fn drop<'_0> = {impl Drop::<closure>}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main::closure::{impl Drop::<closure>}::drop
fn {impl Drop::<closure>}::drop<'_0>(@1: &'_0 mut (closure))
{
    let @0: (); // return
    let @1: *mut closure; // arg #1
    let @2: &'_ mut (closure); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

pub fn core::ops::drop::Drop::drop::<NotCopy><'_0>(@1: &'_0 mut (NotCopy))

pub fn core::ops::drop::Drop::drop::<closure><'_0>(@1: &'_0 mut (closure))

// Full name: core::ops::function::FnOnce::<closure, (u8)>
#[lang_item("fn_once")]
pub trait FnOnce::<closure, (u8)>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<closure>
    parent_clause1 : [@TraitClause1]: Sized::<(u8)>
    parent_clause2 : [@TraitClause2]: Tuple::<(u8)>
    fn call_once = core::ops::function::FnOnce::call_once::<closure, (u8)>
    vtable: core::ops::function::FnOnce::{vtable}::<closure, (u8)><u8>
}

pub fn core::ops::function::FnOnce::call_once(@1: closure, @2: (u8)) -> u8

pub fn core::ops::function::FnOnce::call_once::<closure, (u8)>(@1: closure, @2: (u8)) -> u8

// Full name: test_crate::main::{impl FnOnce::<closure, (u8)>}::call_once
fn {impl FnOnce::<closure, (u8)>}::call_once(@1: closure, @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: closure; // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: (); // anonymous local
    let @5: NotCopy; // anonymous local
    let @6: u8; // anonymous local
    let @7: u8; // anonymous local

    storage_live(x@3)
    storage_live(@7)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := move ((@1).0)
    @4 := core::mem::drop::<NotCopy>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (x@3)
    @7 := copy (@6) panic.+ const (1 : u8)
    @0 := move (@7)
    storage_dead(@6)
    return
}

// Full name: test_crate::apply_to_zero_once::<closure>
fn apply_to_zero_once::<closure>(@1: closure) -> u8
{
    let @0: u8; // return
    let f@1: closure; // arg #1
    let @2: closure; // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := {impl FnOnce::<closure, (u8)>}::call_once(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop[Drop::<closure>] f@1
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let z@1: NotCopy; // local
    let @2: u8; // anonymous local
    let @3: closure; // anonymous local

    @0 := ()
    storage_live(z@1)
    z@1 := NotCopy {  }
    storage_live(@2)
    storage_live(@3)
    @3 := closure { 0: move (z@1) }
    @2 := apply_to_zero_once::<closure>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    storage_dead(z@1)
    return
}

// Full name: test_crate::main::{impl FnOnce::<closure, (u8)>}
impl FnOnce::<closure, (u8)> {
    parent_clause0 = MetaSized::<closure>
    parent_clause1 = Sized::<(u8)>
    parent_clause2 = Tuple::<(u8)>
    fn call_once = {impl FnOnce::<closure, (u8)>}::call_once
    non-dyn-compatible
}



