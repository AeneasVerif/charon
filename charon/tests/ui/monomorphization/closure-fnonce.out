# Final LLBC before serialization:

// Full name: test_crate::NotCopy
struct NotCopy {}

// Full name: test_crate::main::closure
struct closure {
  NotCopy,
}

fn test_crate::apply_to_zero_once::<closure>(@1: closure) -> u8
{
    let @0: u8; // return
    let f@1: closure; // arg #1
    let @2: closure; // anonymous local
    let @3: (u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (0 : u8))
    @0 := {impl FnOnce<(u8)> for closure}::call_once(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let z@1: NotCopy; // local
    let @2: u8; // anonymous local
    let @3: closure; // anonymous local

    storage_live(z@1)
    z@1 := NotCopy {  }
    storage_live(@2)
    storage_live(@3)
    @3 := closure { 0: move (z@1) }
    @2 := test_crate::apply_to_zero_once::<closure>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    storage_dead(z@1)
    @0 := ()
    return
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: Sized<Args>
    parent_clause1 : [@TraitClause1]: Tuple<Args>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("mem_drop")]
pub fn core::mem::drop::<NotCopy>(@1: NotCopy)

// Full name: test_crate::main::{impl FnOnce<(u8)> for closure}::call_once
fn {impl FnOnce<(u8)> for closure}::call_once(@1: closure, @2: (u8)) -> u8
{
    let @0: u8; // return
    let @1: closure; // arg #1
    let tupled_args@2: (u8); // arg #2
    let x@3: u8; // local
    let @4: (); // anonymous local
    let @5: NotCopy; // anonymous local
    let @6: u8; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := move ((@1).0)
    @4 := core::mem::drop::<NotCopy>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (x@3)
    @0 := copy (@6) + const (1 : u8)
    storage_dead(@6)
    return
}

// Full name: test_crate::main::{impl FnOnce<(u8)> for closure}
impl FnOnce<(u8)> for closure {
    parent_clause0 = Sized<(u8)>
    parent_clause1 = Tuple<(u8)>
    parent_clause2 = Sized<u8>
    type Output = u8
    fn call_once = {impl FnOnce<(u8)> for closure}::call_once
}



