# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<i32>
#[lang_item("meta_sized")]
pub trait MetaSized::<i32>

// Full name: core::marker::Sized::<i32>
#[lang_item("sized")]
pub trait Sized::<i32>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<i32>
    non-dyn-compatible
}

// Full name: core::marker::MetaSized::<bool>
#[lang_item("meta_sized")]
pub trait MetaSized::<bool>

// Full name: core::marker::Sized::<bool>
#[lang_item("sized")]
pub trait Sized::<bool>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<bool>
    non-dyn-compatible
}

// Full name: core::marker::MetaSized::<Foo::<i32>>
#[lang_item("meta_sized")]
pub trait MetaSized::<Foo::<i32>>

// Full name: core::marker::MetaSized::<Foo::<bool>>
#[lang_item("meta_sized")]
pub trait MetaSized::<Foo::<bool>>

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun1()

// Full name: core::ops::drop::Drop::<Foo::<i32>>
#[lang_item("drop")]
pub trait Drop::<Foo::<i32>>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<Foo::<i32>>
    fn drop<'_0> = core::ops::drop::Drop::drop::<Foo::<i32>><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<Foo::<i32>>
}

// Full name: test_crate::Foo::<i32>
struct Foo::<i32> {
  value: i32,
}

// Full name: test_crate::Foo::{impl Drop::<Foo::<i32>>}::<i32>
impl Drop::<Foo::<i32>> {
    parent_clause0 = MetaSized::<Foo::<i32>>
    fn drop<'_0> = {impl Drop::<Foo::<i32>>}::drop::<i32><'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Foo::{impl Drop::<Foo::<i32>>}::drop::<i32>
fn {impl Drop::<Foo::<i32>>}::drop::<i32><'_0>(@1: &'_0 mut (Foo::<i32>))
{
    let @0: (); // return
    let @1: *mut Foo::<i32>; // arg #1
    let @2: &'_ mut (Foo::<i32>); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: core::ops::drop::Drop::<Foo::<bool>>
#[lang_item("drop")]
pub trait Drop::<Foo::<bool>>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<Foo::<bool>>
    fn drop<'_0> = core::ops::drop::Drop::drop::<Foo::<bool>><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<Foo::<bool>>
}

// Full name: test_crate::Foo::<bool>
struct Foo::<bool> {
  value: bool,
}

// Full name: test_crate::Foo::{impl Drop::<Foo::<bool>>}::<bool>
impl Drop::<Foo::<bool>> {
    parent_clause0 = MetaSized::<Foo::<bool>>
    fn drop<'_0> = {impl Drop::<Foo::<bool>>}::drop::<bool><'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Foo::{impl Drop::<Foo::<bool>>}::drop::<bool>
fn {impl Drop::<Foo::<bool>>}::drop::<bool><'_0>(@1: &'_0 mut (Foo::<bool>))
{
    let @0: (); // return
    let @1: *mut Foo::<bool>; // arg #1
    let @2: &'_ mut (Foo::<bool>); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

pub fn core::ops::drop::Drop::drop::<Foo::<i32>><'_0>(@1: &'_0 mut (Foo::<i32>))

pub fn core::ops::drop::Drop::drop::<Foo::<bool>><'_0>(@1: &'_0 mut (Foo::<bool>))

// Full name: test_crate::FooInt
fn FooInt() -> Foo::<i32>
{
    let @0: Foo::<i32>; // return

    @0 := Foo::<i32> { value: const (0 : i32) }
    return
}

// Full name: test_crate::FooInt
static FooInt: Foo::<i32> = FooInt()

// Full name: test_crate::FooBool
fn FooBool() -> Foo::<bool>
{
    let @0: Foo::<bool>; // return

    @0 := Foo::<bool> { value: const (false) }
    return
}

// Full name: test_crate::FooBool
static FooBool: Foo::<bool> = FooBool()

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let _b@1: bool; // local
    let @2: &'_ (Foo::<bool>); // anonymous local
    let @3: (); // anonymous local
    let @4: &'_ (Foo::<bool>); // anonymous local

    @0 := ()
    storage_live(_b@1)
    storage_live(@2)
    storage_live(@3)
    @3 := ()
    storage_live(@4)
    @4 := &FooBool
    @2 := move (@4)
    _b@1 := copy ((*(@2)).value)
    storage_dead(@2)
    @0 := ()
    storage_dead(_b@1)
    return
}



