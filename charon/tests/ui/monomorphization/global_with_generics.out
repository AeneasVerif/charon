# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<i32>
#[lang_item("meta_sized")]
pub trait MetaSized::<i32>

// Full name: core::marker::Sized::<i32>
#[lang_item("sized")]
pub trait Sized::<i32>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<i32>
    non-dyn-compatible
}

// Full name: core::marker::MetaSized::<bool>
#[lang_item("meta_sized")]
pub trait MetaSized::<bool>

// Full name: core::marker::Sized::<bool>
#[lang_item("sized")]
pub trait Sized::<bool>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<bool>
    non-dyn-compatible
}

// Full name: test_crate::Foo::<i32>
struct Foo::<i32> {
  value: i32,
}

// Full name: test_crate::Foo::<bool>
struct Foo::<bool> {
  value: bool,
}

// Full name: test_crate::FooInt
fn FooInt() -> Foo::<i32>
{
    let @0: Foo::<i32>; // return

    @0 := Foo::<i32> { value: const (0 : i32) }
    return
}

// Full name: test_crate::FooInt
static FooInt: Foo::<i32> = FooInt()

// Full name: test_crate::FooBool
fn FooBool() -> Foo::<bool>
{
    let @0: Foo::<bool>; // return

    @0 := Foo::<bool> { value: const (false) }
    return
}

// Full name: test_crate::FooBool
static FooBool: Foo::<bool> = FooBool()

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let _b@1: bool; // local
    let @2: &'_ (Foo::<bool>); // anonymous local
    let @3: &'_ (Foo::<bool>); // anonymous local

    storage_live(@3)
    storage_live(_b@1)
    storage_live(@2)
    @3 := &FooBool
    @2 := move (@3)
    _b@1 := copy ((*(@2)).value)
    storage_dead(@2)
    @0 := ()
    storage_dead(_b@1)
    @0 := ()
    return
}



