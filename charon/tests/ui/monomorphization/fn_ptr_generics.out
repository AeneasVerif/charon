# Final LLBC before serialization:

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<u8>,
 =
|  None()
|  Some(u8)


#[lang_item("sized")]
pub trait core::marker::Sized<Self>

fn test_crate::init_option()
{
    let @0: (); // return
    let a@1: Array<@Adt1<u8>[core::marker::Sized<u8>], 6 : usize>; // local
    let @2: @Adt1<u8>[core::marker::Sized<u8>]; // anonymous local
    let b@3: @Adt1<u8>[core::marker::Sized<u8>]; // local
    let @4: usize; // anonymous local
    let @5: &'_ (Array<@Adt1<u8>[core::marker::Sized<u8>], 6 : usize>); // anonymous local
    let @6: &'_ (@Adt1<u8>[core::marker::Sized<u8>]); // anonymous local

    @2 := core::option::Option::Some { 0: const (4 : u8) }
    a@1 := @ArrayRepeat<'_, @Adt1<u8>[core::marker::Sized<u8>], 6 : usize>(move (@2))
    drop @2
    @fake_read(a@1)
    @4 := const (0 : usize)
    @5 := &a@1
    @6 := @ArrayIndexShared<'_, @Adt1<u8>[core::marker::Sized<u8>], 6 : usize>(move (@5), copy (@4))
    b@3 := copy (*(@6))
    @fake_read(b@3)
    drop @4
    @0 := ()
    drop b@3
    drop a@1
    @0 := ()
    return
}



