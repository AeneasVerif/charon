# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<u8>
#[lang_item("meta_sized")]
pub trait MetaSized::<u8>

// Full name: core::marker::Sized::<u8>
#[lang_item("sized")]
pub trait Sized::<u8>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<u8>
    non-dyn-compatible
}

// Full name: core::option::Option::<u8>
#[lang_item("Option")]
pub enum Option::<u8> {
  None,
  Some(u8),
}

// Full name: test_crate::init_option
fn init_option()
{
    let @0: (); // return
    let a@1: Array<Option::<u8>, 6 : usize>; // local
    let @2: Option::<u8>; // anonymous local
    let b@3: Option::<u8>; // local
    let @4: usize; // anonymous local
    let @5: &'_ (Array<Option::<u8>, 6 : usize>); // anonymous local
    let @6: &'_ (Option::<u8>); // anonymous local

    storage_live(a@1)
    storage_live(@2)
    @2 := Option::<u8>::Some { 0: const (4 : u8) }
    a@1 := @ArrayRepeat<'_, Option::<u8>, 6 : usize>(move (@2))
    storage_dead(@2)
    storage_live(b@3)
    storage_live(@4)
    @4 := const (0 : usize)
    storage_live(@5)
    @5 := &a@1
    storage_live(@6)
    @6 := @ArrayIndexShared<'_, Option::<u8>, 6 : usize>(move (@5), copy (@4))
    b@3 := copy (*(@6))
    storage_dead(@4)
    @0 := ()
    storage_dead(b@3)
    storage_dead(a@1)
    @0 := ()
    return
}



