# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

pub struct test_crate::LinkedList::<u8> {
  head: core::option::Option::<NonNull<Node<u8>[Sized<u8>]>>,
}

fn test_crate::{LinkedList<T>[@TraitClause0]}::new::<u8>() -> test_crate::LinkedList::<u8>
{
    let @0: test_crate::LinkedList::<u8>; // return
    let @1: core::option::Option::<NonNull<Node<u8>[Sized<u8>]>>; // anonymous local

    storage_live(@1)
    @1 := core::option::Option::<NonNull<Node<u8>[Sized<u8>]>>::None {  }
    @0 := test_crate::LinkedList::<u8> { head: move (@1) }
    storage_dead(@1)
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let list@1: test_crate::LinkedList::<u8>; // local

    storage_live(list@1)
    list@1 := test_crate::{LinkedList<T>[@TraitClause0]}::new::<u8>()
    @0 := ()
    storage_dead(list@1)
    @0 := ()
    return
}



