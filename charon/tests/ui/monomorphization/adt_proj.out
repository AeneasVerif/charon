# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

#[lang_item("Result")]
pub enum core::result::Result::<u32, u32> {
  Ok(u32),
  Err(u32),
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let res@1: core::result::Result::<u32, u32>; // local
    let n@2: u32; // local

    storage_live(res@1)
    res@1 := core::result::Result::<u32, u32>::Ok { 0: const (0 : u32) }
    storage_live(n@2)
    match res@1 {
        core::result::Result::<u32, u32>::Ok => {
        },
        _ => {
            storage_dead(n@2)
            panic(core::panicking::panic_explicit)
        },
    }
    n@2 := copy ((res@1 as variant core::result::Result::<u32, u32>::Ok).0)
    @0 := ()
    storage_dead(n@2)
    storage_dead(res@1)
    @0 := ()
    return
}



