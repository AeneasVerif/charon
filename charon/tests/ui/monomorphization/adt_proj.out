# Final ULLBC before serialization:

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<u32>,
      [@TraitClause1]: core::marker::Sized<u32>,
 =
|  Ok(u32)
|  Err(u32)


#[lang_item("sized")]
pub trait core::marker::Sized<Self>

fn test_crate::main()
{
    let @0: (); // return
    let res@1: @Adt1<u32, u32>[core::marker::Sized<u32>, core::marker::Sized<u32>]; // local
    let n@2: u32; // local
    let @3: isize; // anonymous local

    bb0: {
        res@1 := core::result::Result::Ok { 0: const (0 : u32) };
        @fake_read(res@1);
        @fake_read(res@1);
        @3 := @discriminant(res@1);
        switch move (@3) -> 0 : isize: bb1, otherwise: bb2;
    }

    bb1: {
        n@2 := copy ((res@1 as variant @0).0);
        @0 := ();
        @storage_dead(@2);
        @storage_dead(@1);
        @0 := ();
        return;
    }

    bb2: {
        @storage_dead(@2);
        panic(core::panicking::panic_explicit);
    }
}



