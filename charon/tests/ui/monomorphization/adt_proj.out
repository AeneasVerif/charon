# Final LLBC before serialization:

#[lang_item("Result")]
pub enum core::result::Result::<u32, u32> =
|  Ok(u32)
|  Err(u32)


fn test_crate::main()
{
    let @0: (); // return
    let res@1: core::result::Result::<u32, u32>; // local
    let n@2: u32; // local

    storage_live(res@1)
    res@1 := core::result::Result::<u32, u32>::Ok { 0: const (0 : u32) }
    storage_live(n@2)
    match res@1 {
        core::result::Result::<u32, u32>::Ok => {
        },
        _ => {
            storage_dead(n@2)
            panic(core::panicking::panic_explicit)
        },
    }
    n@2 := copy ((res@1 as variant @0).0)
    @0 := ()
    storage_dead(n@2)
    storage_dead(res@1)
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>



