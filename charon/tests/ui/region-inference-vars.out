# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub trait test_crate::MyTryFrom<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<T>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Error>
    type Error
    fn from<[@TraitClause0]: core::marker::Sized<Self>> = test_crate::MyTryFrom::from<Self, T>[@TraitClause0_0]
}

pub fn test_crate::{impl test_crate::MyTryFrom<&'_0 (bool)> for bool}::from<'_0>(@1: &'_0 (bool)) -> core::result::Result<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]
{
    let @0: core::result::Result<bool, ()>[core::marker::Sized<bool>, core::marker::Sized<()>]; // return
    let v@1: &'_ (bool); // arg #1
    let @2: bool; // anonymous local

    @2 := copy (*(v@1))
    @0 := core::result::Result::Ok { 0: move (@2) }
    drop @2
    return
}

impl test_crate::{impl test_crate::MyTryFrom<&'_0 (bool)> for bool}<'_0> : test_crate::MyTryFrom<bool, &'_0 (bool)>
{
    parent_clause0 = core::marker::Sized<&'_ (bool)>
    parent_clause1 = core::marker::Sized<()>
    type Error = ()
    fn from = test_crate::{impl test_crate::MyTryFrom<&'_0 (bool)> for bool}::from<'_0>
}

pub fn test_crate::MyTryFrom::from<Self, T>(@1: T) -> core::result::Result<Self, Self::Error>[@TraitClause0, Self::parent_clause1]
where
    [@TraitClause0]: core::marker::Sized<Self>,



