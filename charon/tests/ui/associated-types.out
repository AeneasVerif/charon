# Final LLBC before serialization:

trait core::marker::Sized<Self>

trait core::clone::Clone<Self>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone : core::clone::Clone::clone
    fn clone_from : core::clone::Clone::clone_from
}

trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait test_crate::Foo<'a, Self>
where
    Self::Item : 'a,
{
    parent_clause_0 : [@TraitClause0]: core::marker::Copy<Self>
    parent_clause_1 : [@TraitClause1]: core::clone::Clone<Self::Item>
    parent_clause_2 : [@TraitClause2]: core::marker::Sized<Self::Item>
    type Item
    fn use_item : test_crate::Foo::use_item
}

fn core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone<'_0, '_1, T>(@1: &'_1 (&'_0 (T))) -> &'_0 (T)

impl<'_0, T> core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_0, T> : core::clone::Clone<&'_0 (T)>
{
    parent_clause0 = core::marker::Sized<&'_ (T)>
    fn clone = core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3::clone
}

impl<'_0, T> core::marker::{impl core::marker::Copy for &'_0 (T)}#4<'_0, T> : core::marker::Copy<&'_0 (T)>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, T>
}

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5::clone<'_0, T>(@1: &'_0 (core::option::Option<T, @TraitClause0>)) -> core::option::Option<T, @TraitClause0>
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

fn core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5::clone_from<'_0, '_1, T>(@1: &'_0 mut (core::option::Option<T, @TraitClause0>), @2: &'_1 (core::option::Option<T, @TraitClause0>))
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

impl<T> core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5<T> : core::clone::Clone<core::option::Option<T, @TraitClause0>>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T, @TraitClause0>>
    fn clone = core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5::clone
    fn clone_from = core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5::clone_from
}

impl<'a, T> test_crate::{impl test_crate::Foo<'a> for &'a (T)}<'a, T> : test_crate::Foo<'a, &'a (T)>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::{impl core::marker::Copy for &'_0 (T)}#4<'_, T>
    parent_clause1 = core::option::{impl core::clone::Clone for core::option::Option<T, @TraitClause0>}#5<&'_ (T)>[core::marker::Sized<&'_ (T)>, core::clone::impls::{impl core::clone::Clone for &'_0 (T)}#3<'_, T>]
    parent_clause2 = core::marker::Sized<core::option::Option<&'_ (T), core::marker::Sized<&'_ (T)>>>
    type Item = core::option::Option<&'a (T), core::marker::Sized<&'_ (T)>>
}

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn test_crate::external_use_item<'a, T>(@1: @TraitClause1::Item) -> @TraitClause1::Item
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::Foo<'_, T>,
{
    let @0: @TraitClause1::Item; // return
    let x@1: @TraitClause1::Item; // arg #1
    let @2: &'_ (@TraitClause1::Item); // anonymous local

    @2 := &x@1
    @0 := (parents(@TraitClause1)::[@TraitClause1])::clone(move (@2))
    drop @2
    drop x@1
    return
}

fn test_crate::call_fn()
{
    let @0: (); // return
    let @1: core::option::Option<&'_ (bool), core::marker::Sized<&'_ (bool)>>; // anonymous local
    let @2: core::option::Option<&'_ (bool), core::marker::Sized<&'_ (bool)>>; // anonymous local
    let @3: (); // anonymous local

    @2 := core::option::Option::None {  }
    @1 := test_crate::external_use_item<'_, &'_ (bool)>[core::marker::Sized<&'_ (bool)>, test_crate::{impl test_crate::Foo<'a> for &'a (T)}<'_, bool>[core::marker::Sized<bool>]](move (@2))
    drop @2
    @fake_read(@1)
    drop @1
    @3 := ()
    @0 := move (@3)
    @0 := ()
    return
}

fn test_crate::type_equality<'a, I, J>(@1: @TraitClause2::Item) -> @TraitClause3::Item
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<J>,
    [@TraitClause2]: test_crate::Foo<'_, I>,
    [@TraitClause3]: test_crate::Foo<'_, J>,
    @TraitClause3::Item = @TraitClause2::Item,
{
    let @0: @TraitClause2::Item; // return
    let x@1: @TraitClause2::Item; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

trait test_crate::loopy::Bar<Self>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<Self::BarTy>
    type BarTy
}

impl test_crate::loopy::{impl test_crate::loopy::Bar for ()} : test_crate::loopy::Bar<()>
{
    parent_clause0 = core::marker::Sized<bool>
    type BarTy = bool
}

trait test_crate::loopy::Foo<Self>
{
    parent_clause_0 : [@TraitClause0]: test_crate::loopy::Bar<Self::FooTy>
    parent_clause_1 : [@TraitClause1]: test_crate::loopy::Foo<Self::FooTy>
    parent_clause_2 : [@TraitClause2]: core::marker::Sized<Self::FooTy>
    type FooTy
}

impl test_crate::loopy::{impl test_crate::loopy::Foo for ()}#1 : test_crate::loopy::Foo<()>
{
    parent_clause0 = test_crate::loopy::{impl test_crate::loopy::Bar for ()}
    parent_clause1 = test_crate::loopy::{impl test_crate::loopy::Foo for ()}#1
    parent_clause2 = core::marker::Sized<()>
    type FooTy = ()
}

trait test_crate::loopy::Baz<Self, T>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<T>
    parent_clause_1 : [@TraitClause1]: test_crate::loopy::Baz<T, T>
    parent_clause_2 : [@TraitClause2]: test_crate::loopy::Bar<T>
    parent_clause_3 : [@TraitClause3]: core::marker::Sized<Self::BazTy>
    type BazTy
}

impl test_crate::loopy::{impl test_crate::loopy::Baz<()> for ()}#2 : test_crate::loopy::Baz<(), ()>
{
    parent_clause0 = core::marker::Sized<()>
    parent_clause1 = test_crate::loopy::{impl test_crate::loopy::Baz<()> for ()}#2
    parent_clause2 = test_crate::loopy::{impl test_crate::loopy::Bar for ()}
    parent_clause3 = core::marker::Sized<usize>
    type BazTy = usize
}

trait core::borrow::Borrow<Self, Borrowed>
{
    fn borrow : core::borrow::Borrow::borrow
}

trait alloc::borrow::ToOwned<Self>
{
    parent_clause_0 : [@TraitClause0]: core::borrow::Borrow<Self::Owned, Self>
    parent_clause_1 : [@TraitClause1]: core::marker::Sized<Self::Owned>
    type Owned
    fn to_owned : alloc::borrow::ToOwned::to_owned
    fn clone_into : alloc::borrow::ToOwned::clone_into
}

enum test_crate::cow::Cow<'a, B>
  where
      [@TraitClause0]: alloc::borrow::ToOwned<B>,
      B : 'a,
      B : 'a,
 =
|  Borrowed(&'a (B))
|  Owned(@TraitClause0::Owned)


trait test_crate::params::Foo<'a, Self, T>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<T>
    parent_clause_1 : [@TraitClause1]: core::marker::Sized<Self::X>
    parent_clause_2 : [@TraitClause2]: core::marker::Sized<Self::Item>
    type X
    type Item
}

impl<'a, T> test_crate::params::{impl test_crate::params::Foo<'a, core::option::Option<T, @TraitClause0>> for ()}<'a, T> : test_crate::params::Foo<'a, (), core::option::Option<T, @TraitClause0>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T, @TraitClause0>>
    parent_clause1 = core::marker::Sized<&'_ (())>
    parent_clause2 = core::marker::Sized<&'_ ((core::option::Option<T, @TraitClause0>, &'_ (())))>
    type X = &'a (())
    type Item = &'a ((core::option::Option<T, @TraitClause0>, test_crate::params::{impl test_crate::params::Foo<'a, core::option::Option<T, @TraitClause0>> for ()}<'_, T>[@TraitClause0]::X))
}

fn test_crate::Foo::use_item<'a, '_1, Self>(@1: &'_1 (Self::Item)) -> &'_1 (Self::Item)
{
    let @0: &'_ (Self::Item); // return
    let x@1: &'_ (Self::Item); // arg #1

    @0 := copy (x@1)
    return
}

fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

fn alloc::borrow::ToOwned::to_owned<'_0, Self>(@1: &'_0 (Self)) -> Self::Owned

fn alloc::borrow::ToOwned::clone_into<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 mut (Self::Owned))

fn core::borrow::Borrow::borrow<'_0, Self, Borrowed>(@1: &'_0 (Self)) -> &'_0 (Borrowed)



