# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: test_crate::FromResidual
pub trait FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: Sized<R>
}

// Full name: test_crate::Try
pub trait Try<Self>
{
    parent_clause0 : [@TraitClause0]: FromResidual<Self, ()>
    parent_clause1 : [@TraitClause1]: Sized<Self::Residual>
    type Residual
}

// Full name: test_crate::{impl FromResidual<()> for Option<T>[@TraitClause0]}#1
impl<T> FromResidual<()> for Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = Sized<()>
}

// Full name: test_crate::{impl Try for Option<T>[@TraitClause0]}
impl<T> Try for Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = {impl FromResidual<()> for Option<T>[@TraitClause0]}#1<T>[@TraitClause0]
    parent_clause1 = Sized<()>
    type Residual = ()
}



