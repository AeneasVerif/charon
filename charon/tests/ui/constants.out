# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

pub fn core::num::{u32}::MAX() -> u32

pub const core::num::{u32}::MAX: u32 = core::num::{u32}::MAX()

pub fn test_crate::X0() -> u32
{
    let @0: u32; // return

    @0 := const (0 : u32)
    return
}

pub const test_crate::X0: u32 = test_crate::X0()

pub fn test_crate::X1() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := core::num::{u32}::MAX
    @0 := move (@1)
    return
}

pub const test_crate::X1: u32 = test_crate::X1()

pub fn test_crate::X2() -> u32
{
    let @0: u32; // return
    let x@1: u32; // local

    storage_live(x@1)
    x@1 := const (3 : u32)
    @0 := copy (x@1)
    storage_dead(x@1)
    return
}

pub const test_crate::X2: u32 = test_crate::X2()

// Full name: test_crate::incr
pub fn incr(@1: u32) -> u32
{
    let @0: u32; // return
    let n@1: u32; // arg #1
    let @2: u32; // anonymous local
    let @3: u32; // anonymous local

    storage_live(@3)
    storage_live(@2)
    @2 := copy (n@1)
    @3 := copy (@2) + const (1 : u32)
    @0 := move (@3)
    storage_dead(@2)
    return
}

pub fn test_crate::X3() -> u32
{
    let @0: u32; // return

    @0 := incr(const (32 : u32))
    return
}

pub const test_crate::X3: u32 = test_crate::X3()

// Full name: test_crate::mk_pair0
pub fn mk_pair0(@1: u32, @2: u32) -> (u32, u32)
{
    let @0: (u32, u32); // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := (move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::Pair
pub struct Pair<T1, T2>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
{
  x: T1,
  y: T2,
}

// Full name: test_crate::mk_pair1
pub fn mk_pair1(@1: u32, @2: u32) -> Pair<u32, u32>[Sized<u32>, Sized<u32>]
{
    let @0: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := Pair { x: move (@3), y: move (@4) }
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::P0() -> (u32, u32)
{
    let @0: (u32, u32); // return

    @0 := mk_pair0(const (0 : u32), const (1 : u32))
    return
}

pub const test_crate::P0: (u32, u32) = test_crate::P0()

pub fn test_crate::P1() -> Pair<u32, u32>[Sized<u32>, Sized<u32>]
{
    let @0: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // return

    @0 := mk_pair1(const (0 : u32), const (1 : u32))
    return
}

pub const test_crate::P1: Pair<u32, u32>[Sized<u32>, Sized<u32>] = test_crate::P1()

pub fn test_crate::P2() -> (u32, u32)
{
    let @0: (u32, u32); // return

    @0 := (const (0 : u32), const (1 : u32))
    return
}

pub const test_crate::P2: (u32, u32) = test_crate::P2()

pub fn test_crate::P3() -> Pair<u32, u32>[Sized<u32>, Sized<u32>]
{
    let @0: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // return

    @0 := Pair { x: const (0 : u32), y: const (1 : u32) }
    return
}

pub const test_crate::P3: Pair<u32, u32>[Sized<u32>, Sized<u32>] = test_crate::P3()

// Full name: test_crate::Wrap
pub struct Wrap<T>
where
    [@TraitClause0]: Sized<T>,
{
  value: T,
}

// Full name: test_crate::{Wrap<T>[@TraitClause0]}::new
pub fn new<T>(@1: T) -> Wrap<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Wrap<T>[@TraitClause0]; // return
    let value@1: T; // arg #1
    let @2: T; // anonymous local

    storage_live(@2)
    @2 := move (value@1)
    @0 := Wrap { value: move (@2) }
    drop @2
    storage_dead(@2)
    drop value@1
    return
}

pub fn test_crate::Y() -> Wrap<i32>[Sized<i32>]
{
    let @0: Wrap<i32>[Sized<i32>]; // return

    @0 := new<i32>[Sized<i32>](const (2 : i32))
    return
}

pub const test_crate::Y: Wrap<i32>[Sized<i32>] = test_crate::Y()

// Full name: test_crate::unwrap_y
pub fn unwrap_y() -> i32
{
    let @0: i32; // return
    let @1: Wrap<i32>[Sized<i32>]; // anonymous local
    let @2: Wrap<i32>[Sized<i32>]; // anonymous local

    storage_live(@2)
    storage_live(@1)
    @2 := test_crate::Y
    @1 := move (@2)
    @0 := copy ((@1).value)
    storage_dead(@1)
    return
}

pub fn test_crate::YVAL() -> i32
{
    let @0: i32; // return

    @0 := unwrap_y()
    return
}

pub const test_crate::YVAL: i32 = test_crate::YVAL()

fn test_crate::get_z1::Z1() -> i32
{
    let @0: i32; // return

    @0 := const (3 : i32)
    return
}

const test_crate::get_z1::Z1: i32 = test_crate::get_z1::Z1()

// Full name: test_crate::get_z1
pub fn get_z1() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local

    storage_live(@1)
    @1 := test_crate::get_z1::Z1
    @0 := move (@1)
    return
}

// Full name: test_crate::add
pub fn add(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let a@1: i32; // arg #1
    let b@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    storage_live(@5)
    storage_live(@3)
    @3 := copy (a@1)
    storage_live(@4)
    @4 := copy (b@2)
    @5 := copy (@3) + copy (@4)
    @0 := move (@5)
    storage_dead(@4)
    storage_dead(@3)
    return
}

pub fn test_crate::Q1() -> i32
{
    let @0: i32; // return

    @0 := const (5 : i32)
    return
}

pub const test_crate::Q1: i32 = test_crate::Q1()

pub fn test_crate::Q2() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local

    storage_live(@1)
    @1 := test_crate::Q1
    @0 := move (@1)
    return
}

pub const test_crate::Q2: i32 = test_crate::Q2()

pub fn test_crate::Q3() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local

    storage_live(@1)
    @1 := test_crate::Q2
    @0 := add(move (@1), const (3 : i32))
    return
}

pub const test_crate::Q3: i32 = test_crate::Q3()

// Full name: test_crate::get_z2
pub fn get_z2() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local
    let @2: i32; // anonymous local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@1)
    storage_live(@2)
    @2 := get_z1()
    @3 := test_crate::Q3
    @1 := add(move (@2), move (@3))
    storage_dead(@2)
    @4 := test_crate::Q1
    @0 := add(move (@4), move (@1))
    storage_dead(@1)
    return
}

pub fn test_crate::S1() -> u32
{
    let @0: u32; // return

    @0 := const (6 : u32)
    return
}

pub static test_crate::S1: u32 = test_crate::S1()

pub fn test_crate::S2() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local
    let @2: &'_ (u32); // anonymous local
    let @3: &'_ (u32); // anonymous local

    storage_live(@3)
    storage_live(@1)
    storage_live(@2)
    @3 := &test_crate::S1
    @2 := move (@3)
    @1 := copy (*(@2))
    @0 := incr(move (@1))
    storage_dead(@2)
    storage_dead(@1)
    return
}

pub static test_crate::S2: u32 = test_crate::S2()

pub fn test_crate::S3() -> Pair<u32, u32>[Sized<u32>, Sized<u32>]
{
    let @0: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // return
    let @1: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // anonymous local

    storage_live(@1)
    @1 := test_crate::P3
    @0 := move (@1)
    return
}

pub static test_crate::S3: Pair<u32, u32>[Sized<u32>, Sized<u32>] = test_crate::S3()

pub fn test_crate::S4() -> Pair<u32, u32>[Sized<u32>, Sized<u32>]
{
    let @0: Pair<u32, u32>[Sized<u32>, Sized<u32>]; // return

    @0 := mk_pair1(const (7 : u32), const (8 : u32))
    return
}

pub static test_crate::S4: Pair<u32, u32>[Sized<u32>, Sized<u32>] = test_crate::S4()

// Full name: test_crate::V
pub struct V<T, const N : usize>
where
    [@TraitClause0]: Sized<T>,
{
  x: Array<T, const N : usize>,
}

pub fn test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>() -> usize
where
    [@TraitClause0]: Sized<T>,
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

pub const test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>: usize
where
    [@TraitClause0]: Sized<T>,
 = test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN()

// Full name: test_crate::use_v
pub fn use_v<T, const N : usize>() -> usize
where
    [@TraitClause0]: Sized<T>,
{
    let @0: usize; // return
    let @1: usize; // anonymous local

    storage_live(@1)
    @1 := test_crate::{V<T, const N : usize>[@TraitClause0]}::LEN<T, const N : usize>[@TraitClause0]
    @0 := move (@1)
    return
}



