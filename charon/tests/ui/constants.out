# Final LLBC before serialization:

global test_crate::X0  {
    let @0: u32; // return

    @0 := const (0 : u32)
    return
}

global core::num::{u32}#8::MAX 

global test_crate::X1  {
    let @0: u32; // return
    let @1: u32; // anonymous local

    @1 := core::num::{u32}#8::MAX
    @0 := move (@1)
    return
}

global test_crate::X2  {
    let @0: u32; // return
    let x@1: u32; // local

    x@1 := const (3 : u32)
    @fake_read(x@1)
    @0 := copy (x@1)
    drop x@1
    return
}

fn test_crate::incr(@1: u32) -> u32
{
    let @0: u32; // return
    let n@1: u32; // arg #1
    let @2: u32; // anonymous local

    @2 := copy (n@1)
    @0 := move (@2) + const (1 : u32)
    drop @2
    return
}

global test_crate::X3  {
    let @0: u32; // return

    @0 := test_crate::incr(const (32 : u32))
    return
}

fn test_crate::mk_pair0(@1: u32, @2: u32) -> (u32, u32)
{
    let @0: (u32, u32); // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    @3 := copy (x@1)
    @4 := copy (y@2)
    @0 := (move (@3), move (@4))
    drop @4
    drop @3
    return
}

struct test_crate::Pair<T1, T2> =
{
  x: T1,
  y: T2,
}

fn test_crate::mk_pair1(@1: u32, @2: u32) -> test_crate::Pair<u32, u32>
{
    let @0: test_crate::Pair<u32, u32>; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local

    @3 := copy (x@1)
    @4 := copy (y@2)
    @0 := test_crate::Pair { x: move (@3), y: move (@4) }
    drop @4
    drop @3
    return
}

global test_crate::P0  {
    let @0: (u32, u32); // return

    @0 := test_crate::mk_pair0(const (0 : u32), const (1 : u32))
    return
}

global test_crate::P1  {
    let @0: test_crate::Pair<u32, u32>; // return

    @0 := test_crate::mk_pair1(const (0 : u32), const (1 : u32))
    return
}

global test_crate::P2  {
    let @0: (u32, u32); // return

    @0 := (const (0 : u32), const (1 : u32))
    return
}

global test_crate::P3  {
    let @0: test_crate::Pair<u32, u32>; // return

    @0 := test_crate::Pair { x: const (0 : u32), y: const (1 : u32) }
    return
}

struct test_crate::Wrap<T> =
{
  value: T,
}

fn test_crate::{test_crate::Wrap<T>}::new<T>(@1: T) -> test_crate::Wrap<T>
{
    let @0: test_crate::Wrap<T>; // return
    let value@1: T; // arg #1
    let @2: T; // anonymous local

    @2 := move (value@1)
    @0 := test_crate::Wrap { value: move (@2) }
    drop @2
    drop @2
    drop value@1
    return
}

global test_crate::Y  {
    let @0: test_crate::Wrap<i32>; // return

    @0 := test_crate::{test_crate::Wrap<T>}::new<i32>(const (2 : i32))
    return
}

fn test_crate::unwrap_y() -> i32
{
    let @0: i32; // return
    let @1: test_crate::Wrap<i32>; // anonymous local
    let @2: test_crate::Wrap<i32>; // anonymous local

    @2 := test_crate::Y
    @1 := move (@2)
    @0 := copy ((@1).value)
    drop @1
    return
}

global test_crate::YVAL  {
    let @0: i32; // return

    @0 := test_crate::unwrap_y()
    return
}

global test_crate::get_z1::Z1  {
    let @0: i32; // return

    @0 := const (3 : i32)
    return
}

fn test_crate::get_z1() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local

    @1 := test_crate::get_z1::Z1
    @0 := move (@1)
    return
}

fn test_crate::add(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let a@1: i32; // arg #1
    let b@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    @3 := copy (a@1)
    @4 := copy (b@2)
    @0 := move (@3) + move (@4)
    drop @4
    drop @3
    return
}

global test_crate::Q1  {
    let @0: i32; // return

    @0 := const (5 : i32)
    return
}

global test_crate::Q2  {
    let @0: i32; // return
    let @1: i32; // anonymous local

    @1 := test_crate::Q1
    @0 := move (@1)
    return
}

global test_crate::Q3  {
    let @0: i32; // return
    let @1: i32; // anonymous local

    @1 := test_crate::Q2
    @0 := test_crate::add(move (@1), const (3 : i32))
    return
}

fn test_crate::get_z2() -> i32
{
    let @0: i32; // return
    let @1: i32; // anonymous local
    let @2: i32; // anonymous local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    @2 := test_crate::get_z1()
    @3 := test_crate::Q3
    @1 := test_crate::add(move (@2), move (@3))
    drop @2
    @4 := test_crate::Q1
    @0 := test_crate::add(move (@4), move (@1))
    drop @1
    return
}

global test_crate::S1  {
    let @0: u32; // return

    @0 := const (6 : u32)
    return
}

global test_crate::S2  {
    let @0: u32; // return
    let @1: u32; // anonymous local
    let @2: &'_ (u32); // anonymous local
    let @3: &'_ (u32); // anonymous local

    @3 := &test_crate::S1
    @2 := move (@3)
    @1 := copy (*(@2))
    @0 := test_crate::incr(move (@1))
    drop @2
    drop @1
    return
}

global test_crate::S3  {
    let @0: test_crate::Pair<u32, u32>; // return
    let @1: test_crate::Pair<u32, u32>; // anonymous local

    @1 := test_crate::P3
    @0 := move (@1)
    return
}

global test_crate::S4  {
    let @0: test_crate::Pair<u32, u32>; // return

    @0 := test_crate::mk_pair1(const (7 : u32), const (8 : u32))
    return
}

struct test_crate::V<T, const N : usize> =
{
  x: Array<T, const N : usize>,
}

global test_crate::{test_crate::V<T, const N : usize>}#1::LEN<T, const N : usize>  {
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

fn test_crate::use_v<T, const N : usize>() -> usize
{
    let @0: usize; // return
    let @1: usize; // anonymous local

    @1 := test_crate::{test_crate::V<T, const N : usize>}#1::LEN<T, const N : usize>
    @0 := move (@1)
    return
}

global test_crate::REC1  {
    let @0: usize; // return
    let @1: bool; // anonymous local
    let @2: usize; // anonymous local

    @1 := const (true)
    if move (@1) {
        @0 := const (0 : usize)
    }
    else {
        @2 := test_crate::REC2
        @0 := move (@2)
    }
    drop @1
    return
}

global test_crate::REC2  {
    let @0: usize; // return
    let @1: bool; // anonymous local
    let @2: usize; // anonymous local

    @1 := const (true)
    if move (@1) {
        @0 := const (0 : usize)
    }
    else {
        @2 := test_crate::REC1
        @0 := move (@2)
    }
    drop @1
    return
}



