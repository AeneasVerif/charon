# Final LLBC before serialization:

fn test_crate::foo::bar()
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

trait core::marker::Sized<Self>

trait test_crate::Trait<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<T>
    fn method : test_crate::Trait::method
}

struct alloc::alloc::Global = {}

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn test_crate::{impl test_crate::Trait<core::option::Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]}::method<T, U>()
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    // Local clauses:
    [@TraitClause1]: core::marker::Sized<U>,
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

impl<T> test_crate::{impl test_crate::Trait<core::option::Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]}<T> : test_crate::Trait<alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>], core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<core::option::Option<T>[@TraitClause0]>
    fn method = test_crate::{impl test_crate::Trait<core::option::Option<T>[@TraitClause0]> for alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]}::method
}

fn test_crate::{impl test_crate::Trait<alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]> for core::option::Option<U>[@TraitClause1]}#1::method<T, U, V>()
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    // Local clauses:
    [@TraitClause2]: core::marker::Sized<V>,
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

impl<T, U> test_crate::{impl test_crate::Trait<alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]> for core::option::Option<U>[@TraitClause1]}#1<T, U> : test_crate::Trait<core::option::Option<U>[@TraitClause1], alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
{
    parent_clause0 = core::marker::Sized<alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]>
    fn method = test_crate::{impl test_crate::Trait<alloc::boxed::Box<T>[core::marker::Sized<alloc::alloc::Global>]> for core::option::Option<U>[@TraitClause1]}#1::method
}

struct core::ops::range::RangeFrom<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
}

fn core::option::{core::option::Option<T>[@TraitClause0]}::is_some<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0])) -> bool
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

trait core::slice::index::private_slice_index::Sealed<Self>

trait core::slice::index::SliceIndex<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::slice::index::private_slice_index::Sealed<Self>
    type Output
    fn get : core::slice::index::SliceIndex::get
    fn get_mut : core::slice::index::SliceIndex::get_mut
    fn get_unchecked : core::slice::index::SliceIndex::get_unchecked
    fn get_unchecked_mut : core::slice::index::SliceIndex::get_unchecked_mut
    fn index : core::slice::index::SliceIndex::index
    fn index_mut : core::slice::index::SliceIndex::index_mut
}

fn core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_0, T, I>(@1: &'_0 (Slice<T>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,

impl core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#3 : core::slice::index::private_slice_index::Sealed<core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]>

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get<'_0, T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> core::option::Option<&'_0 (Slice<T>)>[core::marker::Sized<&'_1_0 (Slice<T>)>]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_mut<'_0, T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> core::option::Option<&'_0 mut (Slice<T>)>[core::marker::Sized<&'_1_0 mut (Slice<T>)>]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_unchecked<T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: *const Slice<T>) -> *const Slice<T>
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_unchecked_mut<T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: *mut Slice<T>) -> *mut Slice<T>
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::index<'_0, T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> &'_0 (Slice<T>)
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::index_mut<'_0, T>(@1: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> &'_0 mut (Slice<T>)
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

impl<T> core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7<T> : core::slice::index::SliceIndex<core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>], Slice<T>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#3
    type Output = Slice<T>
    fn get = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get
    fn get_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_mut
    fn get_unchecked = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_unchecked
    fn get_unchecked_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::get_unchecked_mut
    fn index = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::index
    fn index_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7::index_mut
}

fn test_crate::foo()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: &'_ (core::option::Option<i32>[core::marker::Sized<i32>]); // anonymous local
    let @3: core::option::Option<i32>[core::marker::Sized<i32>]; // anonymous local
    let slice@4: &'_ (Slice<bool>); // local
    let @5: &'_ (Array<bool, 1 : usize>); // anonymous local
    let @6: &'_ (Array<bool, 1 : usize>); // anonymous local
    let @7: Array<bool, 1 : usize>; // anonymous local
    let @8: &'_ (Slice<bool>); // anonymous local
    let @9: &'_ (Slice<bool>); // anonymous local
    let @10: &'_ (Slice<bool>); // anonymous local
    let @11: core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]; // anonymous local
    let @12: (); // anonymous local

    @3 := core::option::Option::Some { 0: const (0 : i32) }
    @2 := &@3
    @1 := core::option::{core::option::Option<T>[@TraitClause0]}::is_some<'_, i32>[core::marker::Sized<i32>](move (@2))
    drop @2
    @fake_read(@1)
    drop @3
    drop @1
    @7 := [const (false); 1 : usize]
    @6 := &@7
    @5 := &*(@6)
    slice@4 := @ArrayToSliceShared<'_, bool, 1 : usize>(move (@5))
    drop @5
    @fake_read(slice@4)
    drop @6
    @10 := &*(slice@4)
    @11 := core::ops::range::RangeFrom { start: const (1 : usize) }
    @9 := core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_, bool, core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]>[core::marker::Sized<bool>, core::marker::Sized<core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]>, core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeFrom<usize>[core::marker::Sized<usize>]}#7<bool>[core::marker::Sized<bool>]](move (@10), move (@11))
    drop @11
    drop @10
    @8 := &*(@9)
    @fake_read(@8)
    drop @8
    @12 := ()
    @0 := move (@12)
    drop @9
    drop @7
    drop slice@4
    @0 := ()
    return
}

fn test_crate::Trait::method<Self, T, U>()
where
    [@TraitClause0]: core::marker::Sized<U>,

fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (Self::Output)

trait core::ops::index::Index<Self, Idx>
{
    type Output
    fn index : core::ops::index::Index::index
}

impl<T, I> core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}<T, I> : core::ops::index::Index<Slice<T>, I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    type Output = @TraitClause2::Output
    fn index = core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index
}

fn core::slice::index::SliceIndex::get<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> core::option::Option<&'_0 (Self::Output)>[core::marker::Sized<&'_1_0 (Self::Output)>]

fn core::slice::index::SliceIndex::get_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> core::option::Option<&'_0 mut (Self::Output)>[core::marker::Sized<&'_1_0 mut (Self::Output)>]

unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(@1: Self, @2: *const T) -> *const Self::Output

unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(@1: Self, @2: *mut T) -> *mut Self::Output

fn core::slice::index::SliceIndex::index<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> &'_0 (Self::Output)

fn core::slice::index::SliceIndex::index_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> &'_0 mut (Self::Output)



