# Final LLBC before serialization:

pub fn test_crate::incr_u32(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let @2: u32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := copy (@2) + const (1 : u32)
    storage_dead(@2)
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args, Self_Output>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self_Output>
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args, Self_Output>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args, Self_Clause0_Output>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args, Self_Clause0_Output>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args, Self_Clause0_Output>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args, Self_Clause0_Clause0_Output>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args, Self_Clause0_Clause0_Output>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args, Self_Clause0_Clause0_Output>
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


pub fn core::ops::function::Fn::call<'_0, Self, Args, Self_Clause0_Clause0_Output>(@1: &'_0 (Self), @2: Args) -> Self_Clause0_Clause0_Output

pub fn test_crate::map_option<T, F>(@1: core::option::Option<T>[@TraitClause0], @2: F) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::ops::function::Fn<F, (T), T>,
{
    let @0: core::option::Option<T>[@TraitClause0]; // return
    let x@1: core::option::Option<T>[@TraitClause0]; // arg #1
    let f@2: F; // arg #2
    let x@3: T; // local
    let @4: T; // anonymous local
    let @5: &'_ (F); // anonymous local
    let @6: (T); // anonymous local
    let @7: T; // anonymous local

    storage_live(x@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    match x@1 {
        core::option::Option::None => {
            @0 := core::option::Option::None {  }
        },
        core::option::Option::Some => {
            storage_live(x@3)
            x@3 := move ((x@1 as variant @1).0)
            storage_live(@4)
            storage_live(@5)
            @5 := &f@2
            storage_live(@6)
            storage_live(@7)
            @7 := move (x@3)
            @6 := (move (@7))
            @4 := @TraitClause2::call<'_>(move (@5), move (@6))
            drop @7
            storage_dead(@7)
            storage_dead(@6)
            storage_dead(@5)
            @0 := core::option::Option::Some { 0: move (@4) }
            drop @4
            storage_dead(@4)
            drop x@3
            storage_dead(x@3)
        },
    }
    drop f@2
    drop x@1
    return
}

pub fn test_crate::map_option_pointer_ref<'a, T, F>(@1: &'a (core::option::Option<T>[@TraitClause0]), @2: fn<'_0>(&'_0_0 (T)) -> T) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
{
    let @0: core::option::Option<T>[@TraitClause0]; // return
    let x@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> T; // arg #2
    let x@3: &'_ (T); // local
    let @4: T; // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> T; // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(x@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    match *(x@1) {
        core::option::Option::None => {
        },
        core::option::Option::Some => {
            storage_live(x@3)
            x@3 := &(*(x@1) as variant @1).0
            storage_live(@4)
            storage_live(@5)
            @5 := copy (f@2)
            storage_live(@6)
            @6 := &*(x@3)
            @4 := (move @5)(move (@6))
            storage_dead(@6)
            storage_dead(@5)
            @0 := core::option::Option::Some { 0: move (@4) }
            drop @4
            storage_dead(@4)
            storage_dead(x@3)
            return
        },
    }
    @0 := core::option::Option::None {  }
    return
}

pub fn test_crate::test_map_option1(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::incr_u32))
    storage_dead(@2)
    return
}

struct test_crate::test_closure_u32::closure = {}

pub fn test_crate::test_closure_u32(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: test_crate::test_closure_u32::closure; // anonymous local
    let @4: fn(u32) -> u32; // anonymous local
    let @5: u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_closure_u32::closure {  }
    f@2 := cast<test_crate::test_closure_u32::closure, fn(u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    @5 := copy (x@1)
    @0 := (move @4)(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

struct test_crate::test_closure_u32s::closure = {}

pub fn test_crate::test_closure_u32s(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32, u32) -> u32; // local
    let @3: test_crate::test_closure_u32s::closure; // anonymous local
    let @4: fn(u32, u32) -> u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_closure_u32s::closure {  }
    f@2 := cast<test_crate::test_closure_u32s::closure, fn(u32, u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    @5 := copy (x@1)
    storage_live(@6)
    @6 := copy (x@1)
    @0 := (move @4)(move (@5), move (@6))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

struct test_crate::test_closure_ref_u32::closure = {}

pub fn test_crate::test_closure_ref_u32<'a>(@1: &'a (u32)) -> &'a (u32)
{
    let @0: &'_ (u32); // return
    let x@1: &'_ (u32); // arg #1
    let f@2: fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32); // local
    let @3: test_crate::test_closure_ref_u32::closure; // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_closure_ref_u32::closure {  }
    f@2 := cast<test_crate::test_closure_ref_u32::closure, fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

struct test_crate::test_closure_ref_param::closure<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 = {}

pub fn test_crate::test_closure_ref_param<'_0, T>(@1: &'_0 (T)) -> &'_0 (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (T); // return
    let x@1: &'_ (T); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // local
    let @3: test_crate::test_closure_ref_param::closure<T>[@TraitClause0]; // anonymous local
    let @4: &'_ (T); // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_closure_ref_param::closure {  }
    f@2 := cast<test_crate::test_closure_ref_param::closure<T>[@TraitClause0], fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

trait test_crate::Trait<'a, Self>

struct test_crate::test_closure_ref_early_bound::closure<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: test_crate::Trait<'a, T>,
 = {}

pub fn test_crate::test_closure_ref_early_bound<'a, T>(@1: &'a (T)) -> &'a (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::Trait<'a, T>,
{
    let @0: &'_ (T); // return
    let x@1: &'_ (T); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // local
    let @3: test_crate::test_closure_ref_early_bound::closure<'_, T>[@TraitClause0, @TraitClause1]; // anonymous local
    let @4: &'_ (T); // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_closure_ref_early_bound::closure {  }
    f@2 := cast<test_crate::test_closure_ref_early_bound::closure<'_, T>[@TraitClause0, @TraitClause1], fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

struct test_crate::test_map_option2::closure = {}

pub fn test_crate::test_map_option2(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: test_crate::test_map_option2::closure; // anonymous local
    let @4: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @5: fn(u32) -> u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_map_option2::closure {  }
    f@2 := cast<test_crate::test_map_option2::closure, fn(u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (x@1)
    storage_live(@5)
    @5 := copy (f@2)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

pub fn test_crate::id<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

pub fn test_crate::test_map_option_id1(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::id<u32>[core::marker::Sized<u32>]))
    storage_dead(@2)
    return
}

pub fn test_crate::test_map_option_id2(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @4: fn(u32) -> u32; // anonymous local

    storage_live(f@2)
    f@2 := const (test_crate::id<u32>[core::marker::Sized<u32>])
    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (f@2)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    return
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn test_crate::id_clone<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &x@1
    @0 := @TraitClause1::clone<'_>(move (@2))
    storage_dead(@2)
    drop x@1
    return
}

pub fn core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0>(@1: &'_0 (u32)) -> u32

impl core::clone::impls::{impl core::clone::Clone for u32}#8 : core::clone::Clone<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0_0>
}

pub fn test_crate::test_id_clone(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: fn(u32) -> u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(f@2)
    f@2 := cast<fn(u32) -> u32, fn(u32) -> u32>(const (test_crate::id_clone<u32>[core::marker::Sized<u32>, core::clone::impls::{impl core::clone::Clone for u32}#8]))
    storage_live(@3)
    @3 := copy (f@2)
    storage_live(@4)
    @4 := copy (x@1)
    @0 := (move @3)(move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    return
}

pub fn test_crate::test_id_clone_param<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let f@2: fn(T) -> T; // local
    let @3: fn(T) -> T; // anonymous local
    let @4: T; // anonymous local

    storage_live(f@2)
    f@2 := cast<fn(T) -> T, fn(T) -> T>(const (test_crate::id_clone<T>[@TraitClause0, @TraitClause1]))
    storage_live(@3)
    @3 := copy (f@2)
    storage_live(@4)
    @4 := move (x@1)
    @0 := (move @3)(move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    drop x@1
    return
}

pub fn test_crate::test_map_option_id_clone(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::id_clone<u32>[core::marker::Sized<u32>, core::clone::impls::{impl core::clone::Clone for u32}#8]))
    storage_dead(@2)
    return
}

struct test_crate::test_map_option3::closure = {}

fn test_crate::test_map_option3::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_map_option3::closure}::call<'_0>(@1: &'_0 (test_crate::test_map_option3::closure), @2: (u32)) -> u32
{
    let @0: u32; // return
    let @1: &'_ (test_crate::test_map_option3::closure); // arg #1
    let tupled_args@2: (u32); // arg #2
    let x@3: u32; // local
    let @4: u32; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (x@3)
    @0 := copy (@4) + const (1 : u32)
    storage_dead(@4)
    return
}

fn test_crate::test_map_option3::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_map_option3::closure}::call_mut<'_0>(@1: &'_0 mut (test_crate::test_map_option3::closure), @2: (u32)) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 mut (test_crate::test_map_option3::closure); // arg #1
    let args@2: (u32); // arg #2
    let @3: &'_ (test_crate::test_map_option3::closure); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := test_crate::test_map_option3::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_map_option3::closure}::call<'_>(move (@3), move (args@2))
    return
}

fn test_crate::test_map_option3::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_map_option3::closure}::call_once(@1: test_crate::test_map_option3::closure, @2: (u32)) -> u32
{
    let @0: u32; // return
    let @1: test_crate::test_map_option3::closure; // arg #1
    let @2: (u32); // arg #2
    let @3: &'_ mut (test_crate::test_map_option3::closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::test_map_option3::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_map_option3::closure}::call_mut<'_>(move (@3), move (@2))
    drop @1
    return
}

impl test_crate::test_map_option3::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_map_option3::closure} : core::ops::function::FnOnce<test_crate::test_map_option3::closure, (u32), u32>
{
    parent_clause0 = core::marker::Sized<(u32)>
    parent_clause1 = core::marker::Tuple<(u32)>
    parent_clause2 = core::marker::Sized<u32>
    fn call_once = test_crate::test_map_option3::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_map_option3::closure}::call_once
}

impl test_crate::test_map_option3::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_map_option3::closure} : core::ops::function::FnMut<test_crate::test_map_option3::closure, (u32), u32>
{
    parent_clause0 = test_crate::test_map_option3::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_map_option3::closure}
    parent_clause1 = core::marker::Sized<(u32)>
    parent_clause2 = core::marker::Tuple<(u32)>
    fn call_mut<'_0> = test_crate::test_map_option3::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_map_option3::closure}::call_mut<'_0_0>
}

impl test_crate::test_map_option3::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_map_option3::closure} : core::ops::function::Fn<test_crate::test_map_option3::closure, (u32), u32>
{
    parent_clause0 = test_crate::test_map_option3::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_map_option3::closure}
    parent_clause1 = core::marker::Sized<(u32)>
    parent_clause2 = core::marker::Tuple<(u32)>
    fn call<'_0> = test_crate::test_map_option3::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_map_option3::closure}::call<'_0_0>
}

pub fn test_crate::test_map_option3(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @3: test_crate::test_map_option3::closure; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    storage_live(@3)
    @3 := test_crate::test_map_option3::closure {  }
    @0 := test_crate::map_option<u32, test_crate::test_map_option3::closure>[core::marker::Sized<u32>, core::marker::Sized<test_crate::test_map_option3::closure>, test_crate::test_map_option3::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_map_option3::closure}](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

struct test_crate::test_regions::closure = {}

pub fn test_crate::test_regions<'a>(@1: &'a (u32)) -> u32
{
    let @0: u32; // return
    let x@1: &'_ (u32); // arg #1
    let f@2: fn<'_0>(&'_0_0 (&'_ (u32))) -> u32; // local
    let @3: test_crate::test_regions::closure; // anonymous local
    let @4: fn<'_0>(&'_0_0 (&'_ (u32))) -> u32; // anonymous local
    let @5: &'_ (&'_ (u32)); // anonymous local
    let @6: &'_ (&'_ (u32)); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := test_crate::test_regions::closure {  }
    f@2 := cast<test_crate::test_regions::closure, fn<'_0>(&'_0_0 (&'_ (u32))) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    storage_live(@6)
    @6 := &x@1
    @5 := &*(@6)
    @0 := (move @4)(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    storage_dead(@6)
    return
}

struct test_crate::test_closure_capture::closure<'_0, '_1> =
{
  &'_0 (u32),
  &'_1 (u32),
}

fn test_crate::test_closure_capture::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call<'_0, '_1, '_2>(@1: &'_2 (test_crate::test_closure_capture::closure<'_0, '_1>), @2: (u32)) -> u32
{
    let @0: u32; // return
    let @1: &'_ (test_crate::test_closure_capture::closure<'_0, '_1>); // arg #1
    let tupled_args@2: (u32); // arg #2
    let z@3: u32; // local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local

    storage_live(z@3)
    z@3 := move ((tupled_args@2).0)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (*((*(@1)).0))
    storage_live(@6)
    @6 := copy (*((*(@1)).1))
    @4 := copy (@5) + copy (@6)
    storage_dead(@6)
    storage_dead(@5)
    storage_live(@7)
    @7 := copy (z@3)
    @0 := copy (@4) + copy (@7)
    storage_dead(@7)
    storage_dead(@4)
    return
}

pub fn test_crate::test_closure_capture(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let f@3: &'_ (test_crate::test_closure_capture::closure<'_, '_>); // local
    let @4: test_crate::test_closure_capture::closure<'_, '_>; // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local
    let @7: &'_ (test_crate::test_closure_capture::closure<'_, '_>); // anonymous local
    let @8: (u32); // anonymous local

    storage_live(f@3)
    storage_live(@4)
    storage_live(@5)
    @5 := &x@1
    storage_live(@6)
    @6 := &y@2
    @4 := test_crate::test_closure_capture::closure { 0: move (@5), 1: move (@6) }
    storage_dead(@6)
    storage_dead(@5)
    f@3 := &@4
    storage_live(@7)
    @7 := &*(f@3)
    storage_live(@8)
    @8 := (const (0 : u32))
    @0 := test_crate::test_closure_capture::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call<'_, '_, '_>(move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@4)
    storage_dead(f@3)
    return
}

struct test_crate::test_closure_clone::closure<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::clone::Clone<T>,
 = {}

fn test_crate::test_closure_clone::{impl core::ops::function::Fn<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call<'_0, T>(@1: &'_0 (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]), @2: (T)) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let @1: &'_ (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // arg #1
    let tupled_args@2: (T); // arg #2
    let x@3: T; // local
    let @4: &'_ (T); // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := &x@3
    @0 := @TraitClause1::clone<'_>(move (@4))
    storage_dead(@4)
    drop x@3
    return
}

pub fn test_crate::test_closure_clone<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let f@2: test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]; // local
    let @3: &'_ (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // anonymous local
    let @4: &'_ (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // anonymous local
    let @5: (T); // anonymous local
    let @6: T; // anonymous local

    storage_live(f@2)
    f@2 := test_crate::test_closure_clone::closure {  }
    storage_live(@3)
    storage_live(@4)
    @4 := &f@2
    @3 := &*(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := move (x@1)
    @5 := (move (@6))
    @0 := test_crate::test_closure_clone::{impl core::ops::function::Fn<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call<'_, T>[@TraitClause0, @TraitClause1](move (@3), move (@5))
    drop @6
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@3)
    storage_dead(f@2)
    storage_dead(@4)
    drop x@1
    return
}

struct test_crate::test_array_map::closure = {}

pub fn core::array::{Array<T, const N : usize>}#23::map<T, F, U, const N : usize>(@1: Array<T, const N : usize>, @2: F) -> Array<U, const N : usize>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T), U>,

fn test_crate::test_array_map::{impl core::ops::function::FnMut<(i32), i32> for test_crate::test_array_map::closure}::call_mut<'_0>(@1: &'_0 mut (test_crate::test_array_map::closure), @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: &'_ mut (test_crate::test_array_map::closure); // arg #1
    let tupled_args@2: (i32); // arg #2
    let v@3: i32; // local

    storage_live(v@3)
    v@3 := move ((tupled_args@2).0)
    @0 := copy (v@3)
    return
}

fn test_crate::test_array_map::{impl core::ops::function::FnOnce<(i32), i32> for test_crate::test_array_map::closure}::call_once(@1: test_crate::test_array_map::closure, @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: test_crate::test_array_map::closure; // arg #1
    let @2: (i32); // arg #2
    let @3: &'_ mut (test_crate::test_array_map::closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::test_array_map::{impl core::ops::function::FnMut<(i32), i32> for test_crate::test_array_map::closure}::call_mut<'_>(move (@3), move (@2))
    drop @1
    return
}

impl test_crate::test_array_map::{impl core::ops::function::FnOnce<(i32), i32> for test_crate::test_array_map::closure} : core::ops::function::FnOnce<test_crate::test_array_map::closure, (i32), i32>
{
    parent_clause0 = core::marker::Sized<(i32)>
    parent_clause1 = core::marker::Tuple<(i32)>
    parent_clause2 = core::marker::Sized<i32>
    fn call_once = test_crate::test_array_map::{impl core::ops::function::FnOnce<(i32), i32> for test_crate::test_array_map::closure}::call_once
}

impl test_crate::test_array_map::{impl core::ops::function::FnMut<(i32), i32> for test_crate::test_array_map::closure} : core::ops::function::FnMut<test_crate::test_array_map::closure, (i32), i32>
{
    parent_clause0 = test_crate::test_array_map::{impl core::ops::function::FnOnce<(i32), i32> for test_crate::test_array_map::closure}
    parent_clause1 = core::marker::Sized<(i32)>
    parent_clause2 = core::marker::Tuple<(i32)>
    fn call_mut<'_0> = test_crate::test_array_map::{impl core::ops::function::FnMut<(i32), i32> for test_crate::test_array_map::closure}::call_mut<'_0_0>
}

pub fn test_crate::test_array_map(@1: Array<i32, 256 : usize>) -> Array<i32, 256 : usize>
{
    let @0: Array<i32, 256 : usize>; // return
    let x@1: Array<i32, 256 : usize>; // arg #1
    let @2: Array<i32, 256 : usize>; // anonymous local
    let @3: test_crate::test_array_map::closure; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    storage_live(@3)
    @3 := test_crate::test_array_map::closure {  }
    @0 := core::array::{Array<T, const N : usize>}#23::map<i32, test_crate::test_array_map::closure, i32, 256 : usize>[core::marker::Sized<i32>, core::marker::Sized<test_crate::test_array_map::closure>, core::marker::Sized<i32>, test_crate::test_array_map::{impl core::ops::function::FnMut<(i32), i32> for test_crate::test_array_map::closure}](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

struct test_crate::test_fnmut_with_ref::closure<'_0> =
{
  &'_0 mut (usize),
}

fn test_crate::test_fnmut_with_ref::{impl core::ops::function::FnMut<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_mut<'_0, '_1, '_2>(@1: &'_2 mut (test_crate::test_fnmut_with_ref::closure<'_0>), @2: (&'_1 (usize)))
{
    let @0: (); // return
    let @1: &'_ mut (test_crate::test_fnmut_with_ref::closure<'_0>); // arg #1
    let tupled_args@2: (&'_1 (usize)); // arg #2
    let x@3: &'_ (usize); // local
    let @4: usize; // anonymous local

    storage_live(x@3)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (*(x@3))
    *((*(@1)).0) := copy (*((*(@1)).0)) + copy (@4)
    @0 := ()
    storage_dead(@4)
    @0 := ()
    return
}

fn test_crate::test_fnmut_with_ref()
{
    let @0: (); // return
    let sum@1: usize; // local
    let closure@2: test_crate::test_fnmut_with_ref::closure<'_>; // local
    let @3: &'_ mut (usize); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ mut (test_crate::test_fnmut_with_ref::closure<'_>); // anonymous local
    let @6: (&'_ (usize)); // anonymous local
    let @7: &'_ (usize); // anonymous local
    let @8: &'_ (usize); // anonymous local
    let @9: usize; // anonymous local

    storage_live(sum@1)
    sum@1 := const (0 : usize)
    storage_live(closure@2)
    storage_live(@3)
    @3 := &mut sum@1
    closure@2 := test_crate::test_fnmut_with_ref::closure { 0: move (@3) }
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := &mut closure@2
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    @9 := const (15 : usize)
    @8 := &@9
    @7 := &*(@8)
    @6 := (move (@7))
    @4 := test_crate::test_fnmut_with_ref::{impl core::ops::function::FnMut<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_mut<'_, '_, '_>(move (@5), move (@6))
    storage_dead(@7)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(@4)
    @0 := ()
    storage_dead(closure@2)
    storage_dead(sum@1)
    @0 := ()
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args, Self_Clause0_Output>(@1: &'_0 mut (Self), @2: Args) -> Self_Clause0_Output

fn test_crate::test_closure_capture::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call_mut<'_0, '_1, '_2>(@1: &'_2 mut (test_crate::test_closure_capture::closure<'_0, '_1>), @2: (u32)) -> u32
{
    let @0: u32; // return
    let state@1: &'_2 mut (test_crate::test_closure_capture::closure<'_0, '_1>); // arg #1
    let args@2: (u32); // arg #2
    let @3: &'_ (test_crate::test_closure_capture::closure<'_0, '_1>); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := test_crate::test_closure_capture::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call<'_0, '_1, '_>(move (@3), move (args@2))
    return
}

fn test_crate::test_closure_capture::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call_once<'_0, '_1>(@1: test_crate::test_closure_capture::closure<'_0, '_1>, @2: (u32)) -> u32
{
    let @0: u32; // return
    let @1: test_crate::test_closure_capture::closure<'_0, '_1>; // arg #1
    let @2: (u32); // arg #2
    let @3: &'_ mut (test_crate::test_closure_capture::closure<'_0, '_1>); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::test_closure_capture::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call_mut<'_0, '_1, '_>(move (@3), move (@2))
    drop @1
    return
}

impl test_crate::test_closure_capture::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}<'_0, '_1> : core::ops::function::FnOnce<test_crate::test_closure_capture::closure<'_0, '_1>, (u32), u32>
{
    parent_clause0 = core::marker::Sized<(u32)>
    parent_clause1 = core::marker::Tuple<(u32)>
    parent_clause2 = core::marker::Sized<u32>
    fn call_once = test_crate::test_closure_capture::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call_once<'_0, '_1>
}

impl test_crate::test_closure_capture::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}<'_0, '_1> : core::ops::function::FnMut<test_crate::test_closure_capture::closure<'_0, '_1>, (u32), u32>
{
    parent_clause0 = test_crate::test_closure_capture::{impl core::ops::function::FnOnce<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}<'_0, '_1>
    parent_clause1 = core::marker::Sized<(u32)>
    parent_clause2 = core::marker::Tuple<(u32)>
    fn call_mut<'_0> = test_crate::test_closure_capture::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call_mut<'_0, '_1, '_0_0>
}

impl test_crate::test_closure_capture::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}<'_0, '_1> : core::ops::function::Fn<test_crate::test_closure_capture::closure<'_0, '_1>, (u32), u32>
{
    parent_clause0 = test_crate::test_closure_capture::{impl core::ops::function::FnMut<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}<'_0, '_1>
    parent_clause1 = core::marker::Sized<(u32)>
    parent_clause2 = core::marker::Tuple<(u32)>
    fn call<'_0> = test_crate::test_closure_capture::{impl core::ops::function::Fn<(u32), u32> for test_crate::test_closure_capture::closure<'_0, '_1>}::call<'_0, '_1, '_0_0>
}

fn test_crate::test_closure_clone::{impl core::ops::function::FnMut<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call_mut<'_0, T>(@1: &'_0 mut (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]), @2: (T)) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: &'_0 mut (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // arg #1
    let args@2: (T); // arg #2
    let @3: &'_ (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := test_crate::test_closure_clone::{impl core::ops::function::Fn<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call<'_, T>[@TraitClause0, @TraitClause1](move (@3), move (args@2))
    return
}

fn test_crate::test_closure_clone::{impl core::ops::function::FnOnce<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call_once<T>(@1: test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1], @2: (T)) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let @1: test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]; // arg #1
    let @2: (T); // arg #2
    let @3: &'_ mut (test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::test_closure_clone::{impl core::ops::function::FnMut<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call_mut<'_, T>[@TraitClause0, @TraitClause1](move (@3), move (@2))
    drop @1
    return
}

impl test_crate::test_closure_clone::{impl core::ops::function::FnOnce<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}<T> : core::ops::function::FnOnce<test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1], (T), T>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<(T)>
    parent_clause1 = core::marker::Tuple<(T)>
    parent_clause2 = core::marker::Sized<T>
    fn call_once = test_crate::test_closure_clone::{impl core::ops::function::FnOnce<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call_once<T>[@TraitClause0, @TraitClause1]
}

impl test_crate::test_closure_clone::{impl core::ops::function::FnMut<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}<T> : core::ops::function::FnMut<test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1], (T), T>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::test_closure_clone::{impl core::ops::function::FnOnce<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}<T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<(T)>
    parent_clause2 = core::marker::Tuple<(T)>
    fn call_mut<'_0> = test_crate::test_closure_clone::{impl core::ops::function::FnMut<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call_mut<'_0_0, T>[@TraitClause0, @TraitClause1]
}

impl test_crate::test_closure_clone::{impl core::ops::function::Fn<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}<T> : core::ops::function::Fn<test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1], (T), T>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::test_closure_clone::{impl core::ops::function::FnMut<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}<T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<(T)>
    parent_clause2 = core::marker::Tuple<(T)>
    fn call<'_0> = test_crate::test_closure_clone::{impl core::ops::function::Fn<(T), T> for test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]}::call<'_0_0, T>[@TraitClause0, @TraitClause1]
}

fn test_crate::test_fnmut_with_ref::{impl core::ops::function::FnOnce<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_once<'_0, '_1>(@1: test_crate::test_fnmut_with_ref::closure<'_0>, @2: (&'_1 (usize)))
{
    let @0: (); // return
    let @1: test_crate::test_fnmut_with_ref::closure<'_0>; // arg #1
    let @2: (&'_ (usize)); // arg #2
    let @3: &'_ mut (test_crate::test_fnmut_with_ref::closure<'_0>); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::test_fnmut_with_ref::{impl core::ops::function::FnMut<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_mut<'_0, '_1, '_>(move (@3), move (@2))
    drop @1
    @0 := ()
    return
}

impl test_crate::test_fnmut_with_ref::{impl core::ops::function::FnOnce<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}<'_0, '_1> : core::ops::function::FnOnce<test_crate::test_fnmut_with_ref::closure<'_0>, (&'_ (usize)), ()>
{
    parent_clause0 = core::marker::Sized<(&'_ (usize))>
    parent_clause1 = core::marker::Tuple<(&'_ (usize))>
    parent_clause2 = core::marker::Sized<()>
    fn call_once = test_crate::test_fnmut_with_ref::{impl core::ops::function::FnOnce<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_once<'_0, '_1>
}

impl test_crate::test_fnmut_with_ref::{impl core::ops::function::FnMut<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}<'_0, '_1> : core::ops::function::FnMut<test_crate::test_fnmut_with_ref::closure<'_0>, (&'_ (usize)), ()>
{
    parent_clause0 = test_crate::test_fnmut_with_ref::{impl core::ops::function::FnOnce<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}<'_0, '_1>
    parent_clause1 = core::marker::Sized<(&'_ (usize))>
    parent_clause2 = core::marker::Tuple<(&'_ (usize))>
    fn call_mut<'_0> = test_crate::test_fnmut_with_ref::{impl core::ops::function::FnMut<(&'_ (usize)), ()> for test_crate::test_fnmut_with_ref::closure<'_0>}::call_mut<'_0, '_1, '_0_0>
}

pub fn core::ops::function::FnOnce::call_once<Self, Args, Self_Output>(@1: Self, @2: Args) -> Self_Output



