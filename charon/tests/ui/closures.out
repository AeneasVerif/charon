# Final LLBC before serialization:

pub fn test_crate::incr_u32(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let @2: u32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := copy (@2) + const (1 : u32)
    storage_dead(@2)
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args, Self_Output>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self_Output>
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args, Self_Output>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args, Self_Clause0_Output>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args, Self_Clause0_Output>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args, Self_Clause0_Output>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args, Self_Clause0_Clause0_Output>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args, Self_Clause0_Clause0_Output>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args, Self_Clause0_Clause0_Output>
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


pub fn core::ops::function::Fn::call<'_0, Self, Args, Self_Clause0_Clause0_Output>(@1: &'_0 (Self), @2: Args) -> Self_Clause0_Clause0_Output

pub fn test_crate::map_option<T, F>(@1: core::option::Option<T>[@TraitClause0], @2: F) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::ops::function::Fn<F, (T), T>,
{
    let @0: core::option::Option<T>[@TraitClause0]; // return
    let x@1: core::option::Option<T>[@TraitClause0]; // arg #1
    let f@2: F; // arg #2
    let x@3: T; // local
    let @4: T; // anonymous local
    let @5: &'_ (F); // anonymous local
    let @6: (T); // anonymous local
    let @7: T; // anonymous local

    storage_live(x@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    match x@1 {
        0 => {
            @0 := core::option::Option::None {  }
        },
        1 => {
            storage_live(x@3)
            x@3 := move ((x@1 as variant @1).0)
            storage_live(@4)
            storage_live(@5)
            @5 := &f@2
            storage_live(@6)
            storage_live(@7)
            @7 := move (x@3)
            @6 := (move (@7))
            @4 := @TraitClause2::call<'_>(move (@5), move (@6))
            drop @7
            storage_dead(@7)
            storage_dead(@6)
            storage_dead(@5)
            @0 := core::option::Option::Some { 0: move (@4) }
            drop @4
            storage_dead(@4)
            drop x@3
            storage_dead(x@3)
        },
    }
    drop f@2
    drop x@1
    return
}

pub fn test_crate::map_option_pointer_ref<'a, T, F>(@1: &'a (core::option::Option<T>[@TraitClause0]), @2: fn<'_0>(&'_0_0 (T)) -> T) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
{
    let @0: core::option::Option<T>[@TraitClause0]; // return
    let x@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> T; // arg #2
    let x@3: &'_ (T); // local
    let @4: T; // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> T; // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(x@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    match *(x@1) {
        0 => {
        },
        1 => {
            storage_live(x@3)
            x@3 := &(*(x@1) as variant @1).0
            storage_live(@4)
            storage_live(@5)
            @5 := copy (f@2)
            storage_live(@6)
            @6 := &*(x@3)
            @4 := (move @5)(move (@6))
            storage_dead(@6)
            storage_dead(@5)
            @0 := core::option::Option::Some { 0: move (@4) }
            drop @4
            storage_dead(@4)
            storage_dead(x@3)
            return
        },
    }
    @0 := core::option::Option::None {  }
    return
}

pub fn test_crate::test_map_option1(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::incr_u32))
    storage_dead(@2)
    return
}

fn test_crate::test_closure_u32::closure<'_0>(@1: &'_0 (()), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 (()); // arg #1
    let x@2: u32; // arg #2

    @0 := copy (x@2)
    return
}

pub fn test_crate::test_closure_u32(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: test_crate::test_closure_u32::closure; // anonymous local
    let @4: fn(u32) -> u32; // anonymous local
    let @5: u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_closure_u32::closure} {}
    f@2 := cast<test_crate::test_closure_u32::closure, fn(u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    @5 := copy (x@1)
    @0 := (move @4)(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

fn test_crate::test_closure_u32s::closure<'_0>(@1: &'_0 (()), @2: u32, @3: u32) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 (()); // arg #1
    let x@2: u32; // arg #2
    let y@3: u32; // arg #3
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local

    storage_live(@4)
    @4 := copy (x@2)
    storage_live(@5)
    @5 := copy (y@3)
    @0 := copy (@4) + copy (@5)
    storage_dead(@5)
    storage_dead(@4)
    return
}

pub fn test_crate::test_closure_u32s(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32, u32) -> u32; // local
    let @3: test_crate::test_closure_u32s::closure; // anonymous local
    let @4: fn(u32, u32) -> u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_closure_u32s::closure} {}
    f@2 := cast<test_crate::test_closure_u32s::closure, fn(u32, u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    @5 := copy (x@1)
    storage_live(@6)
    @6 := copy (x@1)
    @0 := (move @4)(move (@5), move (@6))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

fn test_crate::test_closure_ref_u32::closure<'_0, '_1>(@1: &'_1 (()), @2: &'_0 (u32)) -> &'_0 (u32)
{
    let @0: &'_ (u32); // return
    let state@1: &'_1 (()); // arg #1
    let y@2: &'_ (u32); // arg #2

    @0 := copy (y@2)
    return
}

pub fn test_crate::test_closure_ref_u32<'a>(@1: &'a (u32)) -> &'a (u32)
{
    let @0: &'_ (u32); // return
    let x@1: &'_ (u32); // arg #1
    let f@2: fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32); // local
    let @3: test_crate::test_closure_ref_u32::closure; // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_closure_ref_u32::closure<'_>} {}
    f@2 := cast<test_crate::test_closure_ref_u32::closure, fn<'_0>(&'_0_0 (u32)) -> &'_0_0 (u32)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

fn test_crate::test_closure_ref_param::closure<'_0, '_1, T>(@1: &'_1 (()), @2: &'_0 (T)) -> &'_0 (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (T); // return
    let state@1: &'_1 (()); // arg #1
    let x@2: &'_ (T); // arg #2

    @0 := copy (x@2)
    return
}

pub fn test_crate::test_closure_ref_param<'_0, T>(@1: &'_0 (T)) -> &'_0 (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (T); // return
    let x@1: &'_ (T); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // local
    let @3: test_crate::test_closure_ref_param::closure; // anonymous local
    let @4: &'_ (T); // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_closure_ref_param::closure<'_, T>[@TraitClause0]} {}
    f@2 := cast<test_crate::test_closure_ref_param::closure, fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

trait test_crate::Trait<'a, Self>

fn test_crate::test_closure_ref_early_bound::closure<'a, '_1, '_2, T>(@1: &'_2 (()), @2: &'_1 (T)) -> &'_1 (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::Trait<'a, T>,
{
    let @0: &'_ (T); // return
    let state@1: &'_2 (()); // arg #1
    let y@2: &'_ (T); // arg #2

    @0 := copy (y@2)
    return
}

pub fn test_crate::test_closure_ref_early_bound<'a, T>(@1: &'a (T)) -> &'a (T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::Trait<'a, T>,
{
    let @0: &'_ (T); // return
    let x@1: &'_ (T); // arg #1
    let f@2: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // local
    let @3: test_crate::test_closure_ref_early_bound::closure; // anonymous local
    let @4: &'_ (T); // anonymous local
    let @5: fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T); // anonymous local
    let @6: &'_ (T); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_closure_ref_early_bound::closure<'_, '_, T>[@TraitClause0, @TraitClause1]} {}
    f@2 := cast<test_crate::test_closure_ref_early_bound::closure, fn<'_0>(&'_0_0 (T)) -> &'_0_0 (T)>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := copy (f@2)
    storage_live(@6)
    @6 := &*(x@1)
    @4 := (move @5)(move (@6))
    @0 := &*(@4)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(@4)
    return
}

fn test_crate::test_map_option2::closure<'_0>(@1: &'_0 (()), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 (()); // arg #1
    let x@2: u32; // arg #2
    let @3: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@2)
    @0 := copy (@3) + const (1 : u32)
    storage_dead(@3)
    return
}

pub fn test_crate::test_map_option2(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: test_crate::test_map_option2::closure; // anonymous local
    let @4: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @5: fn(u32) -> u32; // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_map_option2::closure} {}
    f@2 := cast<test_crate::test_map_option2::closure, fn(u32) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (x@1)
    storage_live(@5)
    @5 := copy (f@2)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    return
}

pub fn test_crate::id<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

pub fn test_crate::test_map_option_id1(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::id<u32>[core::marker::Sized<u32>]))
    storage_dead(@2)
    return
}

pub fn test_crate::test_map_option_id2(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @4: fn(u32) -> u32; // anonymous local

    storage_live(f@2)
    f@2 := const (test_crate::id<u32>[core::marker::Sized<u32>])
    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (f@2)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    return
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn test_crate::id_clone<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &x@1
    @0 := @TraitClause1::clone<'_>(move (@2))
    storage_dead(@2)
    drop x@1
    return
}

pub fn core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0>(@1: &'_0 (u32)) -> u32

impl core::clone::impls::{impl core::clone::Clone for u32}#8 : core::clone::Clone<u32>
{
    parent_clause0 = core::marker::Sized<u32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u32}#8::clone<'_0_0>
}

pub fn test_crate::test_id_clone(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let f@2: fn(u32) -> u32; // local
    let @3: fn(u32) -> u32; // anonymous local
    let @4: u32; // anonymous local

    storage_live(f@2)
    f@2 := cast<fn(u32) -> u32, fn(u32) -> u32>(const (test_crate::id_clone<u32>[core::marker::Sized<u32>, core::clone::impls::{impl core::clone::Clone for u32}#8]))
    storage_live(@3)
    @3 := copy (f@2)
    storage_live(@4)
    @4 := copy (x@1)
    @0 := (move @3)(move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    return
}

pub fn test_crate::test_id_clone_param<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let f@2: fn(T) -> T; // local
    let @3: fn(T) -> T; // anonymous local
    let @4: T; // anonymous local

    storage_live(f@2)
    f@2 := cast<fn(T) -> T, fn(T) -> T>(const (test_crate::id_clone<T>[@TraitClause0, @TraitClause1]))
    storage_live(@3)
    @3 := copy (f@2)
    storage_live(@4)
    @4 := move (x@1)
    @0 := (move @3)(move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    drop x@1
    return
}

pub fn test_crate::test_map_option_id_clone(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    @0 := test_crate::map_option<u32, fn(u32) -> u32>[core::marker::Sized<u32>, core::marker::Sized<fn(u32) -> u32>, core::ops::function::Fn<fn(u32) -> u32, (u32), u32>](move (@2), const (test_crate::id_clone<u32>[core::marker::Sized<u32>, core::clone::impls::{impl core::clone::Clone for u32}#8]))
    storage_dead(@2)
    return
}

fn test_crate::test_map_option3::closure<'_0>(@1: &'_0 (()), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 (()); // arg #1
    let x@2: u32; // arg #2
    let @3: u32; // anonymous local

    storage_live(@3)
    @3 := copy (x@2)
    @0 := copy (@3) + const (1 : u32)
    storage_dead(@3)
    return
}

pub fn test_crate::test_map_option3(@1: core::option::Option<u32>[core::marker::Sized<u32>]) -> core::option::Option<u32>[core::marker::Sized<u32>]
{
    let @0: core::option::Option<u32>[core::marker::Sized<u32>]; // return
    let x@1: core::option::Option<u32>[core::marker::Sized<u32>]; // arg #1
    let @2: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @3: test_crate::test_map_option3::closure; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    storage_live(@3)
    @3 := {test_crate::test_map_option3::closure} {}
    @0 := test_crate::map_option<u32, test_crate::test_map_option3::closure>[core::marker::Sized<u32>, core::marker::Sized<test_crate::test_map_option3::closure>, core::ops::function::Fn<test_crate::test_map_option3::closure, (u32), u32>](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

fn test_crate::test_regions::closure<'_0, '_1>(@1: &'_1 (()), @2: &'_0 (&'_ (u32))) -> u32
{
    let @0: u32; // return
    let state@1: &'_1 (()); // arg #1
    let x@2: &'_ (&'_ (u32)); // arg #2

    @0 := copy (*(*(x@2)))
    return
}

pub fn test_crate::test_regions<'a>(@1: &'a (u32)) -> u32
{
    let @0: u32; // return
    let x@1: &'_ (u32); // arg #1
    let f@2: fn<'_0>(&'_0_0 (&'_ (u32))) -> u32; // local
    let @3: test_crate::test_regions::closure; // anonymous local
    let @4: fn<'_0>(&'_0_0 (&'_ (u32))) -> u32; // anonymous local
    let @5: &'_ (&'_ (u32)); // anonymous local
    let @6: &'_ (&'_ (u32)); // anonymous local

    storage_live(f@2)
    storage_live(@3)
    @3 := {test_crate::test_regions::closure<'_>} {}
    f@2 := cast<test_crate::test_regions::closure, fn<'_0>(&'_0_0 (&'_ (u32))) -> u32>(move (@3))
    storage_dead(@3)
    storage_live(@4)
    @4 := copy (f@2)
    storage_live(@5)
    storage_live(@6)
    @6 := &x@1
    @5 := &*(@6)
    @0 := (move @4)(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(f@2)
    storage_dead(@6)
    return
}

fn test_crate::test_closure_capture::closure<'_0, '_1, '_2>(@1: &'_0 ((&'_1 (u32), &'_2 (u32))), @2: u32) -> u32
{
    let @0: u32; // return
    let state@1: &'_0 ((&'_1 (u32), &'_2 (u32))); // arg #1
    let z@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := copy (*((*(state@1)).0))
    storage_live(@5)
    @5 := copy (*((*(state@1)).1))
    @3 := copy (@4) + copy (@5)
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    @6 := copy (z@2)
    @0 := copy (@3) + copy (@6)
    storage_dead(@6)
    storage_dead(@3)
    return
}

pub fn test_crate::test_closure_capture(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let f@3: &'_ (test_crate::test_closure_capture::closure); // local
    let @4: test_crate::test_closure_capture::closure; // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local
    let @7: &'_ (test_crate::test_closure_capture::closure); // anonymous local
    let @8: (u32); // anonymous local

    storage_live(f@3)
    storage_live(@4)
    storage_live(@5)
    @5 := &x@1
    storage_live(@6)
    @6 := &y@2
    @4 := {test_crate::test_closure_capture::closure} {move (@5), move (@6)}
    storage_dead(@6)
    storage_dead(@5)
    f@3 := &@4
    storage_live(@7)
    @7 := &*(f@3)
    storage_live(@8)
    @8 := (const (0 : u32))
    @0 := core::ops::function::Fn<test_crate::test_closure_capture::closure, (u32), u32>::call<'_>(move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@4)
    storage_dead(f@3)
    return
}

fn test_crate::test_closure_clone::closure<'_0, T>(@1: &'_0 (()), @2: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: &'_0 (()); // arg #1
    let x@2: T; // arg #2
    let @3: &'_ (T); // anonymous local

    storage_live(@3)
    @3 := &x@2
    @0 := @TraitClause1::clone<'_>(move (@3))
    storage_dead(@3)
    drop x@2
    return
}

pub fn test_crate::test_closure_clone<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1
    let f@2: test_crate::test_closure_clone::closure; // local
    let @3: &'_ (test_crate::test_closure_clone::closure); // anonymous local
    let @4: &'_ (test_crate::test_closure_clone::closure); // anonymous local
    let @5: (T); // anonymous local
    let @6: T; // anonymous local

    storage_live(f@2)
    f@2 := {test_crate::test_closure_clone::closure<T>[@TraitClause0, @TraitClause1]} {}
    storage_live(@3)
    storage_live(@4)
    @4 := &f@2
    @3 := &*(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := move (x@1)
    @5 := (move (@6))
    @0 := core::ops::function::Fn<test_crate::test_closure_clone::closure, (T), T>::call<'_>(move (@3), move (@5))
    drop @6
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@3)
    storage_dead(f@2)
    storage_dead(@4)
    drop x@1
    return
}

fn test_crate::test_array_map::closure<'_0>(@1: &'_0 mut (()), @2: i32) -> i32
{
    let @0: i32; // return
    let state@1: &'_0 mut (()); // arg #1
    let v@2: i32; // arg #2

    @0 := copy (v@2)
    return
}

pub fn core::array::{Array<T, const N : usize>}#23::map<T, F, U, const N : usize>(@1: Array<T, const N : usize>, @2: F) -> Array<U, const N : usize>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T), U>,

pub fn test_crate::test_array_map(@1: Array<i32, 256 : usize>) -> Array<i32, 256 : usize>
{
    let @0: Array<i32, 256 : usize>; // return
    let x@1: Array<i32, 256 : usize>; // arg #1
    let @2: Array<i32, 256 : usize>; // anonymous local
    let @3: test_crate::test_array_map::closure; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    storage_live(@3)
    @3 := {test_crate::test_array_map::closure} {}
    @0 := core::array::{Array<T, const N : usize>}#23::map<i32, test_crate::test_array_map::closure, i32, 256 : usize>[core::marker::Sized<i32>, core::marker::Sized<test_crate::test_array_map::closure>, core::marker::Sized<i32>, core::ops::function::FnMut<test_crate::test_array_map::closure, (i32), i32>](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

struct test_crate::Foo<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
 =
{
  &'a (T),
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'a, '_1, '_2, T>(@1: &'_1 ((&'_2 (T)))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: &'_1 ((&'_2 (T))); // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &*((*(state@1)).0)
    @0 := @TraitClause1::clone<'_>(move (@2))
    storage_dead(@2)
    return
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'a, '_1, '_2, T>(@1: &'_1 ((&'_2 (T)))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure; // return
    let state@1: &'_1 ((&'_2 (T))); // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &*((*(state@1)).0)
    @0 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, T>[@TraitClause0, @TraitClause1]} {move (@2)}
    storage_dead(@2)
    return
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'a, '_1, '_2, T>(@1: &'_1 ((&'_2 (T)))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure; // return
    let state@1: &'_1 ((&'_2 (T))); // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &*((*(state@1)).0)
    @0 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, T>[@TraitClause0, @TraitClause1]} {move (@2)}
    storage_dead(@2)
    return
}

pub fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures<'a, 'b, T>(@1: &'a (&'b (T))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: &'_ (&'_ (T)); // arg #1
    let clo@2: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure; // local
    let @3: &'_ (T); // anonymous local
    let @4: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure); // anonymous local
    let @5: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure; // anonymous local
    let @6: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure); // anonymous local
    let @7: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure; // anonymous local
    let @8: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure); // anonymous local
    let @9: (); // anonymous local
    let @10: (); // anonymous local
    let @11: (); // anonymous local

    storage_live(clo@2)
    storage_live(@3)
    @3 := &*(*(x@1))
    clo@2 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]} {move (@3)}
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &clo@2
    storage_live(@9)
    @9 := ()
    @7 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure, (), test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure>::call<'_>(move (@8), move (@9))
    @6 := &@7
    storage_dead(@9)
    storage_dead(@8)
    storage_live(@10)
    @10 := ()
    @5 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure, (), test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure>::call<'_>(move (@6), move (@10))
    @4 := &@5
    storage_dead(@10)
    storage_dead(@6)
    storage_live(@11)
    @11 := ()
    @0 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure, (), T>::call<'_>(move (@4), move (@11))
    storage_dead(@11)
    storage_dead(@4)
    storage_dead(clo@2)
    storage_dead(@7)
    storage_dead(@5)
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args, Self_Clause0_Output>(@1: &'_0 mut (Self), @2: Args) -> Self_Clause0_Output

pub fn core::ops::function::FnOnce::call_once<Self, Args, Self_Output>(@1: Self, @2: Args) -> Self_Output



