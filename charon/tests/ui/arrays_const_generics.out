# Final LLBC before serialization:

// Full name: test_crate::index_array_generic
pub fn index_array_generic<const N : usize>(@1: Array<u32, const N : usize>, @2: usize) -> u32
{
    let @0: u32; // return
    let s@1: Array<u32, const N : usize>; // arg #1
    let i@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: &'_ (Array<u32, const N : usize>); // anonymous local
    let @5: &'_ (u32); // anonymous local

    storage_live(@3)
    @3 := copy (i@2)
    storage_live(@4)
    @4 := &s@1
    storage_live(@5)
    @5 := @ArrayIndexShared<'_, u32, const N : usize>(move (@4), copy (@3))
    @0 := copy (*(@5))
    storage_dead(@3)
    return
}

// Full name: test_crate::index_array_generic_call
pub fn index_array_generic_call<const N : usize>(@1: Array<u32, const N : usize>, @2: usize) -> u32
{
    let @0: u32; // return
    let s@1: Array<u32, const N : usize>; // arg #1
    let i@2: usize; // arg #2
    let @3: Array<u32, const N : usize>; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (s@1)
    storage_live(@4)
    @4 := copy (i@2)
    @0 := index_array_generic<const N : usize>(move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::const_gen_ret
pub fn const_gen_ret<const N : usize>() -> usize
{
    let @0: usize; // return

    @0 := const (const N : usize)
    return
}

// Full name: test_crate::init_array_variable_len
pub fn init_array_variable_len<const LEN : usize>() -> Array<u8, const LEN : usize>
{
    let @0: Array<u8, const LEN : usize>; // return

    @0 := @ArrayRepeat<'_, u8, const LEN : usize>(const (0 : u8))
    return
}



