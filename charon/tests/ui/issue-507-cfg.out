# Final LLBC before serialization:

fn test_crate::CONST() -> u8
{
    let @0: u8; // return

    @0 := const (0 : u8)
    return
}

global test_crate::CONST: u8 = test_crate::CONST()

fn test_crate::f0()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: (); // anonymous local
    let @3: bool; // anonymous local
    let x@4: u8; // local

    @1 := const (0 : i32) < const (1 : i32)
    if move (@1) {
        @3 := const (0 : i32) < const (1 : i32)
        if move (@3) {
        }
        else {
        }
        drop @3
        drop @2
        x@4 := move (test_crate::CONST)
        @fake_read(x@4)
        @0 := ()
        drop x@4
    }
    else {
        @0 := ()
    }
    drop @1
    @0 := ()
    return
}

fn test_crate::f1<'_0>(@1: &'_0 (Array<u8, 1 : usize>))
{
    let @0: (); // return
    let serialized@1: &'_ (Array<u8, 1 : usize>); // arg #1
    let previous_true_hints_seen@2: usize; // local
    let i@3: i32; // local
    let @4: bool; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: bool; // anonymous local
    let j@9: i32; // local
    let @10: bool; // anonymous local
    let @11: i32; // anonymous local
    let x@12: u8; // local
    let @13: (); // anonymous local
    let @14: (); // anonymous local

    previous_true_hints_seen@2 := const (0 : usize)
    @fake_read(previous_true_hints_seen@2)
    i@3 := const (0 : i32)
    @fake_read(i@3)
    loop {
        @5 := copy (i@3)
        @4 := move (@5) < const (1 : i32)
        if move (@4) {
            drop @5
            @7 := const (0 : i32) < const (1 : i32)
            if move (@7) {
            }
            else {
                @8 := const (1 : i32) > const (1 : i32)
                if move (@8) {
                }
                else {
                }
            }
            drop @8
            drop @7
            drop @6
            j@9 := const (0 : i32)
            @fake_read(j@9)
            loop {
                @11 := copy (j@9)
                @10 := move (@11) < const (1 : i32)
                if move (@10) {
                    drop @11
                    x@12 := move (test_crate::CONST)
                    @fake_read(x@12)
                    drop x@12
                    drop @10
                    continue 0
                }
                else {
                    break 0
                }
            }
            drop @11
            drop @13
            drop @10
            drop j@9
            drop @4
            continue 0
        }
        else {
            break 0
        }
    }
    drop @5
    @0 := ()
    drop @14
    drop @4
    drop i@3
    drop previous_true_hints_seen@2
    @0 := ()
    return
}



