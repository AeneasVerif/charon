# Final LLBC before serialization:

// Full name: test_crate::CONST
fn CONST() -> u8
{
    let @0: u8; // return

    @0 := const (0 : u8)
    return
}

// Full name: test_crate::CONST
const CONST: u8 = CONST()

// Full name: test_crate::f0
fn f0()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: (); // anonymous local
    let @3: bool; // anonymous local
    let x@4: u8; // local
    let @5: u8; // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(x@4)
    storage_live(@5)
    storage_live(@1)
    @1 := const (0 : i32) < const (1 : i32)
    if move (@1) {
        storage_live(@2)
        storage_live(@3)
        @3 := const (0 : i32) < const (1 : i32)
        if move (@3) {
        }
        else {
        }
        storage_dead(@3)
        storage_dead(@2)
        storage_live(x@4)
        @5 := CONST
        x@4 := move (@5)
        @0 := ()
        storage_dead(x@4)
    }
    else {
        @0 := ()
    }
    storage_dead(@1)
    @0 := ()
    return
}

// Full name: test_crate::f1
fn f1<'_0>(@1: &'_0 (Array<u8, 1 : usize>))
{
    let @0: (); // return
    let serialized@1: &'_ (Array<u8, 1 : usize>); // arg #1
    let previous_true_hints_seen@2: usize; // local
    let i@3: i32; // local
    let @4: bool; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: bool; // anonymous local
    let j@9: i32; // local
    let @10: bool; // anonymous local
    let @11: i32; // anonymous local
    let x@12: u8; // local
    let @13: (); // anonymous local
    let @14: (); // anonymous local
    let @15: u8; // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(j@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(x@12)
    storage_live(@13)
    storage_live(@15)
    storage_live(previous_true_hints_seen@2)
    previous_true_hints_seen@2 := const (0 : usize)
    storage_live(i@3)
    i@3 := const (0 : i32)
    loop {
        storage_live(@4)
        storage_live(@5)
        @5 := copy (i@3)
        @4 := move (@5) < const (1 : i32)
        if move (@4) {
            storage_dead(@5)
            storage_live(@6)
            storage_live(@7)
            @7 := const (0 : i32) < const (1 : i32)
            if move (@7) {
            }
            else {
                storage_live(@8)
                @8 := const (1 : i32) > const (1 : i32)
                if move (@8) {
                }
                else {
                }
            }
            storage_dead(@8)
            storage_dead(@7)
            storage_dead(@6)
            storage_live(j@9)
            j@9 := const (0 : i32)
            loop {
                storage_live(@10)
                storage_live(@11)
                @11 := copy (j@9)
                @10 := move (@11) < const (1 : i32)
                if move (@10) {
                    storage_dead(@11)
                    storage_live(x@12)
                    @15 := CONST
                    x@12 := move (@15)
                    storage_dead(x@12)
                    storage_dead(@10)
                    continue 0
                }
                else {
                    break 0
                }
            }
            storage_dead(@11)
            storage_live(@13)
            storage_dead(@13)
            storage_dead(@10)
            storage_dead(j@9)
            storage_dead(@4)
            continue 0
        }
        else {
            break 0
        }
    }
    storage_dead(@5)
    storage_live(@14)
    @0 := ()
    storage_dead(@14)
    storage_dead(@4)
    storage_dead(i@3)
    storage_dead(previous_true_hints_seen@2)
    @0 := ()
    return
}



