# Final LLBC before serialization:

fn test_crate::CONST() -> u8
{
    let @0: u8; // return

    @0 := const (0 : u8)
    return
}

global test_crate::CONST: u8 = test_crate::CONST()

fn test_crate::f()
{
    let @0: (); // return
    let @1: bool; // anonymous local
    let @2: (); // anonymous local
    let @3: bool; // anonymous local
    let x@4: u8; // local
    let @5: (); // anonymous local
    let @6: (); // anonymous local
    let @7: (); // anonymous local
    let @8: u8; // anonymous local
    let @9: (); // anonymous local

    @1 := const (0 : i32) < const (1 : i32)
    if move (@1) {
        @3 := const (0 : i32) < const (1 : i32)
        if move (@3) {
            @6 := ()
            @2 := move (@6)
        }
        else {
            @7 := ()
            @2 := move (@7)
        }
        drop @3
        drop @2
        @8 := test_crate::CONST
        x@4 := move (@8)
        @fake_read(x@4)
        @9 := ()
        @0 := move (@9)
        drop x@4
    }
    else {
        @5 := ()
        @0 := move (@5)
    }
    drop @1
    @0 := ()
    return
}



