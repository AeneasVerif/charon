# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args, Self_Output>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self_Output>
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args, Self_Output>[Self]
    non-dyn-compatible
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args, Self_Clause1_Output>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args, Self_Clause1_Output>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args, Self_Clause1_Output>[Self]
    non-dyn-compatible
}

// Full name: core::ops::function::Fn
#[lang_item("r#fn")]
pub trait Fn<Self, Args, Self_Clause1_Clause1_Output>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnMut<Self, Args, Self_Clause1_Clause1_Output>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args, Self_Clause1_Clause1_Output>[Self]
    non-dyn-compatible
}

pub fn core::ops::function::Fn::call<'_0, Self, Args, Clause0_Clause1_Clause1_Output>(@1: &'_0 (Self), @2: Args) -> Clause0_Clause1_Clause1_Output
where
    [@TraitClause0]: Fn<Self, Args, Clause0_Clause1_Clause1_Output>,

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args, Clause0_Clause1_Output>(@1: &'_0 mut (Self), @2: Args) -> Clause0_Clause1_Output
where
    [@TraitClause0]: FnMut<Self, Args, Clause0_Clause1_Output>,

pub fn core::ops::function::FnOnce::call_once<Self, Args, Clause0_Output>(@1: Self, @2: Args) -> Clause0_Output
where
    [@TraitClause0]: FnOnce<Self, Args, Clause0_Output>,

// Full name: test_crate::PrimeField
pub trait PrimeField<Self, Self_Repr>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self_Repr>
    non-dyn-compatible
}

// Full name: test_crate::SqrtTables
pub struct SqrtTables<F>
where
    [@TraitClause0]: Sized<F>,
{
  F,
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::closure
struct closure<F, Clause1_Repr>
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common
pub fn sqrt_common<F, Clause1_Repr>()
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    let @0: (); // return
    let _closure@1: closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]; // local

    storage_live(_closure@1)
    _closure@1 := closure {  }
    @0 := ()
    storage_dead(_closure@1)
    @0 := ()
    return
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call
fn {impl Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call<'_0, F, Clause1_Repr>(@1: &'_0 (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]), @2: (()))
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    let @0: (); // return
    let @1: &'_ (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]); // arg #1
    let tupled_args@2: (()); // arg #2
    let _x@3: (); // local

    storage_live(_x@3)
    _x@3 := move ((tupled_args@2).0)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_mut
fn {impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_mut<'_0, F, Clause1_Repr>(@1: &'_0 mut (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]), @2: (()))
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    let @0: (); // return
    let state@1: &'_0 mut (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]); // arg #1
    let args@2: (()); // arg #2
    let @3: &'_ (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := {impl Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call<'_, F, Clause1_Repr>[@TraitClause0, @TraitClause1](move (@3), move (args@2))
    @0 := ()
    return
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_once
fn {impl FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_once<F, Clause1_Repr>(@1: closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1], @2: (()))
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    let @0: (); // return
    let @1: closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]; // arg #1
    let @2: (()); // arg #2
    let @3: &'_ mut (closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_mut<'_, F, Clause1_Repr>[@TraitClause0, @TraitClause1](move (@3), move (@2))
    drop[Drop<closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]>] @1
    @0 := ()
    return
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}
impl<F, Clause1_Repr> FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    parent_clause0 = MetaSized<closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]>
    parent_clause1 = Sized<(())>
    parent_clause2 = Tuple<(())>
    parent_clause3 = Sized<()>
    fn call_once = {impl FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_once<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}
impl<F, Clause1_Repr> FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    parent_clause0 = MetaSized<closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]>
    parent_clause1 = {impl FnOnce<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
    parent_clause2 = Sized<(())>
    parent_clause3 = Tuple<(())>
    fn call_mut<'_0> = {impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call_mut<'_0_0, F, Clause1_Repr>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}

// Full name: test_crate::{SqrtTables<F>[@TraitClause0]}::sqrt_common::{impl Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}
impl<F, Clause1_Repr> Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: PrimeField<F, Clause1_Repr>,
{
    parent_clause0 = MetaSized<closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]>
    parent_clause1 = {impl FnMut<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}<F, Clause1_Repr>[@TraitClause0, @TraitClause1]
    parent_clause2 = Sized<(())>
    parent_clause3 = Tuple<(())>
    fn call<'_0> = {impl Fn<(()), ()> for closure<F, Clause1_Repr>[@TraitClause0, @TraitClause1]}::call<'_0_0, F, Clause1_Repr>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}



