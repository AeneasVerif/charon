# Final LLBC before serialization:

struct test_crate::S<'a, K>
  where
      K : 'a,
 =
{
  x: &'a (K),
}

trait core::ops::function::FnOnce<Self, Args>
{
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause_0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    fn call_mut : core::ops::function::FnMut::call_mut
}

fn test_crate::{test_crate::S<'a, K>}::f<'a, K, F>()
where
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (u32))>,
    for<'_1_0> (parents(@TraitClause2)::[@TraitClause0])::Output = (),
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

fn test_crate::{test_crate::S<'a, K>}::g<'a, K, F>()
where
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (u32))>,
    for<'b> (parents(@TraitClause2)::[@TraitClause0])::Output = (),
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

struct test_crate::T = {}

fn test_crate::{test_crate::T}#1::f<F>()
where
    [@TraitClause1]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (u32))>,
    for<'_1_0> (parents(@TraitClause1)::[@TraitClause0])::Output = (),
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> (parents(Self)::[@TraitClause0])::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



