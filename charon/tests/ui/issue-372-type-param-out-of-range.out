# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub struct test_crate::S<'a, K>
  where
      [@TraitClause0]: core::marker::Sized<K>,
      K : 'a,
 =
{
  x: &'a (K),
}

pub struct test_crate::T = {}

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

pub fn test_crate::{test_crate::S<'a, K>[@TraitClause0]}::f<'a, K, F>()
where
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (u32))>,
    for<'_0> @TraitClause2::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

pub fn test_crate::{test_crate::S<'a, K>[@TraitClause0]}::g<'a, K, F>()
where
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: for<'b> core::ops::function::FnMut<F, (&'b (u32))>,
    for<'b> @TraitClause2::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

pub fn test_crate::{test_crate::T}#1::f<F>()
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: for<'_0> core::ops::function::FnMut<F, (&'_0_0 (u32))>,
    for<'_0> @TraitClause1::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



