# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::S
pub struct S<'a, K>
where
    [@TraitClause0]: Sized<K>,
    K : 'a,
{
  x: &'a (K),
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: Sized<Args>
    parent_clause1 : [@TraitClause1]: Tuple<Args>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    type Output
    fn call_once = call_once<Self, Args>[Self]
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    fn call_mut<'_0> = call_mut<'_0_0, Self, Args>[Self]
}

pub fn test_crate::{S<'a, K>[@TraitClause0]}::f<'a, K, F>()
where
    [@TraitClause0]: Sized<K>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: for<'_0> FnMut<F, (&'_0_0 (u32))>,
    for<'_0> @TraitClause2::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{S<'a, K>[@TraitClause0]}::g
pub fn g<'a, K, F>()
where
    [@TraitClause0]: Sized<K>,
    [@TraitClause1]: Sized<F>,
    [@TraitClause2]: for<'b> FnMut<F, (&'b (u32))>,
    for<'b> @TraitClause2::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::T
pub struct T {}

pub fn test_crate::{T}#1::f<F>()
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: for<'_0> FnMut<F, (&'_0_0 (u32))>,
    for<'_0> @TraitClause1::parent_clause0::Output = (),
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: core::ops::function::FnMut::call_mut
pub fn call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause0::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

// Full name: core::ops::function::FnOnce::call_once
pub fn call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,



