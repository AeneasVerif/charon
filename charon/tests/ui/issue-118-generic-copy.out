[ INFO charon_driver::driver:338] [translate]: # Final LLBC before serialization:

struct test_crate::Foo = {}

trait core::clone::Clone<Self>
{
    fn clone : core::clone::Clone::clone
    fn clone_from
}

fn test_crate::{impl core::clone::Clone for test_crate::Foo}::clone<'_0>(@1: &'_0 (test_crate::Foo)) -> test_crate::Foo
{
    let @0: test_crate::Foo; // return
    let self@1: &'_ (test_crate::Foo); // arg #1

    @0 := copy (*(self@1))
    return
}

impl test_crate::{impl core::clone::Clone for test_crate::Foo} : core::clone::Clone<test_crate::Foo>
{
    fn clone = test_crate::{impl core::clone::Clone for test_crate::Foo}::clone
}

trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

impl test_crate::{impl core::marker::Copy for test_crate::Foo#1} : core::marker::Copy<test_crate::Foo>
{
    parent_clause0 = test_crate::{impl core::clone::Clone for test_crate::Foo}
}

fn test_crate::copy_foo(@1: test_crate::Foo)
{
    let @0: (); // return
    let x@1: test_crate::Foo; // arg #1
    let y@2: test_crate::Foo; // local
    let z@3: test_crate::Foo; // local
    let @4: (); // anonymous local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @4 := ()
    @0 := move (@4)
    drop z@3
    drop y@2
    @0 := ()
    return
}

fn test_crate::copy_generic<T>(@1: T)
where
    [@TraitClause0]: core::marker::Copy<T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: T; // local
    let z@3: T; // local
    let @4: (); // anonymous local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @4 := ()
    @0 := move (@4)
    drop z@3
    drop y@2
    @0 := ()
    return
}

trait test_crate::Trait<Self>
{
    type Ty
        where
            [@TraitClause0]: core::marker::Copy<Self::Ty>,
            [@TraitClause1]: core::clone::Clone<Self::Ty>,
}

fn test_crate::copy_assoc_ty<T>(@1: @TraitClause0::Ty)
where
    [@TraitClause0]: test_crate::Trait<T>,
{
    let @0: (); // return
    let x@1: @TraitClause0::Ty; // arg #1
    let y@2: @TraitClause0::Ty; // local
    let z@3: @TraitClause0::Ty; // local
    let @4: (); // anonymous local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @4 := ()
    @0 := move (@4)
    drop z@3
    drop y@2
    @0 := ()
    return
}

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



