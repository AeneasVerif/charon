# Final LLBC before serialization:

struct test_crate::Foo = {}

pub trait core::marker::Sized<Self>

pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

pub fn test_crate::{impl core::clone::Clone for test_crate::Foo}::clone<'_0>(@1: &'_0 (test_crate::Foo)) -> test_crate::Foo
{
    let @0: test_crate::Foo; // return
    let self@1: &'_ (test_crate::Foo); // arg #1

    @0 := copy (*(self@1))
    return
}

impl test_crate::{impl core::clone::Clone for test_crate::Foo} : core::clone::Clone<test_crate::Foo>
{
    parent_clause0 = core::marker::Sized<test_crate::Foo>
    fn clone<'_0> = test_crate::{impl core::clone::Clone for test_crate::Foo}::clone<'_0_0>
}

pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

impl test_crate::{impl core::marker::Copy for test_crate::Foo}#1 : core::marker::Copy<test_crate::Foo>
{
    parent_clause0 = test_crate::{impl core::clone::Clone for test_crate::Foo}
}

fn test_crate::copy_foo(@1: test_crate::Foo)
{
    let @0: (); // return
    let x@1: test_crate::Foo; // arg #1
    let y@2: test_crate::Foo; // local
    let z@3: test_crate::Foo; // local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @0 := ()
    drop z@3
    drop y@2
    @0 := ()
    return
}

fn test_crate::copy_generic<T>(@1: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let y@2: T; // local
    let z@3: T; // local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @0 := ()
    drop z@3
    drop y@2
    @0 := ()
    return
}

trait test_crate::Trait<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Ty>
    parent_clause1 : [@TraitClause1]: core::marker::Copy<Self::Ty>
    type Ty
}

fn test_crate::copy_assoc_ty<T>(@1: @TraitClause1::Ty)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: test_crate::Trait<T>,
{
    let @0: (); // return
    let x@1: @TraitClause1::Ty; // arg #1
    let y@2: @TraitClause1::Ty; // local
    let z@3: @TraitClause1::Ty; // local

    y@2 := copy (x@1)
    @fake_read(y@2)
    z@3 := copy (x@1)
    @fake_read(z@3)
    @0 := ()
    drop z@3
    drop y@2
    @0 := ()
    return
}

pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



