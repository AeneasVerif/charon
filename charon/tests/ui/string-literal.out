# Final LLBC before serialization:

fn test_crate::FOO() -> &'static (Str)
{
    let @0: &'_ (Str); // return

    @0 := const ("hello")
    return
}

global test_crate::FOO: &'static (Str) = test_crate::FOO()

fn test_crate::BAR() -> &'static (Slice<u8>)
{
    let @0: &'_ (Slice<u8>); // return
    let @1: &'_ (Array<u8, 5 : usize>); // anonymous local
    let @2: &'_ (Array<u8, 5 : usize>); // anonymous local
    let @3: Array<u8, 5 : usize>; // anonymous local
    let @4: &'_ (Array<u8, 5 : usize>); // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@1)
    storage_live(@2)
    @3 := [const (104 : u8), const (101 : u8), const (108 : u8), const (108 : u8), const (111 : u8)]
    @4 := &@3
    @2 := move (@4)
    @1 := &*(@2)
    @0 := @ArrayToSliceShared<'_, u8, 5 : usize>(move (@1))
    storage_dead(@2)
    storage_dead(@1)
    return
}

global test_crate::BAR: &'static (Slice<u8>) = test_crate::BAR()

#[lang_item("String")]
pub opaque type alloc::string::String

#[lang_item("Formatter")]
pub opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::Error = {}

#[lang_item("Display")]
pub trait core::fmt::Display<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Display::fmt<'_0_0, '_0_1, '_0_2, Self>
}

pub fn alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_0, T>(@1: &'_0 (T)) -> alloc::string::String
where
    [@TraitClause0]: core::fmt::Display<T>,

pub fn core::fmt::{impl core::fmt::Display for Str}#19::fmt<'_0, '_1, '_2>(@1: &'_0 (Str), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

impl core::fmt::{impl core::fmt::Display for Str}#19 : core::fmt::Display<Str>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::{impl core::fmt::Display for Str}#19::fmt<'_0_0, '_0_1, '_0_2>
}

fn test_crate::main()
{
    let @0: (); // return
    let _s@1: alloc::string::String; // local
    let @2: &'_ (Str); // anonymous local
    let @3: &'_ (Str); // anonymous local

    storage_live(_s@1)
    storage_live(@2)
    storage_live(@3)
    @3 := const ("Hello")
    @2 := &*(@3)
    _s@1 := alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_, Str>[core::fmt::{impl core::fmt::Display for Str}#19](move (@2))
    storage_dead(@2)
    storage_dead(@3)
    @0 := ()
    drop _s@1
    storage_dead(_s@1)
    @0 := ()
    return
}

#[lang_item("ToString")]
pub trait alloc::string::ToString<Self>
{
    fn to_string<'_0> = alloc::string::ToString::to_string<'_0_0, Self>
}

#[lang_item("to_string_method")]
pub fn alloc::string::ToString::to_string<'_0, Self>(@1: &'_0 (Self)) -> alloc::string::String

impl alloc::string::{impl alloc::string::ToString for T}#34<T> : alloc::string::ToString<T>
where
    [@TraitClause0]: core::fmt::Display<T>,
{
    fn to_string<'_0> = alloc::string::{impl alloc::string::ToString for T}#34::to_string<'_0_0, T>[@TraitClause0]
}

pub fn core::fmt::Display::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]



