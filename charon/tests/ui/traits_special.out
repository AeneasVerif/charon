# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: test_crate::From
pub trait From<Self, T>
{
    parent_clause0 : [@TraitClause0]: Sized<T>
    parent_clause1 : [@TraitClause1]: Sized<Self::Error>
    type Error
    fn from<[@TraitClause0]: Sized<Self>> = test_crate::From::from<Self, T>[@TraitClause0_0]
}

// Full name: test_crate::{impl From<&'_0 (bool)> for bool}::from
pub fn {impl From<&'_0 (bool)> for bool}::from<'_0>(@1: &'_0 (bool)) -> Result<bool, ()>[Sized<bool>, Sized<()>]
{
    let @0: Result<bool, ()>[Sized<bool>, Sized<()>]; // return
    let v@1: &'_ (bool); // arg #1
    let @2: bool; // anonymous local

    storage_live(@2)
    @2 := copy (*(v@1))
    @0 := Result::Ok { 0: move (@2) }
    storage_dead(@2)
    return
}

// Full name: test_crate::{impl From<&'_0 (bool)> for bool}
impl<'_0> From<&'_0 (bool)> for bool {
    parent_clause0 = Sized<&'_ (bool)>
    parent_clause1 = Sized<()>
    type Error = ()
    fn from = {impl From<&'_0 (bool)> for bool}::from<'_0>
}

pub fn test_crate::From::from<Self, T>(@1: T) -> Result<Self, Self::Error>[@TraitClause0, Self::parent_clause1]
where
    [@TraitClause0]: Sized<Self>,



