# Final LLBC before serialization:

// Full name: test_crate::Trait
trait Trait<Self>
{
    fn required<'_0> = test_crate::Trait::required<'_0_0, Self>
    fn provided1<'_0> = test_crate::Trait::provided1<'_0_0, Self>
    fn provided2<'_0> = provided2<'_0_0, Self>
}

// Full name: test_crate::Foo
struct Foo {}

// Full name: test_crate::{impl Trait for Foo}::required
fn {impl Trait for Foo}::required<'_0>(@1: &'_0 (Foo))
{
    let @0: (); // return
    let self@1: &'_ (Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Foo); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := test_crate::{impl Trait for Foo}::provided1<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl Trait for Foo}::provided1<'_0>(@1: &'_0 (Foo))
{
    let @0: (); // return
    let self@1: &'_ (Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Foo); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Foo); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := {impl Trait for Foo}::required<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    @4 := test_crate::{impl Trait for Foo}::provided2<'_>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl Trait for Foo}::provided2<'_0>(@1: &'_0 (Foo))
{
    let @0: (); // return
    let self@1: &'_ (Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Foo); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Foo); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := {impl Trait for Foo}::required<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    @4 := test_crate::{impl Trait for Foo}::provided1<'_>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait for Foo}
impl Trait for Foo {
    fn required<'_0> = {impl Trait for Foo}::required<'_0_0>
    fn provided1<'_0> = test_crate::{impl Trait for Foo}::provided1<'_0_0>
    fn provided2<'_0> = test_crate::{impl Trait for Foo}::provided2<'_0_0>
}

// Full name: test_crate::Bar
struct Bar {}

// Full name: test_crate::{impl Trait for Bar}#1::required
fn {impl Trait for Bar}#1::required<'_0>(@1: &'_0 (Bar))
{
    let @0: (); // return
    let self@1: &'_ (Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Bar); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := test_crate::{impl Trait for Bar}#1::provided2<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait for Bar}#1::provided1
fn {impl Trait for Bar}#1::provided1<'_0>(@1: &'_0 (Bar))
{
    let @0: (); // return
    let self@1: &'_ (Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Bar); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := test_crate::{impl Trait for Bar}#1::provided2<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::{impl Trait for Bar}#1::provided2<'_0>(@1: &'_0 (Bar))
{
    let @0: (); // return
    let self@1: &'_ (Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Bar); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Bar); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := {impl Trait for Bar}#1::required<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    @4 := {impl Trait for Bar}#1::provided1<'_>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Trait for Bar}#1
impl Trait for Bar {
    fn required<'_0> = {impl Trait for Bar}#1::required<'_0_0>
    fn provided1<'_0> = {impl Trait for Bar}#1::provided1<'_0_0>
    fn provided2<'_0> = test_crate::{impl Trait for Bar}#1::provided2<'_0_0>
}

fn test_crate::Trait::required<'_0, Self>(@1: &'_0 (Self))

fn test_crate::Trait::provided1<'_0, Self>(@1: &'_0 (Self))
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Self); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Self); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := Self::required<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    @4 := Self::provided2<'_>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::Trait::provided2
fn provided2<'_0, Self>(@1: &'_0 (Self))
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Self); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Self); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &*(self@1)
    @2 := Self::required<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@4)
    storage_live(@5)
    @5 := &*(self@1)
    @4 := Self::provided1<'_>(move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    @0 := ()
    return
}



