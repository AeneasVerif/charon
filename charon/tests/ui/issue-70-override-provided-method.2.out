# Final LLBC before serialization:

trait test_crate::Trait<Self>
{
    fn required<'_0> = test_crate::Trait::required<'_0_0, Self>
    fn provided1<'_0> = test_crate::Trait::provided1<'_0_0, Self>
    fn provided2<'_0> = test_crate::Trait::provided2<'_0_0, Self>
}

struct test_crate::Foo = {}

fn test_crate::{impl test_crate::Trait for test_crate::Foo}::required<'_0>(@1: &'_0 (test_crate::Foo))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Foo); // anonymous local
    let @4: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Foo}::provided1<'_>(move (@3))
    drop @3
    drop @2
    @4 := ()
    @0 := move (@4)
    @0 := ()
    return
}

fn test_crate::{impl test_crate::Trait for test_crate::Foo}::provided1<'_0>(@1: &'_0 (test_crate::Foo))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Foo); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (test_crate::Foo); // anonymous local
    let @6: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Foo}::required<'_>(move (@3))
    drop @3
    drop @2
    @5 := &*(self@1)
    @4 := test_crate::{impl test_crate::Trait for test_crate::Foo}::provided2<'_>(move (@5))
    drop @5
    drop @4
    @6 := ()
    @0 := move (@6)
    @0 := ()
    return
}

fn test_crate::{impl test_crate::Trait for test_crate::Foo}::provided2<'_0>(@1: &'_0 (test_crate::Foo))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Foo); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Foo); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (test_crate::Foo); // anonymous local
    let @6: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Foo}::required<'_>(move (@3))
    drop @3
    drop @2
    @5 := &*(self@1)
    @4 := test_crate::{impl test_crate::Trait for test_crate::Foo}::provided1<'_>(move (@5))
    drop @5
    drop @4
    @6 := ()
    @0 := move (@6)
    @0 := ()
    return
}

impl test_crate::{impl test_crate::Trait for test_crate::Foo} : test_crate::Trait<test_crate::Foo>
{
    fn required<'_0> = test_crate::{impl test_crate::Trait for test_crate::Foo}::required<'_0_0>
    fn provided1<'_0> = test_crate::{impl test_crate::Trait for test_crate::Foo}::provided1<'_0_0>
    fn provided2<'_0> = test_crate::{impl test_crate::Trait for test_crate::Foo}::provided2<'_0_0>
}

struct test_crate::Bar = {}

fn test_crate::{impl test_crate::Trait for test_crate::Bar}#1::required<'_0>(@1: &'_0 (test_crate::Bar))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Bar); // anonymous local
    let @4: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided2<'_>(move (@3))
    drop @3
    drop @2
    @4 := ()
    @0 := move (@4)
    @0 := ()
    return
}

fn test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided1<'_0>(@1: &'_0 (test_crate::Bar))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Bar); // anonymous local
    let @4: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided2<'_>(move (@3))
    drop @3
    drop @2
    @4 := ()
    @0 := move (@4)
    @0 := ()
    return
}

fn test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided2<'_0>(@1: &'_0 (test_crate::Bar))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::Bar); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (test_crate::Bar); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (test_crate::Bar); // anonymous local
    let @6: (); // anonymous local

    @3 := &*(self@1)
    @2 := test_crate::{impl test_crate::Trait for test_crate::Bar}#1::required<'_>(move (@3))
    drop @3
    drop @2
    @5 := &*(self@1)
    @4 := test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided1<'_>(move (@5))
    drop @5
    drop @4
    @6 := ()
    @0 := move (@6)
    @0 := ()
    return
}

impl test_crate::{impl test_crate::Trait for test_crate::Bar}#1 : test_crate::Trait<test_crate::Bar>
{
    fn required<'_0> = test_crate::{impl test_crate::Trait for test_crate::Bar}#1::required<'_0_0>
    fn provided1<'_0> = test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided1<'_0_0>
    fn provided2<'_0> = test_crate::{impl test_crate::Trait for test_crate::Bar}#1::provided2<'_0_0>
}

fn test_crate::Trait::required<'_0, Self>(@1: &'_0 (Self))

fn test_crate::Trait::provided1<'_0, Self>(@1: &'_0 (Self))
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Self); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Self); // anonymous local
    let @6: (); // anonymous local

    @3 := &*(self@1)
    @2 := Self::required<'_>(move (@3))
    drop @3
    drop @2
    @5 := &*(self@1)
    @4 := Self::provided2<'_>(move (@5))
    drop @5
    drop @4
    @6 := ()
    @0 := move (@6)
    @0 := ()
    return
}

fn test_crate::Trait::provided2<'_0, Self>(@1: &'_0 (Self))
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (Self); // anonymous local
    let @4: (); // anonymous local
    let @5: &'_ (Self); // anonymous local
    let @6: (); // anonymous local

    @3 := &*(self@1)
    @2 := Self::required<'_>(move (@3))
    drop @3
    drop @2
    @5 := &*(self@1)
    @4 := Self::provided1<'_>(move (@5))
    drop @5
    drop @4
    @6 := ()
    @0 := move (@6)
    @0 := ()
    return
}



