# Final LLBC before serialization:

trait core::marker::Sized<Self>

opaque type std::collections::hash::map::HashMap<K, V, S>
  where
      [@TraitClause0]: core::marker::Sized<K>,
      [@TraitClause1]: core::marker::Sized<V>,
      [@TraitClause2]: core::marker::Sized<S>,

opaque type std::hash::random::RandomState

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq : core::cmp::PartialEq::eq
    fn ne : core::cmp::PartialEq::ne
}

trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
    fn assert_receiver_is_total_eq : core::cmp::Eq::assert_receiver_is_total_eq
}

trait core::hash::Hasher<Self>
{
    fn finish : core::hash::Hasher::finish
    fn write : core::hash::Hasher::write
    fn write_u8 : core::hash::Hasher::write_u8
    fn write_u16 : core::hash::Hasher::write_u16
    fn write_u32 : core::hash::Hasher::write_u32
    fn write_u64 : core::hash::Hasher::write_u64
    fn write_u128 : core::hash::Hasher::write_u128
    fn write_usize : core::hash::Hasher::write_usize
    fn write_i8 : core::hash::Hasher::write_i8
    fn write_i16 : core::hash::Hasher::write_i16
    fn write_i32 : core::hash::Hasher::write_i32
    fn write_i64 : core::hash::Hasher::write_i64
    fn write_i128 : core::hash::Hasher::write_i128
    fn write_isize : core::hash::Hasher::write_isize
    fn write_length_prefix : core::hash::Hasher::write_length_prefix
    fn write_str : core::hash::Hasher::write_str
}

trait core::hash::Hash<Self>
{
    fn hash : core::hash::Hash::hash
    fn hash_slice : core::hash::Hash::hash_slice
}

trait core::hash::BuildHasher<Self>
{
    parent_clause0 : [@TraitClause0]: core::hash::Hasher<Self::Hasher>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Hasher>
    type Hasher
    fn build_hasher : core::hash::BuildHasher::build_hasher
    fn hash_one : core::hash::BuildHasher::hash_one
}

trait core::borrow::Borrow<Self, Borrowed>
{
    fn borrow : core::borrow::Borrow::borrow
}

fn std::collections::hash::map::{std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#2::get<'_0, '_1, K, V, S, Q>(@1: &'_0 (std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]), @2: &'_1 (Q)) -> core::option::Option<&'_0 (V)>[core::marker::Sized<&'_1_0 (V)>]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<V>,
    [@TraitClause2]: core::marker::Sized<S>,
    [@TraitClause3]: core::cmp::Eq<K>,
    [@TraitClause4]: core::hash::Hash<K>,
    [@TraitClause5]: core::hash::BuildHasher<S>,
    // Local clauses:
    [@TraitClause6]: core::borrow::Borrow<K, Q>,
    [@TraitClause7]: core::hash::Hash<Q>,
    [@TraitClause8]: core::cmp::Eq<Q>,

fn core::borrow::{impl core::borrow::Borrow<T> for T}::borrow<'_0, T>(@1: &'_0 (T)) -> &'_0 (T)

impl<T> core::borrow::{impl core::borrow::Borrow<T> for T}<T> : core::borrow::Borrow<T, T>
{
    fn borrow = core::borrow::{impl core::borrow::Borrow<T> for T}::borrow
}

fn core::hash::impls::{impl core::hash::Hash for u32}#11::hash<'_0, '_1, H>(@1: &'_0 (u32), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,

fn core::hash::impls::{impl core::hash::Hash for u32}#11::hash_slice<'_0, '_1, H>(@1: &'_0 (Slice<u32>), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,

impl core::hash::impls::{impl core::hash::Hash for u32}#11 : core::hash::Hash<u32>
{
    fn hash = core::hash::impls::{impl core::hash::Hash for u32}#11::hash
    fn hash_slice = core::hash::impls::{impl core::hash::Hash for u32}#11::hash_slice
}

fn core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::eq<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> bool

fn core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::ne<'_0, '_1>(@1: &'_0 (u32), @2: &'_1 (u32)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24 : core::cmp::PartialEq<u32, u32>
{
    fn eq = core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::eq
    fn ne = core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24::ne
}

impl core::cmp::impls::{impl core::cmp::Eq for u32}#43 : core::cmp::Eq<u32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<u32> for u32}#24
}

opaque type std::hash::random::DefaultHasher

fn std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::finish<'_0>(@1: &'_0 (std::hash::random::DefaultHasher)) -> u64

fn std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::write<'_0, '_1>(@1: &'_0 mut (std::hash::random::DefaultHasher), @2: &'_1 (Slice<u8>))

fn std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::write_str<'_0, '_1>(@1: &'_0 mut (std::hash::random::DefaultHasher), @2: &'_1 (Str))

impl std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4 : core::hash::Hasher<std::hash::random::DefaultHasher>
{
    fn finish = std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::finish
    fn write = std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::write
    fn write_str = std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4::write_str
}

fn std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1::build_hasher<'_0>(@1: &'_0 (std::hash::random::RandomState)) -> std::hash::random::DefaultHasher

impl std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1 : core::hash::BuildHasher<std::hash::random::RandomState>
{
    parent_clause0 = std::hash::random::{impl core::hash::Hasher for std::hash::random::DefaultHasher}#4
    parent_clause1 = core::marker::Sized<std::hash::random::DefaultHasher>
    type Hasher = std::hash::random::DefaultHasher
    fn build_hasher = std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1::build_hasher
}

fn std::collections::hash::map::{std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#2::insert<'_0, K, V, S>(@1: &'_0 mut (std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]), @2: K, @3: V) -> core::option::Option<V>[@TraitClause1]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<V>,
    [@TraitClause2]: core::marker::Sized<S>,
    [@TraitClause3]: core::cmp::Eq<K>,
    [@TraitClause4]: core::hash::Hash<K>,
    [@TraitClause5]: core::hash::BuildHasher<S>,

fn std::collections::hash::map::{impl core::ops::index::Index<&'_0 (Q)> for std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#9::index<'_0, '_1, '_2, K, Q, V, S>(@1: &'_1 (std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]), @2: &'_2 (Q)) -> &'_1 (V)
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<V>,
    [@TraitClause2]: core::marker::Sized<S>,
    [@TraitClause3]: core::cmp::Eq<K>,
    [@TraitClause4]: core::hash::Hash<K>,
    [@TraitClause5]: core::borrow::Borrow<K, Q>,
    [@TraitClause6]: core::cmp::Eq<Q>,
    [@TraitClause7]: core::hash::Hash<Q>,
    [@TraitClause8]: core::hash::BuildHasher<S>,

fn test_crate::get_or_insert<'_0>(@1: &'_0 mut (std::collections::hash::map::HashMap<u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>])) -> &'_0 (u32)
{
    let @0: &'_ (u32); // return
    let map@1: &'_ mut (std::collections::hash::map::HashMap<u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>]); // arg #1
    let @2: core::option::Option<&'_ (u32)>[core::marker::Sized<&'_ (u32)>]; // anonymous local
    let @3: &'_ (std::collections::hash::map::HashMap<u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>]); // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: u32; // anonymous local
    let v@7: &'_ (u32); // local
    let @8: core::option::Option<u32>[core::marker::Sized<u32>]; // anonymous local
    let @9: &'_ mut (std::collections::hash::map::HashMap<u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>]); // anonymous local
    let @10: &'_ (u32); // anonymous local
    let @11: &'_ (u32); // anonymous local
    let @12: &'_ (std::collections::hash::map::HashMap<u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>]); // anonymous local
    let @13: &'_ (u32); // anonymous local
    let @14: &'_ (u32); // anonymous local
    let @15: u32; // anonymous local

    @3 := &*(map@1)
    @6 := const (22 : u32)
    @5 := &@6
    @4 := &*(@5)
    @2 := std::collections::hash::map::{std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#2::get<'_, '_, u32, u32, std::hash::random::RandomState, u32>[core::borrow::{impl core::borrow::Borrow<T> for T}<u32>, core::hash::impls::{impl core::hash::Hash for u32}#11, core::cmp::impls::{impl core::cmp::Eq for u32}#43, core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>, core::cmp::impls::{impl core::cmp::Eq for u32}#43, core::hash::impls::{impl core::hash::Hash for u32}#11, std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1](move (@3), move (@4))
    drop @4
    drop @3
    @fake_read(@2)
    match @2 {
        0 => {
            @9 := &two-phase-mut *(map@1)
            @8 := std::collections::hash::map::{std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#2::insert<'_, u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>, core::cmp::impls::{impl core::cmp::Eq for u32}#43, core::hash::impls::{impl core::hash::Hash for u32}#11, std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1](move (@9), const (22 : u32), const (33 : u32))
            drop @9
            drop @8
            @12 := &*(map@1)
            @15 := const (22 : u32)
            @14 := &@15
            @13 := &*(@14)
            @11 := std::collections::hash::map::{impl core::ops::index::Index<&'_0 (Q)> for std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#9::index<'_, '_, u32, u32, u32, std::hash::random::RandomState>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::marker::Sized<std::hash::random::RandomState>, core::cmp::impls::{impl core::cmp::Eq for u32}#43, core::hash::impls::{impl core::hash::Hash for u32}#11, core::borrow::{impl core::borrow::Borrow<T> for T}<u32>, core::cmp::impls::{impl core::cmp::Eq for u32}#43, core::hash::impls::{impl core::hash::Hash for u32}#11, std::hash::random::{impl core::hash::BuildHasher for std::hash::random::RandomState}#1](move (@12), move (@13))
            drop @13
            drop @12
            @10 := &*(@11)
            @0 := &*(@10)
            drop @15
            drop @14
            drop @11
            drop @10
        },
        1 => {
            v@7 := copy ((@2 as variant @1).0)
            @0 := &*(v@7)
            drop v@7
        },
    }
    drop @6
    drop @5
    drop @2
    return
}

fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (Self::Output)

trait core::ops::index::Index<Self, Idx>
{
    type Output
    fn index : core::ops::index::Index::index
}

impl<'_0, K, Q, V, S> std::collections::hash::map::{impl core::ops::index::Index<&'_0 (Q)> for std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#9<'_0, K, Q, V, S> : core::ops::index::Index<std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2], &'_0 (Q)>
where
    [@TraitClause0]: core::marker::Sized<K>,
    [@TraitClause1]: core::marker::Sized<V>,
    [@TraitClause2]: core::marker::Sized<S>,
    [@TraitClause3]: core::cmp::Eq<K>,
    [@TraitClause4]: core::hash::Hash<K>,
    [@TraitClause5]: core::borrow::Borrow<K, Q>,
    [@TraitClause6]: core::cmp::Eq<Q>,
    [@TraitClause7]: core::hash::Hash<Q>,
    [@TraitClause8]: core::hash::BuildHasher<S>,
{
    type Output = V
    fn index = std::collections::hash::map::{impl core::ops::index::Index<&'_0 (Q)> for std::collections::hash::map::HashMap<K, V, S>[@TraitClause0, @TraitClause1, @TraitClause2]}#9::index
}

fn core::hash::BuildHasher::hash_one<'_0, Self, T>(@1: &'_0 (Self), @2: T) -> u64
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::hash::Hash<T>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::hash::Hasher<Self::Hasher>,

fn core::hash::Hasher::write_u8<'_0, Self>(@1: &'_0 mut (Self), @2: u8)

fn core::hash::Hasher::write_u16<'_0, Self>(@1: &'_0 mut (Self), @2: u16)

fn core::hash::Hasher::write_u32<'_0, Self>(@1: &'_0 mut (Self), @2: u32)

fn core::hash::Hasher::write_u64<'_0, Self>(@1: &'_0 mut (Self), @2: u64)

fn core::hash::Hasher::write_u128<'_0, Self>(@1: &'_0 mut (Self), @2: u128)

fn core::hash::Hasher::write_usize<'_0, Self>(@1: &'_0 mut (Self), @2: usize)

fn core::hash::Hasher::write_i8<'_0, Self>(@1: &'_0 mut (Self), @2: i8)

fn core::hash::Hasher::write_i16<'_0, Self>(@1: &'_0 mut (Self), @2: i16)

fn core::hash::Hasher::write_i32<'_0, Self>(@1: &'_0 mut (Self), @2: i32)

fn core::hash::Hasher::write_i64<'_0, Self>(@1: &'_0 mut (Self), @2: i64)

fn core::hash::Hasher::write_i128<'_0, Self>(@1: &'_0 mut (Self), @2: i128)

fn core::hash::Hasher::write_isize<'_0, Self>(@1: &'_0 mut (Self), @2: isize)

fn core::hash::Hasher::write_length_prefix<'_0, Self>(@1: &'_0 mut (Self), @2: usize)

fn core::borrow::Borrow::borrow<'_0, Self, Borrowed>(@1: &'_0 (Self)) -> &'_0 (Borrowed)

fn core::cmp::Eq::assert_receiver_is_total_eq<'_0, Self>(@1: &'_0 (Self))

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::hash::Hash::hash<'_0, '_1, Self, H>(@1: &'_0 (Self), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,

fn core::hash::Hash::hash_slice<'_0, '_1, Self, H>(@1: &'_0 (Slice<Self>), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,
    [@TraitClause2]: core::marker::Sized<Self>,

fn core::hash::Hasher::finish<'_0, Self>(@1: &'_0 (Self)) -> u64

fn core::hash::Hasher::write<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Slice<u8>))

fn core::hash::Hasher::write_str<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Str))

fn core::hash::BuildHasher::build_hasher<'_0, Self>(@1: &'_0 (Self)) -> Self::Hasher



