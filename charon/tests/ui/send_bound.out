# Final LLBC before serialization:

// Full name: core::marker::Send
#[lang_item("Send")]
pub trait Send<Self>

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: test_crate::foo
fn foo<M>(@1: M)
where
    [@TraitClause0]: Sized<M>,
    [@TraitClause1]: Send<M>,
{
    let @0: (); // return
    let _msg@1: M; // arg #1

    @0 := ()
    drop[Drop<M>] _msg@1
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: (); // anonymous local

    storage_live(@1)
    storage_live(@2)
    @2 := ()
    @1 := foo<()>[Sized<()>, Send<()>](move (@2))
    storage_dead(@2)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



