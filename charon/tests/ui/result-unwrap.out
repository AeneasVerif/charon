# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::FormattingOptions =
{
  flags: u32,
  width: u16,
  precision: u16,
}

#[lang_item("Formatter")]
pub struct core::fmt::Formatter<'a>
  where
      'a : 'a,
 =
{
  options: core::fmt::FormattingOptions,
  buf: &'a mut (dyn (exists(TODO))),
}

pub struct core::fmt::Error = {}

#[lang_item("Debug")]
pub trait core::fmt::Debug<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Debug::fmt<'_0_0, '_0_1, '_0_2, Self>
}

fn core::result::unwrap_failed<'_0, '_1>(@1: &'_0 (Str), @2: &'_1 (dyn (exists(TODO)))) -> !

pub fn core::result::{core::result::Result<T, E>[@TraitClause0, @TraitClause1]}::unwrap<T, E>(@1: core::result::Result<T, E>[@TraitClause0, @TraitClause1]) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::fmt::Debug<E>,
{
    let t@0: T; // return
    let self@1: core::result::Result<T, E>[@TraitClause0, @TraitClause1]; // arg #1
    let e@2: E; // local
    let @3: !; // anonymous local
    let @4: &'_ (dyn (exists(TODO))); // anonymous local
    let @5: &'_ (E); // anonymous local

    storage_live(e@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    match self@1 {
        0 => {
        },
        1 => {
            storage_live(e@2)
            e@2 := move ((self@1 as variant @1).0)
            storage_live(@4)
            @5 := &e@2
            @4 := unsize_cast<&'_ (E), &'_ (dyn (exists(TODO)))>(copy (@5))
            @3 := core::result::unwrap_failed<'_, '_>(const ("called `Result::unwrap()` on an `Err` value"), move (@4))
        },
    }
    t@0 := move ((self@1 as variant @0).0)
    return
}

fn core::fmt::flags::DEBUG_LOWER_HEX_FLAG() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := cast<i32, u32>(const (25 : i32))
    @0 := const (1 : u32) << const (25 : i32)
    return
}

global core::fmt::flags::DEBUG_LOWER_HEX_FLAG: u32 = core::fmt::flags::DEBUG_LOWER_HEX_FLAG()

pub fn core::fmt::num::{impl core::fmt::LowerHex for u32}#60::fmt<'_0, '_1, '_2>(@1: &'_0 (u32), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

fn core::fmt::flags::DEBUG_UPPER_HEX_FLAG() -> u32
{
    let @0: u32; // return
    let @1: u32; // anonymous local

    storage_live(@1)
    @1 := cast<i32, u32>(const (26 : i32))
    @0 := const (1 : u32) << const (26 : i32)
    return
}

global core::fmt::flags::DEBUG_UPPER_HEX_FLAG: u32 = core::fmt::flags::DEBUG_UPPER_HEX_FLAG()

pub fn core::fmt::num::imp::{impl core::fmt::Display for u32}#6::fmt<'_0, '_1, '_2>(@1: &'_0 (u32), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

pub fn core::fmt::num::{impl core::fmt::UpperHex for u32}#61::fmt<'_0, '_1, '_2>(@1: &'_0 (u32), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

pub fn core::fmt::num::{impl core::fmt::Debug for u32}#86::fmt<'_0, '_1, '_2>(@1: &'_0 (u32), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]
{
    let @0: core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]; // return
    let self@1: &'_ (u32); // arg #1
    let f@2: &'_ mut (core::fmt::Formatter<'_>); // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local

    storage_live(@7)
    storage_live(@8)
    storage_live(@3)
    storage_live(@4)
    @4 := copy (((*(f@2)).options).flags)
    @7 := core::fmt::flags::DEBUG_LOWER_HEX_FLAG
    @3 := move (@4) & move (@7)
    storage_dead(@4)
    switch move (@3) {
        0 : u32 => {
        },
        _ => {
            storage_dead(@3)
            @0 := core::fmt::num::{impl core::fmt::LowerHex for u32}#60::fmt<'_, '_, '_>(move (self@1), move (f@2))
            return
        },
    }
    storage_dead(@3)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (((*(f@2)).options).flags)
    @8 := core::fmt::flags::DEBUG_UPPER_HEX_FLAG
    @5 := move (@6) & move (@8)
    storage_dead(@6)
    switch move (@5) {
        0 : u32 => {
            storage_dead(@5)
            @0 := core::fmt::num::imp::{impl core::fmt::Display for u32}#6::fmt<'_, '_, '_>(move (self@1), move (f@2))
        },
        _ => {
            storage_dead(@5)
            @0 := core::fmt::num::{impl core::fmt::UpperHex for u32}#61::fmt<'_, '_, '_>(move (self@1), move (f@2))
        },
    }
    return
}

impl core::fmt::num::{impl core::fmt::Debug for u32}#86 : core::fmt::Debug<u32>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::num::{impl core::fmt::Debug for u32}#86::fmt<'_0_0, '_0_1, '_0_2>
}

fn test_crate::unwrap(@1: core::result::Result<u32, u32>[core::marker::Sized<u32>, core::marker::Sized<u32>]) -> u32
{
    let @0: u32; // return
    let res@1: core::result::Result<u32, u32>[core::marker::Sized<u32>, core::marker::Sized<u32>]; // arg #1
    let @2: core::result::Result<u32, u32>[core::marker::Sized<u32>, core::marker::Sized<u32>]; // anonymous local

    storage_live(@2)
    @2 := copy (res@1)
    @0 := core::result::{core::result::Result<T, E>[@TraitClause0, @TraitClause1]}::unwrap<u32, u32>[core::marker::Sized<u32>, core::marker::Sized<u32>, core::fmt::num::{impl core::fmt::Debug for u32}#86](move (@2))
    storage_dead(@2)
    return
}

pub fn core::fmt::Debug::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

pub trait core::fmt::LowerHex<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::LowerHex::fmt<'_0_0, '_0_1, '_0_2, Self>
}

pub fn core::fmt::LowerHex::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

impl core::fmt::num::{impl core::fmt::LowerHex for u32}#60 : core::fmt::LowerHex<u32>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::num::{impl core::fmt::LowerHex for u32}#60::fmt<'_0_0, '_0_1, '_0_2>
}

#[lang_item("Display")]
pub trait core::fmt::Display<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Display::fmt<'_0_0, '_0_1, '_0_2, Self>
}

pub fn core::fmt::Display::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

impl core::fmt::num::imp::{impl core::fmt::Display for u32}#6 : core::fmt::Display<u32>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::num::imp::{impl core::fmt::Display for u32}#6::fmt<'_0_0, '_0_1, '_0_2>
}

pub trait core::fmt::UpperHex<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::UpperHex::fmt<'_0_0, '_0_1, '_0_2, Self>
}

pub fn core::fmt::UpperHex::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

impl core::fmt::num::{impl core::fmt::UpperHex for u32}#61 : core::fmt::UpperHex<u32>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::num::{impl core::fmt::UpperHex for u32}#61::fmt<'_0_0, '_0_1, '_0_2>
}



