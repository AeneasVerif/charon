# Final LLBC before serialization:

opaque type core::array::iter::IntoIter<T, const N : usize>

enum core::option::Option<T> =
|  None()
|  Some(T)


opaque type core::slice::iter::Iter<'a, T>
  where
      T : 'a,
      T : 'a,

opaque type core::slice::iter::Chunks<'a, T>
  where
      T : 'a,
      T : 'a,

opaque type core::slice::iter::ChunksExact<'a, T>
  where
      T : 'a,
      T : 'a,

enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

trait core::iter::traits::iterator::Iterator<Self>
{
    type Item
    fn next : core::iter::traits::iterator::Iterator::next
    fn next_chunk
    fn size_hint
    fn count
    fn last
    fn advance_by
    fn nth
    fn step_by
    fn chain
    fn zip
    fn intersperse
    fn intersperse_with
    fn map
    fn for_each
    fn filter
    fn filter_map
    fn enumerate
    fn peekable
    fn skip_while
    fn take_while
    fn map_while
    fn skip
    fn take
    fn scan
    fn flat_map
    fn flatten
    fn fuse
    fn inspect
    fn by_ref
    fn collect
    fn try_collect
    fn collect_into
    fn partition
    fn partition_in_place
    fn is_partitioned
    fn try_fold
    fn try_for_each
    fn fold
    fn reduce
    fn try_reduce
    fn all
    fn any
    fn find
    fn find_map
    fn try_find
    fn position
    fn rposition
    fn max
    fn min
    fn max_by_key
    fn max_by
    fn min_by_key
    fn min_by
    fn rev
    fn unzip
    fn copied
    fn cloned
    fn cycle
    fn array_chunks
    fn sum
    fn product
    fn cmp
    fn cmp_by
    fn partial_cmp
    fn partial_cmp_by
    fn eq
    fn eq_by
    fn ne
    fn lt
    fn le
    fn gt
    fn ge
    fn is_sorted
    fn is_sorted_by
    fn is_sorted_by_key
    fn __iterator_get_unchecked
}

trait core::iter::traits::collect::IntoIterator<Self>
{
    type Item
    type IntoIter
        where
            [@TraitClause0]: core::iter::traits::iterator::Iterator<Self::IntoIter>,
    fn into_iter : core::iter::traits::collect::IntoIterator::into_iter
}

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::next<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>)) -> core::option::Option<core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<T, const N : usize>::Item>

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::size_hint<'_0, T, const N : usize>(@1: &'_0 (core::array::iter::IntoIter<T, const N : usize>)) -> (usize, core::option::Option<usize>)

trait core::ops::function::FnOnce<Self, Args>
{
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause_0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    fn call_mut : core::ops::function::FnMut::call_mut
}

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::fold<T, Acc, Fold, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>, @2: Acc, @3: Fold) -> Acc
where
    [@TraitClause0]: core::ops::function::FnMut<Fold, (Acc, T)>,
    (parents((parents(Unsolved(core::ops::function::FnMut<Fold, (Acc, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<T, const N : usize>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = Acc,

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::count<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>) -> usize

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::last<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>) -> core::option::Option<core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<T, const N : usize>::Item>

enum core::result::Result<T, E> =
|  Ok(T)
|  Err(E)


opaque type core::num::nonzero::NonZeroUsize

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::advance_by<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZeroUsize>

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<T, const N : usize> : core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>>
{
    type Item = T with []
    fn next = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::next
    fn size_hint = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::size_hint
    fn fold = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::fold
    fn count = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::count
    fn last = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::last
    fn advance_by = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}::advance_by
}

fn core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>(@1: Array<T, const N : usize>) -> core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize>::IntoIter

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize> : core::iter::traits::collect::IntoIterator<Array<T, const N : usize>>
{
    type Item = T with []
    type IntoIter = core::array::iter::IntoIter<T, const N : usize> with [core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<T, const N : usize>]
    fn into_iter = core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter
}

fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    // Inherited clauses:
    [@TraitClause0]: core::iter::traits::iterator::Iterator<I>,

impl<I> core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::iter::traits::iterator::Iterator<I>,
{
    type Item = @TraitClause0::Item with []
    type IntoIter = I with [@TraitClause0]
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter
}

fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>

fn core::slice::{Slice<T>}::iter<'_0, T>(@1: &'_0 (Slice<T>)) -> core::slice::iter::Iter<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>)) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Iter<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::count<'a, T>(@1: core::slice::iter::Iter<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::advance_by<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZeroUsize>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::last<'a, T>(@1: core::slice::iter::Iter<'a, T>) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::fold<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>, @2: B, @3: F) -> B
where
    [@TraitClause0]: core::ops::function::FnMut<F, (B, &'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<F, (B, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = B,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::for_each<'a, T, F>(@1: core::slice::iter::Iter<'a, T>, @2: F)
where
    [@TraitClause0]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<F, (core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = (),

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::all<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> bool
where
    [@TraitClause0]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<F, (core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = bool,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::any<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> bool
where
    [@TraitClause0]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<F, (core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = bool,

Unknown decl: 38

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> core::option::Option<B>
where
    [@TraitClause0]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<F, (core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = core::option::Option<B>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::position<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: P) -> core::option::Option<usize>
where
    [@TraitClause0]: core::ops::function::FnMut<P, (&'_ (T))>,
    (parents((parents(Unsolved(core::ops::function::FnMut<P, (core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = bool,

trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause_0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn len
    fn is_empty
}

trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause_0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back : core::iter::traits::double_ended::DoubleEndedIterator::next_back
    fn advance_back_by
    fn nth_back
    fn try_rfold
    fn rfold
    fn rfind
}

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::rposition<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: P) -> core::option::Option<usize>
where
    [@TraitClause0]: core::ops::function::FnMut<P, ((parents(Unsolved(core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'a, T>>))::[@TraitClause0])::Item)>,
    [@TraitClause1]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'_, T>>,
    [@TraitClause2]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'_, T>>,
    (parents((parents(Unsolved(core::ops::function::FnMut<P, ((parents(Unsolved(core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'a, T>>))::[@TraitClause0])::Item)>))::[@TraitClause3]))::[@TraitClause0])::Output = bool,

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, T>::Item

Unknown decl: 43

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>>
{
    type Item = &'a (T) with []
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::count
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::nth
    fn advance_by = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::advance_by
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::last
    fn fold = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::fold
    fn for_each = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::for_each
    fn all = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::all
    fn any = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::any
    fn find = @Fun38
    fn find_map = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::find_map
    fn position = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::position
    fn rposition = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::rposition
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}::__iterator_get_unchecked
    fn is_sorted_by = @Fun43
}

trait core::ops::arith::AddAssign<Self, Rhs>
{
    fn add_assign : core::ops::arith::AddAssign::add_assign
}

fn core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32#319}::add_assign<'_0, '_1, '_2>(@1: &'_1 mut (i32), @2: &'_2 (i32))

impl<'_0> core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32#319}<'_0> : core::ops::arith::AddAssign<i32, &'_0 (i32)>
{
    fn add_assign = core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32#319}::add_assign
}

fn core::ops::arith::AddAssign::add_assign<'_0, Self, Rhs>(@1: &'_0 mut (Self), @2: Rhs)

fn core::slice::{Slice<T>}::chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::Chunks<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>)) -> core::option::Option<&'a (Slice<T>)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Chunks<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::count<'a, T>(@1: core::slice::iter::Chunks<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>), @2: usize) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'_, T>::Item>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::last<'a, T>(@1: core::slice::iter::Chunks<'a, T>) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'_, T>::Item>

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'_, T>::Item

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>>
{
    type Item = &'a (Slice<T>) with []
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::count
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::nth
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::last
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}::__iterator_get_unchecked
}

fn core::slice::{Slice<T>}::chunks_exact<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::ChunksExact<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>)) -> core::option::Option<&'a (Slice<T>)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::ChunksExact<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::count<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>), @2: usize) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'_, T>::Item>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::last<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'_, T>::Item>

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'_, T>::Item

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>>
{
    type Item = &'a (Slice<T>) with []
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::count
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::nth
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::last
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}::__iterator_get_unchecked
}

fn test_crate::main()
{
    let @0: (); // return
    let a@1: Array<i32, 7 : usize>; // local
    let i@2: i32; // local
    let @3: (); // anonymous local
    let @4: core::array::iter::IntoIter<i32, 7 : usize>; // anonymous local
    let @5: core::array::iter::IntoIter<i32, 7 : usize>; // anonymous local
    let @6: Array<i32, 7 : usize>; // anonymous local
    let iter@7: core::array::iter::IntoIter<i32, 7 : usize>; // local
    let @8: (); // anonymous local
    let @9: (); // anonymous local
    let @10: core::option::Option<i32>; // anonymous local
    let @11: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>); // anonymous local
    let @12: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>); // anonymous local
    let v@13: i32; // local
    let @14: i32; // anonymous local
    let @15: (); // anonymous local
    let @16: core::slice::iter::Iter<'_, i32>; // anonymous local
    let @17: core::slice::iter::Iter<'_, i32>; // anonymous local
    let @18: &'_ (Slice<i32>); // anonymous local
    let @19: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@20: core::slice::iter::Iter<'_, i32>; // local
    let @21: (); // anonymous local
    let @22: core::option::Option<&'_ (i32)>; // anonymous local
    let @23: &'_ mut (core::slice::iter::Iter<'_, i32>); // anonymous local
    let @24: &'_ mut (core::slice::iter::Iter<'_, i32>); // anonymous local
    let v@25: &'_ (i32); // local
    let @26: (); // anonymous local
    let @27: &'_ mut (i32); // anonymous local
    let @28: &'_ (i32); // anonymous local
    let @29: (); // anonymous local
    let @30: core::slice::iter::Chunks<'_, i32>; // anonymous local
    let @31: core::slice::iter::Chunks<'_, i32>; // anonymous local
    let @32: &'_ (Slice<i32>); // anonymous local
    let @33: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@34: core::slice::iter::Chunks<'_, i32>; // local
    let @35: (); // anonymous local
    let @36: core::option::Option<&'_ (Slice<i32>)>; // anonymous local
    let @37: &'_ mut (core::slice::iter::Chunks<'_, i32>); // anonymous local
    let @38: &'_ mut (core::slice::iter::Chunks<'_, i32>); // anonymous local
    let @39: (); // anonymous local
    let @40: core::slice::iter::ChunksExact<'_, i32>; // anonymous local
    let @41: core::slice::iter::ChunksExact<'_, i32>; // anonymous local
    let @42: &'_ (Slice<i32>); // anonymous local
    let @43: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@44: core::slice::iter::ChunksExact<'_, i32>; // local
    let @45: (); // anonymous local
    let @46: core::option::Option<&'_ (Slice<i32>)>; // anonymous local
    let @47: &'_ mut (core::slice::iter::ChunksExact<'_, i32>); // anonymous local
    let @48: &'_ mut (core::slice::iter::ChunksExact<'_, i32>); // anonymous local
    let expected@49: i32; // local
    let @50: (); // anonymous local
    let @51: (&'_ (i32), &'_ (i32)); // anonymous local
    let @52: &'_ (i32); // anonymous local
    let @53: &'_ (i32); // anonymous local
    let left_val@54: &'_ (i32); // local
    let right_val@55: &'_ (i32); // local
    let @56: bool; // anonymous local
    let @57: bool; // anonymous local
    let @58: i32; // anonymous local
    let @59: i32; // anonymous local
    let kind@60: core::panicking::AssertKind; // local
    let @61: core::panicking::AssertKind; // anonymous local
    let @62: &'_ (i32); // anonymous local
    let @63: &'_ (i32); // anonymous local
    let @64: &'_ (i32); // anonymous local
    let @65: &'_ (i32); // anonymous local
    let @66: core::option::Option<core::fmt::Arguments<'_>>; // anonymous local
    let @67: (); // anonymous local
    let @68: (); // anonymous local
    let @69: (); // anonymous local
    let @70: (); // anonymous local
    let @71: (); // anonymous local
    let @72: (); // anonymous local
    let @73: (); // anonymous local
    let @74: (); // anonymous local
    let @75: (); // anonymous local
    let @76: (); // anonymous local
    let @77: (); // anonymous local
    let @78: (); // anonymous local
    let @79: (); // anonymous local
    let @80: (); // anonymous local

    a@1 := [const (0 : i32), const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32); 7 : usize]
    @fake_read(a@1)
    i@2 := const (0 : i32)
    @fake_read(i@2)
    @6 := copy (a@1)
    @5 := core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<i32, 7 : usize>::into_iter(move (@6))
    drop @6
    @4 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<core::array::iter::IntoIter<i32, 7 : usize>>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<i32, 7 : usize>]::into_iter(move (@5))
    drop @5
    @fake_read(@4)
    iter@7 := move (@4)
    loop {
        @12 := &mut iter@7
        @11 := &two-phase-mut *(@12)
        @10 := core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>#2}<i32, 7 : usize>::next(move (@11))
        drop @11
        @fake_read(@10)
        match @10 {
            0 => {
                break 0
            },
            1 => {
                v@13 := copy ((@10 as variant @1).0)
                @14 := copy (v@13)
                i@2 := copy (i@2) + move (@14)
                drop @14
                @67 := ()
                @9 := move (@67)
                drop v@13
                drop @12
                drop @10
                drop @9
                @69 := ()
                @8 := move (@69)
                continue 0
            }
        }
    }
    @68 := ()
    @3 := move (@68)
    drop @12
    drop @10
    drop @9
    drop iter@7
    drop iter@7
    drop @4
    drop @4
    drop @3
    @19 := &a@1
    @18 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@19))
    drop @19
    @17 := core::slice::{Slice<T>}::iter<i32>(move (@18))
    drop @18
    @16 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<core::slice::iter::Iter<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, i32>]::into_iter(move (@17))
    drop @17
    @fake_read(@16)
    iter@20 := move (@16)
    loop {
        @24 := &mut iter@20
        @23 := &two-phase-mut *(@24)
        @22 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>#181}<'_, i32>::next(move (@23))
        drop @23
        @fake_read(@22)
        match @22 {
            0 => {
                break 0
            },
            1 => {
                v@25 := copy ((@22 as variant @1).0)
                @27 := &two-phase-mut i@2
                @28 := copy (v@25)
                @26 := core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32#319}<'_>::add_assign(move (@27), move (@28))
                drop @28
                drop @27
                drop @26
                @71 := ()
                @21 := move (@71)
                drop v@25
                drop @24
                drop @22
                drop @21
                @72 := ()
                @8 := move (@72)
                continue 0
            }
        }
    }
    @70 := ()
    @15 := move (@70)
    drop @24
    drop @22
    drop @21
    drop iter@20
    drop @16
    drop @15
    @33 := &a@1
    @32 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@33))
    drop @33
    @31 := core::slice::{Slice<T>}::chunks<i32>(move (@32), const (2 : usize))
    drop @32
    @30 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<core::slice::iter::Chunks<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'_, i32>]::into_iter(move (@31))
    drop @31
    @fake_read(@30)
    iter@34 := move (@30)
    loop {
        @38 := &mut iter@34
        @37 := &two-phase-mut *(@38)
        @36 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>#70}<'_, i32>::next(move (@37))
        drop @37
        @fake_read(@36)
        match @36 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @73 := ()
                @35 := move (@73)
                drop @38
                drop @36
                drop @35
                @75 := ()
                @8 := move (@75)
                continue 0
            }
        }
    }
    @74 := ()
    @29 := move (@74)
    drop @38
    drop @36
    drop @35
    drop iter@34
    drop @30
    drop @29
    @43 := &a@1
    @42 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@43))
    drop @43
    @41 := core::slice::{Slice<T>}::chunks_exact<i32>(move (@42), const (2 : usize))
    drop @42
    @40 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>]::into_iter(move (@41))
    drop @41
    @fake_read(@40)
    iter@44 := move (@40)
    loop {
        @48 := &mut iter@44
        @47 := &two-phase-mut *(@48)
        @46 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>#89}<'_, i32>::next(move (@47))
        drop @47
        @fake_read(@46)
        match @46 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @76 := ()
                @45 := move (@76)
                drop @48
                drop @46
                drop @45
                @78 := ()
                @8 := move (@78)
                continue 0
            }
        }
    }
    @77 := ()
    @39 := move (@77)
    drop @48
    drop @46
    drop @45
    drop iter@44
    drop @40
    drop @39
    expected@49 := const (28 : i32)
    @fake_read(expected@49)
    @52 := &i@2
    @53 := &expected@49
    @51 := (move (@52), move (@53))
    drop @53
    drop @52
    @fake_read(@51)
    left_val@54 := copy ((@51).0)
    right_val@55 := copy ((@51).1)
    @58 := copy (*(left_val@54))
    @59 := copy (*(right_val@55))
    @57 := move (@58) == move (@59)
    drop @59
    drop @58
    @56 := ~(move (@57))
    drop @57
    if move (@56) {
        nop
    }
    else {
        @79 := ()
        @50 := move (@79)
        drop @56
        drop right_val@55
        drop left_val@54
        drop @51
        drop @50
        @80 := ()
        @0 := move (@80)
        drop expected@49
        drop i@2
        drop a@1
        @0 := ()
        return
    }
    kind@60 := core::panicking::AssertKind::Eq {  }
    @fake_read(kind@60)
    @61 := move (kind@60)
    @63 := &*(left_val@54)
    @62 := &*(@63)
    @65 := &*(right_val@55)
    @64 := &*(@65)
    @66 := core::option::Option::None {  }
    panic
}

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> (parents(Self)::[@TraitClause0])::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<(parents(Self)::[@TraitClause0])::Item>



