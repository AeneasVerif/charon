# Final LLBC before serialization:

trait core::marker::Sized<Self>

opaque type core::array::iter::IntoIter<T, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<T>,

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


opaque type core::slice::iter::Iter<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

opaque type core::slice::iter::Chunks<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

opaque type core::slice::iter::ChunksExact<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>(@1: Array<T, const N : usize>) -> core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>
}

fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>[@TraitClause0])) -> core::option::Option<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize> : core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = @TraitClause0
    type Item = T
    fn next<'_0> = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_0_0, T, const N : usize>[@TraitClause0]
}

fn core::slice::{Slice<T>}::iter<'_0, T>(@1: &'_0 (Slice<T>)) -> core::slice::iter::Iter<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> core::option::Option<&'a (T)>[core::marker::Sized<&'_ (T)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (T)>
    type Item = &'a (T)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'a, '_0_0, T>[@TraitClause0]
}

fn core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_0, '_1>(@1: &'_1 mut (i32), @2: &'_0 (i32))

fn core::slice::{Slice<T>}::chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::Chunks<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> core::option::Option<&'a (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_0_0, T>[@TraitClause0]
}

fn core::slice::{Slice<T>}::chunks_exact<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::ChunksExact<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>[@TraitClause0])) -> core::option::Option<&'a (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'a, '_0_0, T>[@TraitClause0]
}

fn test_crate::main()
{
    let @0: (); // return
    let a@1: Array<i32, 7 : usize>; // local
    let i@2: i32; // local
    let @3: (); // anonymous local
    let @4: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // anonymous local
    let @5: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // anonymous local
    let @6: Array<i32, 7 : usize>; // anonymous local
    let iter@7: core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]; // local
    let @8: (); // anonymous local
    let @9: (); // anonymous local
    let @10: core::option::Option<i32>[core::marker::Sized<i32>]; // anonymous local
    let @11: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]); // anonymous local
    let @12: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]); // anonymous local
    let v@13: i32; // local
    let @14: i32; // anonymous local
    let @15: (); // anonymous local
    let @16: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @17: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @18: &'_ (Slice<i32>); // anonymous local
    let @19: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@20: core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]; // local
    let @21: (); // anonymous local
    let @22: core::option::Option<&'_ (i32)>[core::marker::Sized<&'_ (i32)>]; // anonymous local
    let @23: &'_ mut (core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @24: &'_ mut (core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let v@25: &'_ (i32); // local
    let @26: (); // anonymous local
    let @27: &'_ mut (i32); // anonymous local
    let @28: &'_ (i32); // anonymous local
    let @29: (); // anonymous local
    let @30: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @31: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @32: &'_ (Slice<i32>); // anonymous local
    let @33: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@34: core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]; // local
    let @35: (); // anonymous local
    let @36: core::option::Option<&'_ (Slice<i32>)>[core::marker::Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @37: &'_ mut (core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @38: &'_ mut (core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @39: (); // anonymous local
    let @40: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @41: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // anonymous local
    let @42: &'_ (Slice<i32>); // anonymous local
    let @43: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@44: core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]; // local
    let @45: (); // anonymous local
    let @46: core::option::Option<&'_ (Slice<i32>)>[core::marker::Sized<&'_ (Slice<i32>)>]; // anonymous local
    let @47: &'_ mut (core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let @48: &'_ mut (core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]); // anonymous local
    let expected@49: i32; // local
    let @50: (); // anonymous local
    let @51: (&'_ (i32), &'_ (i32)); // anonymous local
    let @52: &'_ (i32); // anonymous local
    let @53: &'_ (i32); // anonymous local
    let left_val@54: &'_ (i32); // local
    let right_val@55: &'_ (i32); // local
    let @56: bool; // anonymous local
    let @57: i32; // anonymous local
    let @58: i32; // anonymous local
    let kind@59: core::panicking::AssertKind; // local
    let @60: core::panicking::AssertKind; // anonymous local
    let @61: &'_ (i32); // anonymous local
    let @62: &'_ (i32); // anonymous local
    let @63: &'_ (i32); // anonymous local
    let @64: &'_ (i32); // anonymous local
    let @65: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local
    let @66: (); // anonymous local
    let @67: (); // anonymous local
    let @68: (); // anonymous local
    let @69: (); // anonymous local
    let @70: (); // anonymous local
    let @71: (); // anonymous local
    let @72: (); // anonymous local
    let @73: (); // anonymous local
    let @74: (); // anonymous local
    let @75: (); // anonymous local
    let @76: (); // anonymous local
    let @77: (); // anonymous local
    let @78: (); // anonymous local
    let @79: (); // anonymous local

    a@1 := [const (0 : i32), const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32); 7 : usize]
    @fake_read(a@1)
    i@2 := const (0 : i32)
    @fake_read(i@2)
    @6 := copy (a@1)
    @5 := core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<i32, 7 : usize>[core::marker::Sized<i32>](move (@6))
    drop @6
    @4 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]>[core::marker::Sized<core::array::iter::IntoIter<i32, 7 : usize>[core::marker::Sized<i32>]>, core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<i32, 7 : usize>[core::marker::Sized<i32>]](move (@5))
    drop @5
    @fake_read(@4)
    iter@7 := move (@4)
    loop {
        @12 := &mut iter@7
        @11 := &two-phase-mut *(@12)
        @10 := core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2::next<'_, i32, 7 : usize>[core::marker::Sized<i32>](move (@11))
        drop @11
        @fake_read(@10)
        match @10 {
            0 => {
                break 0
            },
            1 => {
                v@13 := copy ((@10 as variant @1).0)
                @14 := copy (v@13)
                i@2 := copy (i@2) + move (@14)
                drop @14
                @67 := ()
                @9 := move (@67)
                drop v@13
                drop @12
                drop @10
                drop @9
                @68 := ()
                @8 := move (@68)
                continue 0
            },
        }
    }
    @66 := ()
    @3 := move (@66)
    drop @12
    drop @10
    drop @9
    drop iter@7
    drop iter@7
    drop @4
    drop @4
    drop @3
    @19 := &a@1
    @18 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@19))
    drop @19
    @17 := core::slice::{Slice<T>}::iter<'_, i32>[core::marker::Sized<i32>](move (@18))
    drop @18
    @16 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::Iter<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182<'_, i32>[core::marker::Sized<i32>]](move (@17))
    drop @17
    @fake_read(@16)
    iter@20 := move (@16)
    loop {
        @24 := &mut iter@20
        @23 := &two-phase-mut *(@24)
        @22 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>[@TraitClause0]}#182::next<'_, '_, i32>[core::marker::Sized<i32>](move (@23))
        drop @23
        @fake_read(@22)
        match @22 {
            0 => {
                break 0
            },
            1 => {
                v@25 := copy ((@22 as variant @1).0)
                @27 := &two-phase-mut i@2
                @28 := copy (v@25)
                @26 := core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_, '_>(move (@27), move (@28))
                drop @28
                drop @27
                drop @26
                @70 := ()
                @21 := move (@70)
                drop v@25
                drop @24
                drop @22
                drop @21
                @71 := ()
                @8 := move (@71)
                continue 0
            },
        }
    }
    @69 := ()
    @15 := move (@69)
    drop @24
    drop @22
    drop @21
    drop iter@20
    drop @16
    drop @15
    @33 := &a@1
    @32 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@33))
    drop @33
    @31 := core::slice::{Slice<T>}::chunks<'_, i32>[core::marker::Sized<i32>](move (@32), const (2 : usize))
    drop @32
    @30 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::Chunks<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'_, i32>[core::marker::Sized<i32>]](move (@31))
    drop @31
    @fake_read(@30)
    iter@34 := move (@30)
    loop {
        @38 := &mut iter@34
        @37 := &two-phase-mut *(@38)
        @36 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'_, '_, i32>[core::marker::Sized<i32>](move (@37))
        drop @37
        @fake_read(@36)
        match @36 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @73 := ()
                @35 := move (@73)
                drop @38
                drop @36
                drop @35
                @74 := ()
                @8 := move (@74)
                continue 0
            },
        }
    }
    @72 := ()
    @29 := move (@72)
    drop @38
    drop @36
    drop @35
    drop iter@34
    drop @30
    drop @29
    @43 := &a@1
    @42 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@43))
    drop @43
    @41 := core::slice::{Slice<T>}::chunks_exact<'_, i32>[core::marker::Sized<i32>](move (@42), const (2 : usize))
    drop @42
    @40 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]>[core::marker::Sized<core::slice::iter::ChunksExact<'_, i32>[core::marker::Sized<i32>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90<'_, i32>[core::marker::Sized<i32>]](move (@41))
    drop @41
    @fake_read(@40)
    iter@44 := move (@40)
    loop {
        @48 := &mut iter@44
        @47 := &two-phase-mut *(@48)
        @46 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>[@TraitClause0]}#90::next<'_, '_, i32>[core::marker::Sized<i32>](move (@47))
        drop @47
        @fake_read(@46)
        match @46 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @76 := ()
                @45 := move (@76)
                drop @48
                drop @46
                drop @45
                @77 := ()
                @8 := move (@77)
                continue 0
            },
        }
    }
    @75 := ()
    @39 := move (@75)
    drop @48
    drop @46
    drop @45
    drop iter@44
    drop @40
    drop @39
    expected@49 := const (28 : i32)
    @fake_read(expected@49)
    @52 := &i@2
    @53 := &expected@49
    @51 := (move (@52), move (@53))
    drop @53
    drop @52
    @fake_read(@51)
    left_val@54 := copy ((@51).0)
    right_val@55 := copy ((@51).1)
    @57 := copy (*(left_val@54))
    @58 := copy (*(right_val@55))
    @56 := move (@57) == move (@58)
    if move (@56) {
    }
    else {
        drop @58
        drop @57
        kind@59 := core::panicking::AssertKind::Eq {  }
        @fake_read(kind@59)
        @60 := move (kind@59)
        @62 := &*(left_val@54)
        @61 := &*(@62)
        @64 := &*(right_val@55)
        @63 := &*(@64)
        @65 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    drop @58
    drop @57
    @78 := ()
    @50 := move (@78)
    drop @56
    drop right_val@55
    drop left_val@54
    drop @51
    drop @50
    @79 := ()
    @0 := move (@79)
    drop expected@49
    drop i@2
    drop a@1
    @0 := ()
    return
}

fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause2::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>
}

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize> : core::iter::traits::collect::IntoIterator<Array<T, const N : usize>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = @TraitClause0
    parent_clause1 = core::marker::Sized<core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]>
    parent_clause2 = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]}#2<T, const N : usize>[@TraitClause0]
    type Item = T
    type IntoIter = core::array::iter::IntoIter<T, const N : usize>[@TraitClause0]
    fn into_iter = core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>[@TraitClause0]
}

impl<I> core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    parent_clause2 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>[@TraitClause0, @TraitClause1]
}

fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

fn core::ops::arith::AddAssign::add_assign<'_0, Self, Rhs>(@1: &'_0 mut (Self), @2: Rhs)

trait core::ops::arith::AddAssign<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Rhs>
    fn add_assign<'_0> = core::ops::arith::AddAssign::add_assign<'_0_0, Self, Rhs>
}

impl<'_0> core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365<'_0> : core::ops::arith::AddAssign<i32, &'_0 (i32)>
{
    parent_clause0 = core::marker::Sized<&'_ (i32)>
    fn add_assign<'_0> = core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_0, '_0_0>
}

trait core::marker::Tuple<Self>

trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::FromIterator::from_iter<Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual = core::ops::try_trait::FromResidual::from_residual<Self, R>
}

enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = core::ops::try_trait::Try::from_output<Self>
    fn branch = core::ops::try_trait::Try::branch<Self>
}

trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause2::Output = O,
    Self::parent_clause2::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::Try<Self::TryType>
    type TryType
}

trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend<'_0, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::Extend::extend<'_0_0, Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0_0, Self>
}

trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
}

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

fn core::default::Default::default<Self>() -> Self

fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]



