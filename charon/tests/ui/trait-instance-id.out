# Final LLBC before serialization:

opaque type core::array::iter::IntoIter<T, const N : usize>

enum core::option::Option<T> =
|  None()
|  Some(T)


opaque type core::slice::iter::Iter<'a, T>
  where
      T : 'a,
      T : 'a,

opaque type core::slice::iter::Chunks<'a, T>
  where
      T : 'a,
      T : 'a,

opaque type core::slice::iter::ChunksExact<'a, T>
  where
      T : 'a,
      T : 'a,

enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

enum core::result::Result<T, E> =
|  Ok(T)
|  Err(E)


trait core::clone::Clone<Self>
{
    fn clone : core::clone::Clone::clone
    fn clone_from : core::clone::Clone::clone_from
}

trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait core::num::nonzero::private::Sealed<Self>

trait core::num::nonzero::ZeroablePrimitive<Self>
{
    parent_clause_1 : [@TraitClause1]: core::marker::Copy<Self>
    parent_clause_2 : [@TraitClause2]: core::num::nonzero::private::Sealed<Self>
    parent_clause_3 : [@TraitClause3]: core::marker::Copy<Self::NonZeroInner>
    parent_clause_4 : [@TraitClause4]: core::clone::Clone<Self::NonZeroInner>
    type NonZeroInner
}

opaque type core::num::nonzero::NonZero<T>
  where
      [@TraitClause1]: core::num::nonzero::ZeroablePrimitive<T>,

fn core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0>(@1: &'_0 (usize)) -> usize

impl core::clone::impls::{impl core::clone::Clone for usize}#5 : core::clone::Clone<usize>
{
    fn clone = core::clone::impls::{impl core::clone::Clone for usize}#5::clone
}

impl core::marker::{impl core::marker::Copy for usize}#37 : core::marker::Copy<usize>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for usize}#5
}

impl core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#25 : core::num::nonzero::private::Sealed<usize>

opaque type core::num::nonzero::private::NonZeroUsizeInner

fn core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26::clone<'_0>(@1: &'_0 (core::num::nonzero::private::NonZeroUsizeInner)) -> core::num::nonzero::private::NonZeroUsizeInner

impl core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26 : core::clone::Clone<core::num::nonzero::private::NonZeroUsizeInner>
{
    fn clone = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26::clone
}

impl core::num::nonzero::private::{impl core::marker::Copy for core::num::nonzero::private::NonZeroUsizeInner}#27 : core::marker::Copy<core::num::nonzero::private::NonZeroUsizeInner>
{
    parent_clause0 = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26
}

impl core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26 : core::num::nonzero::ZeroablePrimitive<usize>
{
    parent_clause0 = core::marker::{impl core::marker::Copy for usize}#37
    parent_clause1 = core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#25
    parent_clause2 = core::num::nonzero::private::{impl core::marker::Copy for core::num::nonzero::private::NonZeroUsizeInner}#27
    parent_clause3 = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26
    type NonZeroInner = core::num::nonzero::private::NonZeroUsizeInner
}

opaque type core::iter::adapters::step_by::StepBy<I>

opaque type core::iter::adapters::chain::Chain<A, B>

opaque type core::iter::adapters::zip::Zip<A, B>

trait core::ops::function::FnOnce<Self, Args>
{
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause_0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    fn call_mut : core::ops::function::FnMut::call_mut
}

opaque type core::iter::adapters::map::Map<I, F>

opaque type core::iter::adapters::filter_map::FilterMap<I, F>

opaque type core::iter::adapters::enumerate::Enumerate<I>

opaque type core::iter::adapters::map_while::MapWhile<I, P>

opaque type core::iter::adapters::skip::Skip<I>

opaque type core::iter::adapters::take::Take<I>

opaque type core::iter::adapters::fuse::Fuse<I>

trait core::ops::try_trait::FromResidual<Self, R>
{
    fn from_residual : core::ops::try_trait::FromResidual::from_residual
}

enum core::ops::control_flow::ControlFlow<B, C> =
|  Continue(C)
|  Break(B)


trait core::ops::try_trait::Try<Self>
{
    parent_clause_0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    type Output
    type Residual
    fn from_output : core::ops::try_trait::Try::from_output
    fn branch : core::ops::try_trait::Try::branch
}

trait core::ops::try_trait::Residual<Self, O>
where
    (parents(Self)::[@TraitClause1])::Residual = Self,
    (parents(Self)::[@TraitClause1])::Output = O,
{
    parent_clause_1 : [@TraitClause1]: core::ops::try_trait::Try<Self::TryType>
    parent_clause_2 : [@TraitClause2]: core::ops::try_trait::FromResidual<Self::TryType, Self>
    type TryType
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq : core::cmp::PartialEq::eq
    fn ne : core::cmp::PartialEq::ne
}

trait core::cmp::Eq<Self>
{
    parent_clause_0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
    fn assert_receiver_is_total_eq : core::cmp::Eq::assert_receiver_is_total_eq
}

enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause_0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp : core::cmp::PartialOrd::partial_cmp
    fn lt : core::cmp::PartialOrd::lt
    fn le : core::cmp::PartialOrd::le
    fn gt : core::cmp::PartialOrd::gt
    fn ge : core::cmp::PartialOrd::ge
}

trait core::cmp::Ord<Self>
{
    parent_clause_0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause_1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp : core::cmp::Ord::cmp
    fn max : core::cmp::Ord::max
    fn min : core::cmp::Ord::min
    fn clamp : core::cmp::Ord::clamp
}

opaque type core::iter::adapters::rev::Rev<T>

trait core::default::Default<Self>
{
    fn default : core::default::Default::default
}

opaque type core::iter::adapters::copied::Copied<I>

opaque type core::iter::adapters::cloned::Cloned<I>

opaque type core::iter::adapters::cycle::Cycle<I>

trait core::iter::traits::collect::IntoIterator<Self>
where
    (parents(Self)::[@TraitClause1])::Item = Self::Item,
{
    parent_clause_1 : [@TraitClause1]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter : core::iter::traits::collect::IntoIterator::into_iter
}

trait core::iter::traits::iterator::Iterator<Self>
{
    type Item
    fn next : core::iter::traits::iterator::Iterator::next
    fn next_chunk : core::iter::traits::iterator::Iterator::next_chunk
    fn size_hint : core::iter::traits::iterator::Iterator::size_hint
    fn count : core::iter::traits::iterator::Iterator::count
    fn last : core::iter::traits::iterator::Iterator::last
    fn advance_by : core::iter::traits::iterator::Iterator::advance_by
    fn nth : core::iter::traits::iterator::Iterator::nth
    fn step_by : core::iter::traits::iterator::Iterator::step_by
    fn chain : core::iter::traits::iterator::Iterator::chain
    fn zip : core::iter::traits::iterator::Iterator::zip
    fn intersperse : core::iter::traits::iterator::Iterator::intersperse
    fn intersperse_with : core::iter::traits::iterator::Iterator::intersperse_with
    fn map : core::iter::traits::iterator::Iterator::map
    fn for_each : core::iter::traits::iterator::Iterator::for_each
    fn filter_map : core::iter::traits::iterator::Iterator::filter_map
    fn enumerate : core::iter::traits::iterator::Iterator::enumerate
    fn peekable : core::iter::traits::iterator::Iterator::peekable
    fn map_while : core::iter::traits::iterator::Iterator::map_while
    fn skip : core::iter::traits::iterator::Iterator::skip
    fn take : core::iter::traits::iterator::Iterator::take
    fn flat_map : core::iter::traits::iterator::Iterator::flat_map
    fn flatten : core::iter::traits::iterator::Iterator::flatten
    fn fuse : core::iter::traits::iterator::Iterator::fuse
    fn by_ref : core::iter::traits::iterator::Iterator::by_ref
    fn collect : core::iter::traits::iterator::Iterator::collect
    fn try_collect : core::iter::traits::iterator::Iterator::try_collect
    fn collect_into : core::iter::traits::iterator::Iterator::collect_into
    fn is_partitioned : core::iter::traits::iterator::Iterator::is_partitioned
    fn try_fold : core::iter::traits::iterator::Iterator::try_fold
    fn try_for_each : core::iter::traits::iterator::Iterator::try_for_each
    fn fold : core::iter::traits::iterator::Iterator::fold
    fn reduce : core::iter::traits::iterator::Iterator::reduce
    fn try_reduce : core::iter::traits::iterator::Iterator::try_reduce
    fn all : core::iter::traits::iterator::Iterator::all
    fn any : core::iter::traits::iterator::Iterator::any
    fn find_map : core::iter::traits::iterator::Iterator::find_map
    fn position : core::iter::traits::iterator::Iterator::position
    fn max : core::iter::traits::iterator::Iterator::max
    fn min : core::iter::traits::iterator::Iterator::min
    fn rev : core::iter::traits::iterator::Iterator::rev
    fn unzip : core::iter::traits::iterator::Iterator::unzip
    fn copied : core::iter::traits::iterator::Iterator::copied
    fn cloned : core::iter::traits::iterator::Iterator::cloned
    fn cycle : core::iter::traits::iterator::Iterator::cycle
    fn array_chunks : core::iter::traits::iterator::Iterator::array_chunks
    fn sum : core::iter::traits::iterator::Iterator::sum
    fn product : core::iter::traits::iterator::Iterator::product
    fn cmp : core::iter::traits::iterator::Iterator::cmp
    fn cmp_by : core::iter::traits::iterator::Iterator::cmp_by
    fn partial_cmp : core::iter::traits::iterator::Iterator::partial_cmp
    fn partial_cmp_by : core::iter::traits::iterator::Iterator::partial_cmp_by
    fn eq : core::iter::traits::iterator::Iterator::eq
    fn eq_by : core::iter::traits::iterator::Iterator::eq_by
    fn ne : core::iter::traits::iterator::Iterator::ne
    fn lt : core::iter::traits::iterator::Iterator::lt
    fn le : core::iter::traits::iterator::Iterator::le
    fn gt : core::iter::traits::iterator::Iterator::gt
    fn ge : core::iter::traits::iterator::Iterator::ge
    fn is_sorted : core::iter::traits::iterator::Iterator::is_sorted
    fn is_sorted_by_key : core::iter::traits::iterator::Iterator::is_sorted_by_key
    fn __iterator_get_unchecked : core::iter::traits::iterator::Iterator::__iterator_get_unchecked
}

opaque type core::iter::adapters::intersperse::Intersperse<I>
  where
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::clone::Clone<@TraitClause1::Item>,

opaque type core::iter::adapters::intersperse::IntersperseWith<I, G>
  where
      [@TraitClause2]: core::iter::traits::iterator::Iterator<I>,

opaque type core::iter::adapters::peekable::Peekable<I>
  where
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

opaque type core::iter::adapters::flatten::FlatMap<I, U, F>
  where
      [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

opaque type core::iter::adapters::flatten::Flatten<I>
  where
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::iter::traits::collect::IntoIterator<@TraitClause1::Item>,

trait core::iter::traits::collect::FromIterator<Self, A>
{
    fn from_iter : core::iter::traits::collect::FromIterator::from_iter
}

trait core::iter::traits::collect::Extend<Self, A>
{
    fn extend : core::iter::traits::collect::Extend::extend
    fn extend_one : core::iter::traits::collect::Extend::extend_one
    fn extend_reserve : core::iter::traits::collect::Extend::extend_reserve
    fn extend_one_unchecked : core::iter::traits::collect::Extend::extend_one_unchecked
}

trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause_0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back : core::iter::traits::double_ended::DoubleEndedIterator::next_back
    fn advance_back_by : core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by
    fn nth_back : core::iter::traits::double_ended::DoubleEndedIterator::nth_back
    fn try_rfold : core::iter::traits::double_ended::DoubleEndedIterator::try_rfold
    fn rfold : core::iter::traits::double_ended::DoubleEndedIterator::rfold
}

opaque type core::iter::adapters::array_chunks::ArrayChunks<I, const N : usize>
  where
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

trait core::iter::traits::accum::Sum<Self, A>
{
    fn sum : core::iter::traits::accum::Sum::sum
}

trait core::iter::traits::accum::Product<Self, A>
{
    fn product : core::iter::traits::accum::Product::product
}

trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    const MAY_HAVE_SIDE_EFFECT : bool
    fn size : core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size
}

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::next<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>)) -> core::option::Option<core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<T, const N : usize>::Item>

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::size_hint<'_0, T, const N : usize>(@1: &'_0 (core::array::iter::IntoIter<T, const N : usize>)) -> (usize, core::option::Option<usize>)

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::count<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>) -> usize

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::last<T, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>) -> core::option::Option<core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<T, const N : usize>::Item>

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::advance_by<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26>>

fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::fold<T, Acc, Fold, const N : usize>(@1: core::array::iter::IntoIter<T, const N : usize>, @2: Acc, @3: Fold) -> Acc
where
    [@TraitClause3]: core::ops::function::FnMut<Fold, (Acc, T)>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "Fold" })), Type(Tuple([Param(ParamTy { index: 2, name: "Acc" }), Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Type(Param(ParamTy { index: 0, name: "T" })), Const(Decorated { ty: Uint(Usize), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/trait-instance-id.rs")), rust_span_data: Some(no-location (#0)) }, contents: ConstRef { id: ParamConst { index: 1, name: "N" } }, hir_id: None, attributes: [] })], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(2260340255824257914), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::array::iter::IntoIter })] }, bound_vars: [] }, impl: Concrete { id: core::array::iter::{impl#2}, generics: [Type(Param(ParamTy { index: 0, name: "T" })), Const(Decorated { ty: Uint(Usize), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/trait-instance-id.rs")), rust_span_data: Some(no-location (#0)) }, contents: ConstRef { id: ParamConst { index: 1, name: "N" } }, hir_id: None, attributes: [] })] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(2260340255824257914), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Type(Param(ParamTy { index: 0, name: "T" })), Const(Decorated { ty: Uint(Usize), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/trait-instance-id.rs")), rust_span_data: Some(no-location (#0)) }, contents: ConstRef { id: ParamConst { index: 1, name: "N" } }, hir_id: None, attributes: [] })], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(2260340255824257914), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::array::iter::IntoIter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "Fold" })), Type(Tuple([Param(ParamTy { index: 2, name: "Acc" }), Param(ParamTy { index: 0, name: "T" })]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Type(Param(ParamTy { index: 0, name: "T" })), Const(Decorated { ty: Uint(Usize), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/trait-instance-id.rs")), rust_span_data: Some(no-location (#0)) }, contents: ConstRef { id: ParamConst { index: 1, name: "N" } }, hir_id: None, attributes: [] })], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(2260340255824257914), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::array::iter::IntoIter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 0, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "Acc" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 3, name: "Fold" }))] }) (context: core::array::iter::{impl#2}::fold)))::[@TraitClause0])::Output = Acc,

unsafe fn core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::__iterator_get_unchecked<'_0, T, const N : usize>(@1: &'_0 mut (core::array::iter::IntoIter<T, const N : usize>), @2: usize) -> core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<T, const N : usize>::Item

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<T, const N : usize> : core::iter::traits::iterator::Iterator<core::array::iter::IntoIter<T, const N : usize>>
{
    type Item = T
    fn next = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::next
    fn size_hint = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::size_hint
    fn count = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::count
    fn last = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::last
    fn advance_by = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::advance_by
    fn fold = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::fold
    fn __iterator_get_unchecked = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2::__iterator_get_unchecked
}

fn core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter<T, const N : usize>(@1: Array<T, const N : usize>) -> core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize>::IntoIter

impl<T, const N : usize> core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<T, const N : usize> : core::iter::traits::collect::IntoIterator<Array<T, const N : usize>>
{
    parent_clause0 = core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<T, const N : usize>
    type Item = T
    type IntoIter = core::array::iter::IntoIter<T, const N : usize>
    fn into_iter = core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}::into_iter
}

fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>(@1: I) -> I
where
    // Inherited clauses:
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

impl<I> core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter
}

fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>

fn core::slice::{Slice<T>}::iter<'_0, T>(@1: &'_0 (Slice<T>)) -> core::slice::iter::Iter<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>)) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Iter<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::count<'a, T>(@1: core::slice::iter::Iter<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::last<'a, T>(@1: core::slice::iter::Iter<'a, T>) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::advance_by<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26>>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::option::Option<&'a (T)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::for_each<'a, T, F>(@1: core::slice::iter::Iter<'a, T>, @2: F)
where
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "F" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::for_each)))::[@TraitClause0])::Output = (),

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::fold<'a, T, B, F>(@1: core::slice::iter::Iter<'a, T>, @2: B, @3: F) -> B
where
    [@TraitClause3]: core::ops::function::FnMut<F, (B, &'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "F" })), Type(Tuple([Param(ParamTy { index: 2, name: "B" }), Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "F" })), Type(Tuple([Param(ParamTy { index: 2, name: "B" }), Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "B" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 3, name: "F" }))] }) (context: core::slice::iter::{impl#182}::fold)))::[@TraitClause0])::Output = B,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::all<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> bool
where
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "F" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::all)))::[@TraitClause0])::Output = bool,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::any<'a, '_1, T, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> bool
where
    [@TraitClause3]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "F" })), Type(Tuple([Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "F" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::any)))::[@TraitClause0])::Output = bool,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::find_map<'a, '_1, T, B, F>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: F) -> core::option::Option<B>
where
    [@TraitClause4]: core::ops::function::FnMut<F, (&'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "F" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause4]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 3, name: "F" })), Type(Tuple([Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "B" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 3, name: "F" }))] }; [@TraitClause3]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::find_map)))::[@TraitClause0])::Output = core::option::Option<B>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::position<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: P) -> core::option::Option<usize>
where
    [@TraitClause3]: core::ops::function::FnMut<P, (&'_ (T))>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "P" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: Concrete { id: core::slice::iter::{impl#182}, generics: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))] }, args: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause3]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "P" })), Type(Tuple([Ref(Region { kind: ReErased }, Param(ParamTy { index: 1, name: "T" }), false)]))] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "P" }))] }; [@TraitClause2]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::position)))::[@TraitClause0])::Output = bool,

trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause_0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn len : core::iter::traits::exact_size::ExactSizeIterator::len
    fn is_empty : core::iter::traits::exact_size::ExactSizeIterator::is_empty
}

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::rposition<'a, '_1, T, P>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: P) -> core::option::Option<usize>
where
    [@TraitClause2]: core::ops::function::FnMut<P, ((parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] } (available clauses: [@TraitClause2]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "P" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(8741807603274333571), index: 4, trait: Binder { value: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(7752569106737159048), index: 0 }] }, args: [] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] }; [@TraitClause5]: TraitRef { def_id: core::iter::traits::double_ended::DoubleEndedIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause4]: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "P" }))] }; [@TraitClause3]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::rposition)))::[@TraitClause0])::Item)>,
    [@TraitClause4]: core::iter::traits::exact_size::ExactSizeIterator<core::slice::iter::Iter<'_, T>>,
    [@TraitClause5]: core::iter::traits::double_ended::DoubleEndedIterator<core::slice::iter::Iter<'_, T>>,
    (parents(UNKNOWN(Could not find a clause for parameter: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "P" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(8741807603274333571), index: 4, trait: Binder { value: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(7752569106737159048), index: 0 }] }, args: [] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] } (available clauses: [@TraitClause2]: TraitRef { def_id: core::ops::function::FnMut, generic_args: [Type(Param(ParamTy { index: 2, name: "P" })), Type(Tuple([Alias(Alias { kind: Projection { impl_expr: ImplExpr { trait: Binder { value: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(8741807603274333571), index: 4, trait: Binder { value: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(7752569106737159048), index: 0 }] }, args: [] }, assoc_item: AssocItem { def_id: core::iter::traits::iterator::Iterator::Item, name: "Item", kind: Type, container: TraitContainer { trait_id: core::iter::traits::iterator::Iterator }, has_value: false, fn_has_self_parameter: false, opt_rpitit_info: None } }, args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })], def_id: core::iter::traits::iterator::Iterator::Item })]))] }; [@TraitClause5]: TraitRef { def_id: core::iter::traits::double_ended::DoubleEndedIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause4]: TraitRef { def_id: core::iter::traits::exact_size::ExactSizeIterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [Self]: TraitRef { def_id: core::iter::traits::iterator::Iterator, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }; [@TraitClause0]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }; [@TraitClause1]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 2, name: "P" }))] }; [@TraitClause3]: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Adt { generic_args: [Lifetime(Region { kind: ReErased }), Type(Param(ParamTy { index: 1, name: "T" }))], trait_refs: [ImplExpr { trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(5936587636626320602), index: 0, trait: Binder { value: TraitRef { def_id: core::marker::Sized, generic_args: [Type(Param(ParamTy { index: 1, name: "T" }))] }, bound_vars: [] }, path: [] }, args: [] }], def_id: core::slice::iter::Iter })] }) (context: core::slice::iter::{impl#182}::rposition)))::[@TraitClause0])::Output = bool,

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Iter<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182<'_, T>::Item

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Iter<'a, T>>
{
    type Item = &'a (T)
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::count
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::last
    fn advance_by = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::advance_by
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::nth
    fn for_each = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::for_each
    fn fold = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::fold
    fn all = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::all
    fn any = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::any
    fn find = @Fun99
    fn find_map = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::find_map
    fn position = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::position
    fn rposition = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::rposition
    fn is_sorted_by = @Fun104
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182::__iterator_get_unchecked
}

trait core::ops::arith::AddAssign<Self, Rhs>
{
    fn add_assign : core::ops::arith::AddAssign::add_assign
}

fn core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign<'_0, '_1, '_2>(@1: &'_1 mut (i32), @2: &'_2 (i32))

impl<'_0> core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365<'_0> : core::ops::arith::AddAssign<i32, &'_0 (i32)>
{
    fn add_assign = core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365::add_assign
}

fn core::ops::arith::AddAssign::add_assign<'_0, Self, Rhs>(@1: &'_0 mut (Self), @2: Rhs)

fn core::slice::{Slice<T>}::chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::Chunks<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>)) -> core::option::Option<&'a (Slice<T>)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Chunks<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::count<'a, T>(@1: core::slice::iter::Chunks<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::last<'a, T>(@1: core::slice::iter::Chunks<'a, T>) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'_, T>::Item>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>), @2: usize) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'_, T>::Item>

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'_, T>::Item

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>>
{
    type Item = &'a (Slice<T>)
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::count
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::last
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::nth
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71::__iterator_get_unchecked
}

fn core::slice::{Slice<T>}::chunks_exact<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::ChunksExact<'_0, T>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>)) -> core::option::Option<&'a (Slice<T>)>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::ChunksExact<'a, T>)) -> (usize, core::option::Option<usize>)

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::count<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>) -> usize

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::last<'a, T>(@1: core::slice::iter::ChunksExact<'a, T>) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'_, T>::Item>

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>), @2: usize) -> core::option::Option<core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'_, T>::Item>

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::ChunksExact<'a, T>), @2: usize) -> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'_, T>::Item

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::ChunksExact<'a, T>>
{
    type Item = &'a (Slice<T>)
    fn next = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::next
    fn size_hint = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::size_hint
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::count
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::last
    fn nth = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::nth
    fn __iterator_get_unchecked = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90::__iterator_get_unchecked
}

fn test_crate::main()
{
    let @0: (); // return
    let a@1: Array<i32, 7 : usize>; // local
    let i@2: i32; // local
    let @3: (); // anonymous local
    let @4: core::array::iter::IntoIter<i32, 7 : usize>; // anonymous local
    let @5: core::array::iter::IntoIter<i32, 7 : usize>; // anonymous local
    let @6: Array<i32, 7 : usize>; // anonymous local
    let iter@7: core::array::iter::IntoIter<i32, 7 : usize>; // local
    let @8: (); // anonymous local
    let @9: (); // anonymous local
    let @10: core::option::Option<i32>; // anonymous local
    let @11: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>); // anonymous local
    let @12: &'_ mut (core::array::iter::IntoIter<i32, 7 : usize>); // anonymous local
    let v@13: i32; // local
    let @14: i32; // anonymous local
    let @15: (); // anonymous local
    let @16: core::slice::iter::Iter<'_, i32>; // anonymous local
    let @17: core::slice::iter::Iter<'_, i32>; // anonymous local
    let @18: &'_ (Slice<i32>); // anonymous local
    let @19: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@20: core::slice::iter::Iter<'_, i32>; // local
    let @21: (); // anonymous local
    let @22: core::option::Option<&'_ (i32)>; // anonymous local
    let @23: &'_ mut (core::slice::iter::Iter<'_, i32>); // anonymous local
    let @24: &'_ mut (core::slice::iter::Iter<'_, i32>); // anonymous local
    let v@25: &'_ (i32); // local
    let @26: (); // anonymous local
    let @27: &'_ mut (i32); // anonymous local
    let @28: &'_ (i32); // anonymous local
    let @29: (); // anonymous local
    let @30: core::slice::iter::Chunks<'_, i32>; // anonymous local
    let @31: core::slice::iter::Chunks<'_, i32>; // anonymous local
    let @32: &'_ (Slice<i32>); // anonymous local
    let @33: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@34: core::slice::iter::Chunks<'_, i32>; // local
    let @35: (); // anonymous local
    let @36: core::option::Option<&'_ (Slice<i32>)>; // anonymous local
    let @37: &'_ mut (core::slice::iter::Chunks<'_, i32>); // anonymous local
    let @38: &'_ mut (core::slice::iter::Chunks<'_, i32>); // anonymous local
    let @39: (); // anonymous local
    let @40: core::slice::iter::ChunksExact<'_, i32>; // anonymous local
    let @41: core::slice::iter::ChunksExact<'_, i32>; // anonymous local
    let @42: &'_ (Slice<i32>); // anonymous local
    let @43: &'_ (Array<i32, 7 : usize>); // anonymous local
    let iter@44: core::slice::iter::ChunksExact<'_, i32>; // local
    let @45: (); // anonymous local
    let @46: core::option::Option<&'_ (Slice<i32>)>; // anonymous local
    let @47: &'_ mut (core::slice::iter::ChunksExact<'_, i32>); // anonymous local
    let @48: &'_ mut (core::slice::iter::ChunksExact<'_, i32>); // anonymous local
    let expected@49: i32; // local
    let @50: (); // anonymous local
    let @51: (&'_ (i32), &'_ (i32)); // anonymous local
    let @52: &'_ (i32); // anonymous local
    let @53: &'_ (i32); // anonymous local
    let left_val@54: &'_ (i32); // local
    let right_val@55: &'_ (i32); // local
    let @56: bool; // anonymous local
    let @57: i32; // anonymous local
    let @58: i32; // anonymous local
    let kind@59: core::panicking::AssertKind; // local
    let @60: core::panicking::AssertKind; // anonymous local
    let @61: &'_ (i32); // anonymous local
    let @62: &'_ (i32); // anonymous local
    let @63: &'_ (i32); // anonymous local
    let @64: &'_ (i32); // anonymous local
    let @65: core::option::Option<core::fmt::Arguments<'_>>; // anonymous local
    let @66: (); // anonymous local
    let @67: (); // anonymous local
    let @68: (); // anonymous local
    let @69: (); // anonymous local
    let @70: (); // anonymous local
    let @71: (); // anonymous local
    let @72: (); // anonymous local
    let @73: (); // anonymous local
    let @74: (); // anonymous local
    let @75: (); // anonymous local
    let @76: (); // anonymous local
    let @77: (); // anonymous local
    let @78: (); // anonymous local
    let @79: (); // anonymous local

    a@1 := [const (0 : i32), const (1 : i32), const (2 : i32), const (3 : i32), const (4 : i32), const (5 : i32), const (6 : i32); 7 : usize]
    @fake_read(a@1)
    i@2 := const (0 : i32)
    @fake_read(i@2)
    @6 := copy (a@1)
    @5 := core::array::iter::{impl core::iter::traits::collect::IntoIterator for Array<T, const N : usize>}<i32, 7 : usize>::into_iter(move (@6))
    drop @6
    @4 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<core::array::iter::IntoIter<i32, 7 : usize>>[core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<i32, 7 : usize>]::into_iter(move (@5))
    drop @5
    @fake_read(@4)
    iter@7 := move (@4)
    loop {
        @12 := &mut iter@7
        @11 := &two-phase-mut *(@12)
        @10 := core::array::iter::{impl core::iter::traits::iterator::Iterator for core::array::iter::IntoIter<T, const N : usize>}#2<i32, 7 : usize>::next(move (@11))
        drop @11
        @fake_read(@10)
        match @10 {
            0 => {
                break 0
            },
            1 => {
                v@13 := copy ((@10 as variant @1).0)
                @14 := copy (v@13)
                i@2 := copy (i@2) + move (@14)
                drop @14
                @67 := ()
                @9 := move (@67)
                drop v@13
                drop @12
                drop @10
                drop @9
                @68 := ()
                @8 := move (@68)
                continue 0
            },
        }
    }
    @66 := ()
    @3 := move (@66)
    drop @12
    drop @10
    drop @9
    drop iter@7
    drop iter@7
    drop @4
    drop @4
    drop @3
    @19 := &a@1
    @18 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@19))
    drop @19
    @17 := core::slice::{Slice<T>}::iter<i32>(move (@18))
    drop @18
    @16 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<core::slice::iter::Iter<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182<'_, i32>]::into_iter(move (@17))
    drop @17
    @fake_read(@16)
    iter@20 := move (@16)
    loop {
        @24 := &mut iter@20
        @23 := &two-phase-mut *(@24)
        @22 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Iter<'a, T>}#182<'_, i32>::next(move (@23))
        drop @23
        @fake_read(@22)
        match @22 {
            0 => {
                break 0
            },
            1 => {
                v@25 := copy ((@22 as variant @1).0)
                @27 := &two-phase-mut i@2
                @28 := copy (v@25)
                @26 := core::ops::arith::{impl core::ops::arith::AddAssign<&'_0 (i32)> for i32}#365<'_>::add_assign(move (@27), move (@28))
                drop @28
                drop @27
                drop @26
                @70 := ()
                @21 := move (@70)
                drop v@25
                drop @24
                drop @22
                drop @21
                @71 := ()
                @8 := move (@71)
                continue 0
            },
        }
    }
    @69 := ()
    @15 := move (@69)
    drop @24
    drop @22
    drop @21
    drop iter@20
    drop @16
    drop @15
    @33 := &a@1
    @32 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@33))
    drop @33
    @31 := core::slice::{Slice<T>}::chunks<i32>(move (@32), const (2 : usize))
    drop @32
    @30 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<core::slice::iter::Chunks<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'_, i32>]::into_iter(move (@31))
    drop @31
    @fake_read(@30)
    iter@34 := move (@30)
    loop {
        @38 := &mut iter@34
        @37 := &two-phase-mut *(@38)
        @36 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>}#71<'_, i32>::next(move (@37))
        drop @37
        @fake_read(@36)
        match @36 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @73 := ()
                @35 := move (@73)
                drop @38
                drop @36
                drop @35
                @74 := ()
                @8 := move (@74)
                continue 0
            },
        }
    }
    @72 := ()
    @29 := move (@72)
    drop @38
    drop @36
    drop @35
    drop iter@34
    drop @30
    drop @29
    @43 := &a@1
    @42 := @ArrayToSliceShared<'_, i32, 7 : usize>(move (@43))
    drop @43
    @41 := core::slice::{Slice<T>}::chunks_exact<i32>(move (@42), const (2 : usize))
    drop @42
    @40 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<core::slice::iter::ChunksExact<'_, i32>>[core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'_, i32>]::into_iter(move (@41))
    drop @41
    @fake_read(@40)
    iter@44 := move (@40)
    loop {
        @48 := &mut iter@44
        @47 := &two-phase-mut *(@48)
        @46 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::ChunksExact<'a, T>}#90<'_, i32>::next(move (@47))
        drop @47
        @fake_read(@46)
        match @46 {
            0 => {
                break 0
            },
            1 => {
                i@2 := copy (i@2) + const (1 : i32)
                @76 := ()
                @45 := move (@76)
                drop @48
                drop @46
                drop @45
                @77 := ()
                @8 := move (@77)
                continue 0
            },
        }
    }
    @75 := ()
    @39 := move (@75)
    drop @48
    drop @46
    drop @45
    drop iter@44
    drop @40
    drop @39
    expected@49 := const (28 : i32)
    @fake_read(expected@49)
    @52 := &i@2
    @53 := &expected@49
    @51 := (move (@52), move (@53))
    drop @53
    drop @52
    @fake_read(@51)
    left_val@54 := copy ((@51).0)
    right_val@55 := copy ((@51).1)
    @57 := copy (*(left_val@54))
    @58 := copy (*(right_val@55))
    @56 := move (@57) == move (@58)
    if move (@56) {
    }
    else {
        drop @58
        drop @57
        kind@59 := core::panicking::AssertKind::Eq {  }
        @fake_read(kind@59)
        @60 := move (kind@59)
        @62 := &*(left_val@54)
        @61 := &*(@62)
        @64 := &*(right_val@55)
        @63 := &*(@64)
        @65 := core::option::Option::None {  }
        panic(core::panicking::assert_failed)
    }
    drop @58
    drop @57
    @78 := ()
    @50 := move (@78)
    drop @56
    drop right_val@55
    drop left_val@54
    drop @51
    drop @50
    @79 := ()
    @0 := move (@79)
    drop expected@49
    drop i@2
    drop a@1
    @0 := ()
    return
}

fn core::iter::traits::iterator::Iterator::next_chunk<'_0, Self, const N : usize>(@1: &'_0 mut (Self)) -> core::result::Result<Array<Self::Item, const N : usize>, core::array::iter::IntoIter<Self::Item, const N : usize>>

fn core::iter::traits::iterator::Iterator::size_hint<'_0, Self>(@1: &'_0 (Self)) -> (usize, core::option::Option<usize>)

fn core::iter::traits::iterator::Iterator::count<Self>(@1: Self) -> usize

fn core::iter::traits::iterator::Iterator::last<Self>(@1: Self) -> core::option::Option<Self::Item>

fn core::iter::traits::iterator::Iterator::advance_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26>>

fn core::iter::traits::iterator::Iterator::nth<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::Item>

fn core::iter::traits::iterator::Iterator::step_by<Self>(@1: Self, @2: usize) -> core::iter::adapters::step_by::StepBy<Self>

fn core::iter::traits::iterator::Iterator::chain<Self, U>(@1: Self, @2: U) -> core::iter::adapters::chain::Chain<Self, @TraitClause2::IntoIter>
where
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause2::Item = Self::Item,

fn core::iter::traits::iterator::Iterator::zip<Self, U>(@1: Self, @2: U) -> core::iter::adapters::zip::Zip<Self, @TraitClause2::IntoIter>
where
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,

fn core::iter::traits::iterator::Iterator::intersperse<Self>(@1: Self, @2: Self::Item) -> core::iter::adapters::intersperse::Intersperse<Self, Self, @TraitClause1>
where
    [@TraitClause1]: core::clone::Clone<Self::Item>,

fn core::iter::traits::iterator::Iterator::intersperse_with<Self, G>(@1: Self, @2: G) -> core::iter::adapters::intersperse::IntersperseWith<Self, G, Self>
where
    [@TraitClause2]: core::ops::function::FnMut<G, ()>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = Self::Item,

fn core::iter::traits::iterator::Iterator::map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::map::Map<Self, F>
where
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = B,

fn core::iter::traits::iterator::Iterator::for_each<Self, F>(@1: Self, @2: F)
where
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = (),

fn core::iter::traits::iterator::Iterator::filter_map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::filter_map::FilterMap<Self, F>
where
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = core::option::Option<B>,

fn core::iter::traits::iterator::Iterator::enumerate<Self>(@1: Self) -> core::iter::adapters::enumerate::Enumerate<Self>

fn core::iter::traits::iterator::Iterator::peekable<Self>(@1: Self) -> core::iter::adapters::peekable::Peekable<Self, Self>

fn core::iter::traits::iterator::Iterator::map_while<Self, B, P>(@1: Self, @2: P) -> core::iter::adapters::map_while::MapWhile<Self, P>
where
    [@TraitClause3]: core::ops::function::FnMut<P, (Self::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = core::option::Option<B>,

fn core::iter::traits::iterator::Iterator::skip<Self>(@1: Self, @2: usize) -> core::iter::adapters::skip::Skip<Self>

fn core::iter::traits::iterator::Iterator::take<Self>(@1: Self, @2: usize) -> core::iter::adapters::take::Take<Self>

fn core::iter::traits::iterator::Iterator::flat_map<Self, U, F>(@1: Self, @2: F) -> core::iter::adapters::flatten::FlatMap<Self, U, F, @TraitClause3>
where
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = U,

fn core::iter::traits::iterator::Iterator::flatten<Self>(@1: Self) -> core::iter::adapters::flatten::Flatten<Self, Self, @TraitClause1>
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<Self::Item>,

fn core::iter::traits::iterator::Iterator::fuse<Self>(@1: Self) -> core::iter::adapters::fuse::Fuse<Self>

fn core::iter::traits::iterator::Iterator::by_ref<'_0, Self>(@1: &'_0 mut (Self)) -> &'_0 mut (Self)

fn core::iter::traits::iterator::Iterator::collect<Self, B>(@1: Self) -> B
where
    [@TraitClause1]: core::iter::traits::collect::FromIterator<B, Self::Item>,

fn core::iter::traits::iterator::Iterator::try_collect<'_0, Self, B>(@1: &'_0 mut (Self)) -> @TraitClause3::TryType
where
    [@TraitClause2]: core::ops::try_trait::Try<Self::Item>,
    [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause2::Residual, B>,
    [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause2::Output>,

fn core::iter::traits::iterator::Iterator::collect_into<'_0, Self, E>(@1: Self, @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause1]: core::iter::traits::collect::Extend<E, Self::Item>,

fn core::iter::traits::iterator::Iterator::is_partitioned<Self, P>(@1: Self, @2: P) -> bool
where
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = bool,

fn core::iter::traits::iterator::Iterator::try_fold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = R,
    @TraitClause5::Output = B,

fn core::iter::traits::iterator::Iterator::try_for_each<'_0, Self, F, R>(@1: &'_0 mut (Self), @2: F) -> R
where
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = R,
    @TraitClause4::Output = (),

fn core::iter::traits::iterator::Iterator::fold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = B,

fn core::iter::traits::iterator::Iterator::reduce<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>
where
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item, Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = Self::Item,

fn core::iter::traits::iterator::Iterator::try_reduce<'_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause4::TryType
where
    [@TraitClause3]: core::ops::try_trait::Try<R>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, core::option::Option<Self::Item>>,
    [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (Self::Item, Self::Item)>,
    @TraitClause3::Output = Self::Item,
    (parents(@TraitClause5)::[@TraitClause0])::Output = R,

fn core::iter::traits::iterator::Iterator::all<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = bool,

fn core::iter::traits::iterator::Iterator::any<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = bool,

fn core::iter::traits::iterator::Iterator::find_map<'_0, Self, B, F>(@1: &'_0 mut (Self), @2: F) -> core::option::Option<B>
where
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = core::option::Option<B>,

fn core::iter::traits::iterator::Iterator::position<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<usize>
where
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    (parents(@TraitClause2)::[@TraitClause0])::Output = bool,

fn core::iter::traits::iterator::Iterator::max<Self>(@1: Self) -> core::option::Option<Self::Item>
where
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

fn core::iter::traits::iterator::Iterator::min<Self>(@1: Self) -> core::option::Option<Self::Item>
where
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

fn core::iter::traits::iterator::Iterator::rev<Self>(@1: Self) -> core::iter::adapters::rev::Rev<Self>
where
    [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,

fn core::iter::traits::iterator::Iterator::unzip<Self, A, B, FromA, FromB>(@1: Self) -> (FromA, FromB)
where
    [@TraitClause4]: core::default::Default<FromA>,
    [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause6]: core::default::Default<FromB>,
    [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause9]: core::iter::traits::iterator::Iterator<Self>,
    Self::Item = (A, B),

fn core::iter::traits::iterator::Iterator::copied<'a, Self, T>(@1: Self) -> core::iter::adapters::copied::Copied<Self>
where
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::marker::Copy<T>,
    T : 'a,
    Self::Item = &'a (T),

fn core::iter::traits::iterator::Iterator::cloned<'a, Self, T>(@1: Self) -> core::iter::adapters::cloned::Cloned<Self>
where
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::clone::Clone<T>,
    T : 'a,
    Self::Item = &'a (T),

fn core::iter::traits::iterator::Iterator::cycle<Self>(@1: Self) -> core::iter::adapters::cycle::Cycle<Self>
where
    [@TraitClause1]: core::clone::Clone<Self>,

fn core::iter::traits::iterator::Iterator::array_chunks<Self, const N : usize>(@1: Self) -> core::iter::adapters::array_chunks::ArrayChunks<Self, const N : usize, Self>

fn core::iter::traits::iterator::Iterator::sum<Self, S>(@1: Self) -> S
where
    [@TraitClause2]: core::iter::traits::accum::Sum<S, Self::Item>,

fn core::iter::traits::iterator::Iterator::product<Self, P>(@1: Self) -> P
where
    [@TraitClause2]: core::iter::traits::accum::Product<P, Self::Item>,

fn core::iter::traits::iterator::Iterator::cmp<Self, I>(@1: Self, @2: I) -> core::cmp::Ordering
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::Ord<Self::Item>,
    @TraitClause1::Item = Self::Item,

fn core::iter::traits::iterator::Iterator::cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = core::cmp::Ordering,

fn core::iter::traits::iterator::Iterator::partial_cmp<Self, I>(@1: Self, @2: I) -> core::option::Option<core::cmp::Ordering>
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::partial_cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>
where
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = core::option::Option<core::cmp::Ordering>,

fn core::iter::traits::iterator::Iterator::eq<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::eq_by<Self, I, F>(@1: Self, @2: I, @3: F) -> bool
where
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = bool,

fn core::iter::traits::iterator::Iterator::ne<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::lt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::le<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::gt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::ge<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,

fn core::iter::traits::iterator::Iterator::is_sorted<Self>(@1: Self) -> bool
where
    [@TraitClause1]: core::cmp::PartialOrd<Self::Item, Self::Item>,

fn core::iter::traits::iterator::Iterator::is_sorted_by_key<Self, F, K>(@1: Self, @2: F) -> bool
where
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::cmp::PartialOrd<K, K>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = K,

unsafe fn core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Self::Item
where
    [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>,

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> (parents(Self)::[@TraitClause0])::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>

fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::Extend::extend_one<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)

fn core::iter::traits::collect::Extend::extend_reserve<'_0, Self, A>(@1: &'_0 mut (Self), @2: usize)

unsafe fn core::iter::traits::collect::Extend::extend_one_unchecked<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)

fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

fn core::cmp::Ord::max<Self>(@1: Self, @2: Self) -> Self

fn core::cmp::Ord::min<Self>(@1: Self, @2: Self) -> Self

fn core::cmp::Ord::clamp<Self>(@1: Self, @2: Self, @3: Self) -> Self
where
    [@TraitClause1]: core::cmp::PartialOrd<Self, Self>,

fn core::cmp::Eq::assert_receiver_is_total_eq<'_0, Self>(@1: &'_0 (Self))

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>

fn core::cmp::PartialOrd::lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<(parents(Self)::[@TraitClause0])::Item>

fn core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26>>

fn core::iter::traits::double_ended::DoubleEndedIterator::nth_back<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<(parents(Self)::[@TraitClause0])::Item>

fn core::iter::traits::double_ended::DoubleEndedIterator::try_rfold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause4]: core::ops::function::FnMut<F, (B, (parents(Self)::[@TraitClause0])::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    (parents(@TraitClause4)::[@TraitClause0])::Output = R,
    @TraitClause5::Output = B,

fn core::iter::traits::double_ended::DoubleEndedIterator::rfold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause3]: core::ops::function::FnMut<F, (B, (parents(Self)::[@TraitClause0])::Item)>,
    (parents(@TraitClause3)::[@TraitClause0])::Output = B,

fn core::default::Default::default<Self>() -> Self

fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size<'_0, Self>(@1: &'_0 (Self)) -> usize
where
    [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>,

fn core::iter::traits::exact_size::ExactSizeIterator::len<'_0, Self>(@1: &'_0 (Self)) -> usize

fn core::iter::traits::exact_size::ExactSizeIterator::is_empty<'_0, Self>(@1: &'_0 (Self)) -> bool



