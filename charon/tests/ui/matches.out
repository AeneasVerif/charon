# Final LLBC before serialization:

enum test_crate::E1 =
|  V1()
|  V2()
|  V3()


fn test_crate::test1(@1: test_crate::E1) -> bool
{
    let @0: bool; // return
    let x@1: test_crate::E1; // arg #1

    @fake_read(x@1)
    match x@1 {
        0 => {
            @0 := const (true)
        },
        1 => {
            @0 := const (true)
        },
        2 => {
            @0 := const (false)
        }
    }
    return
}

fn test_crate::id<T>(@1: T) -> T
{
    let @0: T; // return
    let x@1: T; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

enum test_crate::E2 =
|  V1(u32)
|  V2(u32)
|  V3()


fn test_crate::test2(@1: test_crate::E2) -> u32
{
    let @0: u32; // return
    let x@1: test_crate::E2; // arg #1
    let n@2: u32; // local

    @fake_read(x@1)
    match x@1 {
        0 => {
            n@2 := copy ((x@1 as variant @0).0)
            @0 := copy (n@2)
            drop n@2
        },
        1 => {
            n@2 := copy ((x@1 as variant @1).0)
            @0 := copy (n@2)
            drop n@2
        },
        2 => {
            @0 := const (0 : u32)
        }
    }
    return
}

fn test_crate::test3(@1: test_crate::E2) -> u32
{
    let @0: u32; // return
    let x@1: test_crate::E2; // arg #1
    let y@2: u32; // local
    let n@3: u32; // local
    let z@4: u32; // local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    @fake_read(x@1)
    match x@1 {
        0 => {
            n@3 := copy ((x@1 as variant @0).0)
            y@2 := copy (n@3)
            drop n@3
        },
        1 => {
            n@3 := copy ((x@1 as variant @1).0)
            y@2 := copy (n@3)
            drop n@3
        },
        2 => {
            y@2 := const (0 : u32)
        }
    }
    @fake_read(y@2)
    z@4 := test_crate::id<u32>(const (3 : u32))
    @fake_read(z@4)
    @5 := copy (y@2)
    @6 := copy (z@4)
    @0 := move (@5) + move (@6)
    drop @6
    drop @5
    drop z@4
    drop y@2
    return
}



