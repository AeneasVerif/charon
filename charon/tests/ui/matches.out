# Final LLBC before serialization:

pub enum test_crate::E1 =
|  V1()
|  V2()
|  V3()


pub fn test_crate::test1(@1: test_crate::E1) -> bool
{
    let @0: bool; // return
    let x@1: test_crate::E1; // arg #1

    @fake_read(x@1)
    match x@1 {
        0 | 1 => {
        },
        2 => {
            @0 := const (false)
            return
        },
    }
    @0 := const (true)
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub fn test_crate::id<T>(@1: T) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: T; // return
    let x@1: T; // arg #1

    @0 := move (x@1)
    drop x@1
    return
}

pub enum test_crate::E2 =
|  V1(u32)
|  V2(u32)
|  V3()


pub fn test_crate::test2(@1: test_crate::E2) -> u32
{
    let @0: u32; // return
    let x@1: test_crate::E2; // arg #1
    let n@2: u32; // local

    @fake_read(x@1)
    match x@1 {
        0 => {
            n@2 := copy ((x@1 as variant @0).0)
        },
        1 => {
            n@2 := copy ((x@1 as variant @1).0)
        },
        2 => {
            @0 := const (0 : u32)
            return
        },
    }
    @0 := copy (n@2)
    drop n@2
    return
}

pub fn test_crate::test3(@1: test_crate::E2) -> u32
{
    let @0: u32; // return
    let x@1: test_crate::E2; // arg #1
    let @2: (); // anonymous local
    let y@3: u32; // local
    let n@4: u32; // local
    let z@5: u32; // local
    let @6: u32; // anonymous local
    let @7: u32; // anonymous local

    @2 := ()
    @fake_read(@2)
    drop @2
    @fake_read(x@1)
    match x@1 {
        0 => {
            n@4 := copy ((x@1 as variant @0).0)
            y@3 := copy (n@4)
            drop n@4
        },
        1 => {
            n@4 := copy ((x@1 as variant @1).0)
            y@3 := copy (n@4)
            drop n@4
        },
        2 => {
            y@3 := const (0 : u32)
        },
    }
    @fake_read(y@3)
    z@5 := test_crate::id<u32>[core::marker::Sized<u32>](const (3 : u32))
    @fake_read(z@5)
    @6 := copy (y@3)
    @7 := copy (z@5)
    @0 := move (@6) + move (@7)
    drop @7
    drop @6
    drop z@5
    drop y@3
    return
}



