error: Could not find region: Region { kind: ReEarlyParam(EarlyParamRegion { index: 2, name: "'b" }) }
       
       Region vars map:
       {Region { kind: ReEarlyParam(EarlyParamRegion { index: 0, name: "'a" }) }: 0}
       
       Bound region vars:
       []
  --> tests/ui/generic-associated-types.rs:11:5
   |
11 |     type Item<'b> = &'b T;
   |     ^^^^^^^^^^^^^

error: Ignoring the following item due to an error: test_crate::{impl#0}
  --> tests/ui/generic-associated-types.rs:10:1
   |
10 | impl<'a, T> LendingIterator for Option<&'a T> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

thread 'rustc' panicked at /rustc/730d5d4095a264ef5f7c0a0781eea68c15431d45/compiler/rustc_type_ir/src/binder.rs:783:9:
const parameter `'a/#1` ('a/#1/1) out of range when instantiating args=[Self/#0]
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
error: Thread panicked when extracting item `test_crate::LendingIterator::next`.
 --> tests/ui/generic-associated-types.rs:7:5
  |
7 |     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Ignoring the following item due to an error: test_crate::LendingIterator::next
 --> tests/ui/generic-associated-types.rs:7:5
  |
7 |     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

disabled backtrace
warning[E9999]: Hax frontend found a projected type with escaping bound vars. Please report https://github.com/hacspec/hax/issues/495
                
                Context:
                 - alias_ty: AliasTy {
                    args: [
                        impl for<'a> FnMut(I::Item<'a>)/#1,
                        (Alias(Projection, AliasTy { args: [I/#0, '^0.Named(test_crate::for_each::'a, "'a")], def_id: test_crate::LendingIterator::Item, .. }),),
                    ],
                    def_id: core::ops::function::FnOnce::Output,
                    ..
                }
                 - alias_kind: Projection
                 - trait_ref: <impl for<'a> FnMut(I::Item<'a>) as std::ops::FnOnce<(<I as LendingIterator>::Item<'a>,)>>
                 - trait_ref_and_generics: (
                    <impl for<'a> FnMut(I::Item<'a>) as std::ops::FnOnce<(<I as LendingIterator>::Item<'a>,)>>,
                    [],
                )
                 - rebased_generics: [
                    impl for<'a> FnMut(I::Item<'a>)/#1,
                    (Alias(Projection, AliasTy { args: [I/#0, '^0.Named(test_crate::for_each::'a, "'a")], def_id: test_crate::LendingIterator::Item, .. }),),
                    (Alias(Projection, AliasTy { args: [I/#0, '^0.Named(test_crate::for_each::'a, "'a")], def_id: test_crate::LendingIterator::Item, .. }),),
                ]
                 - norm_rebased_generics: Err(
                    Type(
                        (Alias(Projection, AliasTy { args: [impl for<'a> FnMut(I::Item<'a>)/#1, '^0.Named(test_crate::for_each::'a, "'a")], def_id: test_crate::LendingIterator::Item, .. }),),
                    ),
                )
                 - norm_generics: Err(
                    Type(
                        (Alias(Projection, AliasTy { args: [impl for<'a> FnMut(I::Item<'a>)/#1, '^0.Named(test_crate::for_each::'a, "'a")], def_id: test_crate::LendingIterator::Item, .. }),),
                    ),
                )
                 - early_binder_generics: Ok(
                    <(<I as LendingIterator>::Item<'a>,) as std::ops::FnOnce<(<impl for<'a> FnMut(I::Item<'a>) as LendingIterator>::Item<'a>,)>>,
                )
                 - early_binder_rebased_generics: Ok(
                    <(<I as LendingIterator>::Item<'a>,) as std::ops::FnOnce<(<impl for<'a> FnMut(I::Item<'a>) as LendingIterator>::Item<'a>,)>>,
                )
  |
  = note: ⚠️ This is a bug in Hax's frontend.
          Please report this error to https://github.com/hacspec/hax/issues with some context (e.g. the current crate)!

thread 'rustc' panicked at /rustc/730d5d4095a264ef5f7c0a0781eea68c15431d45/compiler/rustc_type_ir/src/binder.rs:783:9:
const parameter `'a/#1` ('a/#1/1) out of range when instantiating args=[I/#0]
error: Thread panicked when extracting item `test_crate::for_each`.
  --> tests/ui/generic-associated-types.rs:24:1
   |
24 | fn for_each<I: LendingIterator>(mut iter: I, f: impl for<'a> FnMut(I::Item<'a>)) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Ignoring the following item due to an error: test_crate::for_each
  --> tests/ui/generic-associated-types.rs:24:1
   |
24 | fn for_each<I: LendingIterator>(mut iter: I, f: impl for<'a> FnMut(I::Item<'a>)) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `x`
  --> tests/ui/generic-associated-types.rs:31:9
   |
31 |     let x = 42;
   |         ^ help: if this is intentional, prefix it with an underscore: `_x`
   |
   = note: `#[warn(unused_variables)]` on by default

error: aborting due to 6 previous errors; 2 warnings emitted

Error: Charon driver exited with code 101
