# Final LLBC before serialization:

fn test_crate::constant::CONST() -> usize
{
    let @0: usize; // return

    @0 := const (0 : usize)
    return
}

global test_crate::constant::CONST: usize = test_crate::constant::CONST()

fn test_crate::constant()
{
    let @0: (); // return
    let _val@1: usize; // local
    let _ref@2: &'_ (usize); // local
    let @3: usize; // anonymous local
    let _ref_mut@4: &'_ mut (usize); // local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let @8: usize; // anonymous local

    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(_val@1)
    @6 := test_crate::constant::CONST
    _val@1 := move (@6)
    storage_live(_ref@2)
    storage_live(@3)
    @7 := test_crate::constant::CONST
    @3 := move (@7)
    _ref@2 := &@3
    storage_live(_ref_mut@4)
    storage_live(@5)
    @8 := test_crate::constant::CONST
    @5 := move (@8)
    _ref_mut@4 := &mut @5
    @0 := ()
    storage_dead(@5)
    storage_dead(_ref_mut@4)
    storage_dead(@3)
    storage_dead(_ref@2)
    storage_dead(_val@1)
    @0 := ()
    return
}

fn test_crate::shared_static::SHARED_STATIC() -> usize
{
    let @0: usize; // return

    @0 := const (0 : usize)
    return
}

global test_crate::shared_static::SHARED_STATIC: usize = test_crate::shared_static::SHARED_STATIC()

fn test_crate::shared_static()
{
    let @0: (); // return
    let _val@1: usize; // local
    let @2: &'_ (usize); // anonymous local
    let _ref@3: &'_ (usize); // local
    let @4: &'_ (usize); // anonymous local
    let _ptr@5: *const usize; // local
    let @6: &'_ (usize); // anonymous local
    let @7: &'_ (usize); // anonymous local
    let @8: &'_ (usize); // anonymous local
    let @9: &'_ (usize); // anonymous local

    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(_val@1)
    storage_live(@2)
    @7 := &test_crate::shared_static::SHARED_STATIC
    @2 := move (@7)
    _val@1 := copy (*(@2))
    storage_dead(@2)
    storage_live(_ref@3)
    storage_live(@4)
    @8 := &test_crate::shared_static::SHARED_STATIC
    @4 := move (@8)
    _ref@3 := &*(@4)
    storage_live(_ptr@5)
    storage_live(@6)
    @9 := &test_crate::shared_static::SHARED_STATIC
    @6 := move (@9)
    _ptr@5 := &raw const *(@6)
    @0 := ()
    storage_dead(@6)
    storage_dead(_ptr@5)
    storage_dead(@4)
    storage_dead(_ref@3)
    storage_dead(_val@1)
    @0 := ()
    return
}

fn test_crate::mut_static::MUT_STATIC() -> usize
{
    let @0: usize; // return

    @0 := const (0 : usize)
    return
}

global test_crate::mut_static::MUT_STATIC: usize = test_crate::mut_static::MUT_STATIC()

fn test_crate::mut_static()
{
    let @0: (); // return
    let _val@1: usize; // local
    let @2: *mut usize; // anonymous local
    let _ref@3: &'_ (usize); // local
    let @4: *mut usize; // anonymous local
    let _ref_mut@5: &'_ mut (usize); // local
    let @6: *mut usize; // anonymous local
    let _ptr@7: *const usize; // local
    let @8: *mut usize; // anonymous local
    let _ptr_mut@9: *mut usize; // local
    let @10: *mut usize; // anonymous local
    let @11: *mut usize; // anonymous local
    let @12: *mut usize; // anonymous local
    let @13: *mut usize; // anonymous local
    let @14: *mut usize; // anonymous local
    let @15: *mut usize; // anonymous local

    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(_val@1)
    storage_live(@2)
    @11 := &raw mut test_crate::mut_static::MUT_STATIC
    @2 := move (@11)
    _val@1 := copy (*(@2))
    storage_dead(@2)
    storage_live(_ref@3)
    storage_live(@4)
    @12 := &raw mut test_crate::mut_static::MUT_STATIC
    @4 := move (@12)
    _ref@3 := &*(@4)
    storage_live(_ref_mut@5)
    storage_live(@6)
    @13 := &raw mut test_crate::mut_static::MUT_STATIC
    @6 := move (@13)
    _ref_mut@5 := &mut *(@6)
    storage_live(_ptr@7)
    storage_live(@8)
    @14 := &raw mut test_crate::mut_static::MUT_STATIC
    @8 := move (@14)
    _ptr@7 := &raw const *(@8)
    storage_live(_ptr_mut@9)
    storage_live(@10)
    @15 := &raw mut test_crate::mut_static::MUT_STATIC
    @10 := move (@15)
    _ptr_mut@9 := &raw mut *(@10)
    @0 := ()
    storage_dead(@10)
    storage_dead(_ptr_mut@9)
    storage_dead(@8)
    storage_dead(_ptr@7)
    storage_dead(@6)
    storage_dead(_ref_mut@5)
    storage_dead(@4)
    storage_dead(_ref@3)
    storage_dead(_val@1)
    @0 := ()
    return
}

struct test_crate::non_copy_static::Foo = {}

fn test_crate::non_copy_static::FOO() -> test_crate::non_copy_static::Foo
{
    let @0: test_crate::non_copy_static::Foo; // return

    @0 := test_crate::non_copy_static::Foo {  }
    return
}

global test_crate::non_copy_static::FOO: test_crate::non_copy_static::Foo = test_crate::non_copy_static::FOO()

fn test_crate::non_copy_static::{test_crate::non_copy_static::Foo}::method<'_0>(@1: &'_0 (test_crate::non_copy_static::Foo))
{
    let @0: (); // return
    let self@1: &'_ (test_crate::non_copy_static::Foo); // arg #1

    @0 := ()
    @0 := ()
    return
}

fn test_crate::non_copy_static()
{
    let @0: (); // return
    let @1: &'_ (test_crate::non_copy_static::Foo); // anonymous local
    let @2: &'_ (test_crate::non_copy_static::Foo); // anonymous local
    let @3: &'_ (test_crate::non_copy_static::Foo); // anonymous local

    storage_live(@3)
    storage_live(@1)
    storage_live(@2)
    @3 := &test_crate::non_copy_static::FOO
    @2 := move (@3)
    @1 := &*(@2)
    @0 := test_crate::non_copy_static::{test_crate::non_copy_static::Foo}::method<'_>(move (@1))
    storage_dead(@1)
    storage_dead(@2)
    @0 := ()
    return
}



