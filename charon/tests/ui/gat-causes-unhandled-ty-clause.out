# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::HasAssoc
trait HasAssoc<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Assoc>
    type Assoc
    vtable: test_crate::HasAssoc::{vtable}<Self::Assoc>
}

// Full name: test_crate::HasGAT
trait HasGAT<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Friend>
    parent_clause2 : [@TraitClause2]: HasAssoc<Self::Friend>
    type GAT<T, [@TraitClause0_1]: Sized<T>>
    where
        implied_clause_0 : [@TraitClause0_1]: Sized<Self::GAT>

    type Friend
    non-dyn-compatible
}

// Full name: test_crate::floatify
fn floatify<C>() -> @TraitClause1::parent_clause2::Assoc
where
    [@TraitClause0]: Sized<C>,
    [@TraitClause1]: HasGAT<C>,
{
    let @0: @TraitClause1::parent_clause2::Assoc; // return

    panic(core::panicking::panic)
}



