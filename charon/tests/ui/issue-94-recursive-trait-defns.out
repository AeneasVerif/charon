# Final LLBC before serialization:

pub trait core::marker::Sized<Self>

pub trait test_crate::Trait1<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::T>
    parent_clause2 : [@TraitClause2]: test_crate::Trait2<Self::T>
    type T
}

pub trait test_crate::Trait2<Self>
{
    parent_clause0 : [@TraitClause0]: test_crate::Trait1<Self>
}

pub trait test_crate::T1<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    parent_clause2 : [@TraitClause2]: test_crate::T2<T, Self>
}

pub trait test_crate::T2<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    parent_clause2 : [@TraitClause2]: test_crate::T1<T, Self>
}

pub trait test_crate::T3<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::T>
    parent_clause1 : [@TraitClause1]: test_crate::T5<Self::T>
    type T
}

pub trait test_crate::T5<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::T>
    parent_clause1 : [@TraitClause1]: test_crate::T4<Self::T>
    type T
}

pub trait test_crate::T4<Self>
{
    parent_clause0 : [@TraitClause0]: test_crate::T3<Self>
}

pub trait test_crate::T6<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    parent_clause2 : [@TraitClause2]: test_crate::T7<T>
    fn f = test_crate::T6::f<Self, T>
}

pub trait test_crate::T7<Self>
{
    parent_clause0 : [@TraitClause0]: test_crate::T6<Self, Self>
    fn g = test_crate::T7::g<Self>
}

pub fn test_crate::T7::g<Self>(@1: u64)

pub fn test_crate::T6::f<Self, T>(@1: u64)
{
    let @0: (); // return
    let x@1: u64; // arg #1
    let @2: u64; // anonymous local

    @2 := copy (x@1)
    @0 := Self::parent_clause2::g(move (@2))
    drop @2
    @0 := ()
    return
}



