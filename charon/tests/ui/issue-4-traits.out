# Final LLBC before serialization:

enum core::result::Result<T, E> =
|  Ok(T)
|  Err(E)


opaque type core::array::TryFromSliceError

trait core::convert::TryFrom<Self, T>
{
    type Error
    fn try_from : core::convert::TryFrom::try_from
}

fn core::convert::{impl core::convert::TryInto<U> for T#6}::try_into<T, U>(@1: T) -> core::result::Result<U, @TraitClause0::Error>
where
    // Inherited clauses:
    [@TraitClause0]: core::convert::TryFrom<U, T>,

trait core::clone::Clone<Self>
{
    fn clone : core::clone::Clone::clone
    fn clone_from
}

trait core::marker::Copy<Self>
{
    parent_clause_0 : [@TraitClause0]: core::clone::Clone<Self>
}

fn core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>#7}::try_from<'_0, '_1, T, const N : usize>(@1: &'_1 (Slice<T>)) -> core::result::Result<Array<T, const N : usize>, core::array::TryFromSliceError>
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Copy<T>,

impl<'_0, T, const N : usize> core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>#7}<'_0, T, const N : usize> : core::convert::TryFrom<Array<T, const N : usize>, &'_0 (Slice<T>)>
where
    [@TraitClause0]: core::marker::Copy<T>,
{
    type Error = core::array::TryFromSliceError with []
    fn try_from = core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>#7}::try_from
}

fn core::clone::impls::{impl core::clone::Clone for u8#6}::clone<'_0>(@1: &'_0 (u8)) -> u8

impl core::clone::impls::{impl core::clone::Clone for u8#6} : core::clone::Clone<u8>
{
    fn clone = core::clone::impls::{impl core::clone::Clone for u8#6}::clone
}

impl core::marker::{impl core::marker::Copy for u8#59} : core::marker::Copy<u8>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for u8#6}
}

opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

struct core::fmt::Error = {}

trait core::fmt::Debug<Self>
{
    fn fmt : core::fmt::Debug::fmt
}

fn core::result::{core::result::Result<T, E>}::unwrap<T, E>(@1: core::result::Result<T, E>) -> T
where
    [@TraitClause0]: core::fmt::Debug<E>,

fn core::array::{impl core::fmt::Debug for core::array::TryFromSliceError#26}::fmt<'_0, '_1, '_2>(@1: &'_0 (core::array::TryFromSliceError), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>

impl core::array::{impl core::fmt::Debug for core::array::TryFromSliceError#26} : core::fmt::Debug<core::array::TryFromSliceError>
{
    fn fmt = core::array::{impl core::fmt::Debug for core::array::TryFromSliceError#26}::fmt
}

fn test_crate::trait_error<'_0>(@1: &'_0 (Slice<u8>))
{
    let @0: (); // return
    let s@1: &'_ (Slice<u8>); // arg #1
    let _array@2: Array<u8, 4 : usize>; // local
    let @3: core::result::Result<Array<u8, 4 : usize>, core::array::TryFromSliceError>; // anonymous local
    let @4: &'_ (Slice<u8>); // anonymous local
    let @5: (); // anonymous local

    @4 := &*(s@1)
    @3 := core::convert::{impl core::convert::TryInto<U> for T#6}::try_into<&'_ (Slice<u8>), Array<u8, 4 : usize>>[core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>#7}<'_, u8, 4 : usize>[core::marker::{impl core::marker::Copy for u8#59}]](move (@4))
    drop @4
    _array@2 := core::result::{core::result::Result<T, E>}::unwrap<Array<u8, 4 : usize>, core::array::TryFromSliceError>[core::array::{impl core::fmt::Debug for core::array::TryFromSliceError#26}](move (@3))
    drop @3
    @fake_read(_array@2)
    @5 := ()
    @0 := move (@5)
    drop _array@2
    @0 := ()
    return
}

trait core::convert::TryInto<Self, T>
{
    type Error
    fn try_into : core::convert::TryInto::try_into
}

impl<T, U> core::convert::{impl core::convert::TryInto<U> for T#6}<T, U> : core::convert::TryInto<T, U>
where
    [@TraitClause0]: core::convert::TryFrom<U, T>,
{
    type Error = @TraitClause0::Error with []
    fn try_into = core::convert::{impl core::convert::TryInto<U> for T#6}::try_into
}

fn core::convert::TryInto::try_into<Self, T>(@1: Self) -> core::result::Result<T, Self::Error>

fn core::convert::TryFrom::try_from<Self, T>(@1: T) -> core::result::Result<Self, Self::Error>

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::fmt::Debug::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>



