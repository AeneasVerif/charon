# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub opaque type core::array::TryFromSliceError

#[lang_item("TryFrom")]
pub trait core::convert::TryFrom<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Error>
    type Error
    fn try_from = core::convert::TryFrom::try_from<Self, T>
}

pub fn core::convert::{impl core::convert::TryInto<U> for T}#6::try_into<T, U>(@1: T) -> core::result::Result<U, @TraitClause2::Error>[@TraitClause1, @TraitClause2::parent_clause2]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::convert::TryFrom<U, T>,

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub fn core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>}#7::try_from<'_0, T, const N : usize>(@1: &'_0 (Slice<T>)) -> core::result::Result<Array<T, const N : usize>, core::array::TryFromSliceError>[core::marker::Sized<Array<T, const N : usize>>, core::marker::Sized<core::array::TryFromSliceError>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,

impl core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>}#7<'_0, T, const N : usize> : core::convert::TryFrom<Array<T, const N : usize>, &'_0 (Slice<T>)>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,
{
    parent_clause0 = core::marker::Sized<Array<T, const N : usize>>
    parent_clause1 = core::marker::Sized<&'_ (Slice<T>)>
    parent_clause2 = core::marker::Sized<core::array::TryFromSliceError>
    type Error = core::array::TryFromSliceError
    fn try_from = core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>}#7::try_from<'_0, T, const N : usize>[@TraitClause0, @TraitClause1]
}

pub fn core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0>(@1: &'_0 (u8)) -> u8

impl core::clone::impls::{impl core::clone::Clone for u8}#6 : core::clone::Clone<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0_0>
}

impl core::marker::{impl core::marker::Copy for u8}#38 : core::marker::Copy<u8>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for u8}#6
}

#[lang_item("Formatter")]
pub opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

pub struct core::fmt::Error = {}

#[lang_item("Debug")]
pub trait core::fmt::Debug<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Debug::fmt<'_0_0, '_0_1, '_0_2, Self>
}

pub fn core::result::{core::result::Result<T, E>[@TraitClause0, @TraitClause1]}::unwrap<T, E>(@1: core::result::Result<T, E>[@TraitClause0, @TraitClause1]) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<E>,
    [@TraitClause2]: core::fmt::Debug<E>,

pub fn core::array::{impl core::fmt::Debug for core::array::TryFromSliceError}#26::fmt<'_0, '_1, '_2>(@1: &'_0 (core::array::TryFromSliceError), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

impl core::array::{impl core::fmt::Debug for core::array::TryFromSliceError}#26 : core::fmt::Debug<core::array::TryFromSliceError>
{
    fn fmt<'_0, '_1, '_2> = core::array::{impl core::fmt::Debug for core::array::TryFromSliceError}#26::fmt<'_0_0, '_0_1, '_0_2>
}

fn test_crate::trait_error<'_0>(@1: &'_0 (Slice<u8>))
{
    let @0: (); // return
    let s@1: &'_ (Slice<u8>); // arg #1
    let _array@2: Array<u8, 4 : usize>; // local
    let @3: core::result::Result<Array<u8, 4 : usize>, core::array::TryFromSliceError>[core::marker::Sized<Array<u8, 4 : usize>>, core::marker::Sized<core::array::TryFromSliceError>]; // anonymous local
    let @4: &'_ (Slice<u8>); // anonymous local

    @4 := &*(s@1)
    @3 := core::convert::{impl core::convert::TryInto<U> for T}#6::try_into<&'_ (Slice<u8>), Array<u8, 4 : usize>>[core::marker::Sized<&'_ (Slice<u8>)>, core::marker::Sized<Array<u8, 4 : usize>>, core::array::{impl core::convert::TryFrom<&'_0 (Slice<T>)> for Array<T, const N : usize>}#7<'_, u8, 4 : usize>[core::marker::Sized<u8>, core::marker::{impl core::marker::Copy for u8}#38]](move (@4))
    drop @4
    _array@2 := core::result::{core::result::Result<T, E>[@TraitClause0, @TraitClause1]}::unwrap<Array<u8, 4 : usize>, core::array::TryFromSliceError>[core::marker::Sized<Array<u8, 4 : usize>>, core::marker::Sized<core::array::TryFromSliceError>, core::array::{impl core::fmt::Debug for core::array::TryFromSliceError}#26](move (@3))
    drop @3
    @fake_read(_array@2)
    @0 := ()
    drop _array@2
    @0 := ()
    return
}

#[lang_item("TryInto")]
pub trait core::convert::TryInto<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<T>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Error>
    type Error
    fn try_into = core::convert::TryInto::try_into<Self, T>
}

pub fn core::convert::TryInto::try_into<Self, T>(@1: Self) -> core::result::Result<T, Self::Error>[Self::parent_clause1, Self::parent_clause2]

impl core::convert::{impl core::convert::TryInto<U> for T}#6<T, U> : core::convert::TryInto<T, U>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<U>,
    [@TraitClause2]: core::convert::TryFrom<U, T>,
{
    parent_clause0 = @TraitClause0
    parent_clause1 = @TraitClause1
    parent_clause2 = @TraitClause2::parent_clause2
    type Error = @TraitClause2::Error
    fn try_into = core::convert::{impl core::convert::TryInto<U> for T}#6::try_into<T, U>[@TraitClause0, @TraitClause1, @TraitClause2]
}

#[lang_item("try_from_fn")]
pub fn core::convert::TryFrom::try_from<Self, T>(@1: T) -> core::result::Result<Self, Self::Error>[Self::parent_clause0, Self::parent_clause2]

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn core::fmt::Debug::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]



