# Final LLBC before serialization:

trait core::marker::Sized<Self>

trait core::marker::Tuple<Self>

trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause_1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause_2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause_0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause_1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause_2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut : core::ops::function::FnMut::call_mut
}

fn test_crate::foo<F>(@1: F)
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (()))>,
    for<'a> (parents(@TraitClause1)::[@TraitClause0])::Output = (),
{
    let @0: (); // return
    let _f@1: F; // arg #1
    let @2: (); // anonymous local

    @2 := ()
    @0 := move (@2)
    drop _f@1
    @0 := ()
    return
}

fn test_crate::bar<'b, T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    for<'a> &'b (T) : 'a,
{
    let @0: (); // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := move (@1)
    @0 := ()
    return
}

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> (parents(Self)::[@TraitClause0])::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



