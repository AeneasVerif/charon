# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: test_crate::choose
pub fn choose<'a, T>(@1: bool, @2: &'a mut (T), @3: &'a mut (T)) -> &'a mut (T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ mut (T); // return
    let b@1: bool; // arg #1
    let x@2: &'_ mut (T); // arg #2
    let y@3: &'_ mut (T); // arg #3
    let @4: &'_ mut (T); // anonymous local
    let @5: &'_ mut (T); // anonymous local
    let @6: bool; // anonymous local
    let @7: &'_ mut (T); // anonymous local

    storage_live(@7)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := copy (b@1)
    if move (@6) {
        storage_live(@7)
        @7 := &mut *(x@2)
        @5 := &mut *(@7)
        storage_dead(@7)
    }
    else {
        @5 := &mut *(y@3)
    }
    @4 := &mut *(@5)
    storage_dead(@6)
    @0 := &mut *(@4)
    storage_dead(@5)
    storage_dead(@4)
    return
}

// Full name: test_crate::mul2_add1
pub fn mul2_add1(@1: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let @2: u32; // anonymous local
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@2)
    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (x@1)
    @5 := copy (@3) panic.+ copy (@4)
    @2 := move (@5)
    storage_dead(@4)
    storage_dead(@3)
    @6 := copy (@2) panic.+ const (1 : u32)
    @0 := move (@6)
    storage_dead(@2)
    return
}

// Full name: test_crate::use_mul2_add1
pub fn use_mul2_add1(@1: u32, @2: u32) -> u32
{
    let @0: u32; // return
    let x@1: u32; // arg #1
    let y@2: u32; // arg #2
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: u32; // anonymous local

    storage_live(@6)
    storage_live(@3)
    storage_live(@4)
    @4 := copy (x@1)
    @3 := mul2_add1(move (@4))
    storage_dead(@4)
    storage_live(@5)
    @5 := copy (y@2)
    @6 := copy (@3) panic.+ copy (@5)
    @0 := move (@6)
    storage_dead(@5)
    storage_dead(@3)
    return
}

pub fn test_crate::incr<'a>(@1: &'a mut (u32))
{
    let @0: (); // return
    let x@1: &'_ mut (u32); // arg #1
    let @2: u32; // anonymous local

    storage_live(@2)
    @2 := copy (*(x@1)) panic.+ const (1 : u32)
    *(x@1) := move (@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::use_incr
pub fn use_incr()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: (); // anonymous local
    let @3: &'_ mut (u32); // anonymous local
    let @4: &'_ mut (u32); // anonymous local
    let @5: (); // anonymous local
    let @6: &'_ mut (u32); // anonymous local
    let @7: &'_ mut (u32); // anonymous local
    let @8: (); // anonymous local
    let @9: &'_ mut (u32); // anonymous local
    let @10: &'_ mut (u32); // anonymous local

    storage_live(x@1)
    x@1 := const (0 : u32)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &mut x@1
    @3 := &two-phase-mut *(@4)
    @2 := test_crate::incr<'_>(move (@3))
    storage_dead(@3)
    storage_dead(@4)
    storage_dead(@2)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := &mut x@1
    @6 := &two-phase-mut *(@7)
    @5 := test_crate::incr<'_>(move (@6))
    storage_dead(@6)
    storage_dead(@7)
    storage_dead(@5)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    @10 := &mut x@1
    @9 := &two-phase-mut *(@10)
    @8 := test_crate::incr<'_>(move (@9))
    storage_dead(@9)
    storage_dead(@10)
    storage_dead(@8)
    @0 := ()
    storage_dead(x@1)
    @0 := ()
    return
}

// Full name: test_crate::CList
pub enum CList<T>
where
    [@TraitClause0]: Sized<T>,
{
  CCons(T, alloc::boxed::Box<CList<T>[@TraitClause0]>[MetaSized<CList<T>[@TraitClause0]>, Sized<Global>]),
  CNil,
}

// Full name: test_crate::list_nth
pub fn list_nth<'a, T>(@1: &'a (CList<T>[@TraitClause0]), @2: u32) -> &'a (T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ (T); // return
    let l@1: &'_ (CList<T>[@TraitClause0]); // arg #1
    let i@2: u32; // arg #2
    let x@3: &'_ (T); // local
    let tl@4: &'_ (alloc::boxed::Box<CList<T>[@TraitClause0]>[MetaSized<CList<T>[@TraitClause0]>, Sized<Global>]); // local
    let @5: bool; // anonymous local
    let @6: u32; // anonymous local
    let @7: &'_ (T); // anonymous local
    let @8: &'_ (CList<T>[@TraitClause0]); // anonymous local
    let @9: u32; // anonymous local
    let @10: u32; // anonymous local
    let @11: u32; // anonymous local

    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    match *(l@1) {
        CList::CCons => {
        },
        CList::CNil => {
            panic(core::panicking::panic_explicit)
        },
    }
    storage_live(x@3)
    x@3 := &(*(l@1) as variant CList::CCons).0
    storage_live(tl@4)
    tl@4 := &(*(l@1) as variant CList::CCons).1
    storage_live(@5)
    storage_live(@6)
    @6 := copy (i@2)
    @5 := move (@6) == const (0 : u32)
    if move (@5) {
        storage_dead(@6)
        @0 := &*(x@3)
    }
    else {
        storage_dead(@6)
        storage_live(@7)
        storage_live(@8)
        @8 := &*(*(tl@4))
        storage_live(@9)
        storage_live(@10)
        @10 := copy (i@2)
        @11 := copy (@10) panic.- const (1 : u32)
        @9 := move (@11)
        storage_dead(@10)
        @7 := list_nth<'_, T>[@TraitClause0](move (@8), move (@9))
        @0 := &*(@7)
        storage_dead(@9)
        storage_dead(@8)
        storage_dead(@7)
    }
    storage_dead(@5)
    storage_dead(tl@4)
    storage_dead(x@3)
    return
}

// Full name: test_crate::list_nth_mut
pub fn list_nth_mut<'a, T>(@1: &'a mut (CList<T>[@TraitClause0]), @2: u32) -> &'a mut (T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ mut (T); // return
    let l@1: &'_ mut (CList<T>[@TraitClause0]); // arg #1
    let i@2: u32; // arg #2
    let @3: &'_ mut (T); // anonymous local
    let @4: &'_ mut (T); // anonymous local
    let x@5: &'_ mut (T); // local
    let tl@6: &'_ mut (alloc::boxed::Box<CList<T>[@TraitClause0]>[MetaSized<CList<T>[@TraitClause0]>, Sized<Global>]); // local
    let @7: &'_ mut (T); // anonymous local
    let @8: &'_ mut (T); // anonymous local
    let @9: bool; // anonymous local
    let @10: u32; // anonymous local
    let @11: &'_ mut (T); // anonymous local
    let @12: &'_ mut (T); // anonymous local
    let @13: &'_ mut (CList<T>[@TraitClause0]); // anonymous local
    let @14: u32; // anonymous local
    let @15: u32; // anonymous local
    let @16: u32; // anonymous local

    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    storage_live(@4)
    match *(l@1) {
        CList::CCons => {
        },
        CList::CNil => {
            panic(core::panicking::panic_explicit)
        },
    }
    storage_live(x@5)
    x@5 := &mut (*(l@1) as variant CList::CCons).0
    storage_live(tl@6)
    tl@6 := &mut (*(l@1) as variant CList::CCons).1
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    @10 := copy (i@2)
    @9 := move (@10) == const (0 : u32)
    if move (@9) {
        storage_dead(@10)
        storage_live(@11)
        @11 := &mut *(x@5)
        @8 := &mut *(@11)
        storage_dead(@11)
    }
    else {
        storage_dead(@10)
        storage_live(@12)
        storage_live(@13)
        @13 := &two-phase-mut *(*(tl@6))
        storage_live(@14)
        storage_live(@15)
        @15 := copy (i@2)
        @16 := copy (@15) panic.- const (1 : u32)
        @14 := move (@16)
        storage_dead(@15)
        @12 := list_nth_mut<'_, T>[@TraitClause0](move (@13), move (@14))
        @8 := &mut *(@12)
        storage_dead(@14)
        storage_dead(@13)
        storage_dead(@12)
    }
    @7 := &mut *(@8)
    storage_dead(@9)
    @4 := &mut *(@7)
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(tl@6)
    storage_dead(x@5)
    @3 := &mut *(@4)
    @0 := &mut *(@3)
    storage_dead(@4)
    storage_dead(@3)
    return
}

// Full name: test_crate::list_nth_mut1
pub fn list_nth_mut1<'a, T>(@1: &'a mut (CList<T>[@TraitClause0]), @2: u32) -> &'a mut (T)
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ mut (T); // return
    let l@1: &'_ mut (CList<T>[@TraitClause0]); // arg #1
    let i@2: u32; // arg #2
    let @3: (); // anonymous local
    let x@4: &'_ mut (T); // local
    let tl@5: &'_ mut (alloc::boxed::Box<CList<T>[@TraitClause0]>[MetaSized<CList<T>[@TraitClause0]>, Sized<Global>]); // local
    let @6: (); // anonymous local
    let @7: bool; // anonymous local
    let @8: u32; // anonymous local
    let @9: u32; // anonymous local
    let @10: &'_ mut (CList<T>[@TraitClause0]); // anonymous local
    let @11: (); // anonymous local

    storage_live(x@4)
    storage_live(tl@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@3)
    loop {
        match *(l@1) {
            CList::CCons => {
                storage_live(x@4)
                x@4 := &mut (*(l@1) as variant CList::CCons).0
                storage_live(tl@5)
                tl@5 := &mut (*(l@1) as variant CList::CCons).1
                storage_live(@6)
                storage_live(@7)
                storage_live(@8)
                @8 := copy (i@2)
                @7 := move (@8) == const (0 : u32)
                if move (@7) {
                }
                else {
                    storage_dead(@8)
                    storage_dead(@7)
                    storage_dead(@6)
                    @9 := copy (i@2) panic.- const (1 : u32)
                    i@2 := move (@9)
                    storage_live(@10)
                    @10 := &mut *(*(tl@5))
                    l@1 := move (@10)
                    storage_dead(@10)
                    storage_dead(tl@5)
                    storage_dead(x@4)
                    continue 0
                }
                storage_dead(@8)
                @0 := &mut *(x@4)
                storage_dead(@7)
                storage_dead(@6)
                storage_dead(tl@5)
                storage_dead(x@4)
                storage_dead(@3)
                return
            },
            _ => {
                storage_live(@11)
                storage_dead(@11)
                storage_dead(@3)
                panic(core::panicking::panic_explicit)
            },
        }
    }
}

// Full name: test_crate::i32_id
pub fn i32_id(@1: i32) -> i32
{
    let @0: i32; // return
    let i@1: i32; // arg #1
    let @2: bool; // anonymous local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local
    let @7: i32; // anonymous local
    let @8: i32; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@2)
    storage_live(@3)
    @3 := copy (i@1)
    @2 := move (@3) == const (0 : i32)
    if move (@2) {
        storage_dead(@3)
        @0 := const (0 : i32)
    }
    else {
        storage_dead(@3)
        storage_live(@4)
        storage_live(@5)
        storage_live(@6)
        @6 := copy (i@1)
        @7 := copy (@6) panic.- const (1 : i32)
        @5 := move (@7)
        storage_dead(@6)
        @4 := i32_id(move (@5))
        storage_dead(@5)
        @8 := copy (@4) panic.+ const (1 : i32)
        @0 := move (@8)
        storage_dead(@4)
    }
    storage_dead(@2)
    return
}

// Full name: test_crate::list_tail
pub fn list_tail<'a, T>(@1: &'a mut (CList<T>[@TraitClause0])) -> &'a mut (CList<T>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,
{
    let @0: &'_ mut (CList<T>[@TraitClause0]); // return
    let l@1: &'_ mut (CList<T>[@TraitClause0]); // arg #1
    let @2: &'_ mut (CList<T>[@TraitClause0]); // anonymous local
    let @3: &'_ mut (CList<T>[@TraitClause0]); // anonymous local
    let tl@4: &'_ mut (alloc::boxed::Box<CList<T>[@TraitClause0]>[MetaSized<CList<T>[@TraitClause0]>, Sized<Global>]); // local
    let @5: &'_ mut (CList<T>[@TraitClause0]); // anonymous local
    let @6: &'_ mut (CList<T>[@TraitClause0]); // anonymous local

    storage_live(tl@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@2)
    storage_live(@3)
    match *(l@1) {
        CList::CCons => {
            storage_live(tl@4)
            tl@4 := &mut (*(l@1) as variant CList::CCons).1
            storage_live(@5)
            storage_live(@6)
            @6 := &two-phase-mut *(*(tl@4))
            @5 := list_tail<'_, T>[@TraitClause0](move (@6))
            @3 := &mut *(@5)
            storage_dead(@6)
            storage_dead(@5)
            storage_dead(tl@4)
        },
        CList::CNil => {
            @3 := move (l@1)
        },
    }
    @2 := &mut *(@3)
    @0 := &mut *(@2)
    storage_dead(@3)
    storage_dead(@2)
    return
}

// Full name: test_crate::Counter
pub trait Counter<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn incr<'_0> = test_crate::Counter::incr<'_0_0, Self>[Self]
    vtable: test_crate::Counter::{vtable}
}

pub fn test_crate::Counter::incr<'_0, Self>(@1: &'_0 mut (Self)) -> usize
where
    [@TraitClause0]: Counter<Self>,

// Full name: test_crate::{impl Counter for usize}::incr
pub fn {impl Counter for usize}::incr<'_0>(@1: &'_0 mut (usize)) -> usize
{
    let @0: usize; // return
    let self@1: &'_ mut (usize); // arg #1
    let x@2: usize; // local
    let @3: usize; // anonymous local

    storage_live(@3)
    storage_live(x@2)
    x@2 := copy (*(self@1))
    @3 := copy (*(self@1)) panic.+ const (1 : usize)
    *(self@1) := move (@3)
    @0 := copy (x@2)
    storage_dead(x@2)
    return
}

// Full name: test_crate::{impl Counter for usize}
impl Counter for usize {
    parent_clause0 = MetaSized<usize>
    fn incr<'_0> = {impl Counter for usize}::incr<'_0_0>
    vtable: {impl Counter for usize}::{vtable}
}

// Full name: test_crate::use_counter
pub fn use_counter<'a, T>(@1: &'a mut (T)) -> usize
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Counter<T>,
{
    let @0: usize; // return
    let cnt@1: &'_ mut (T); // arg #1
    let @2: &'_ mut (T); // anonymous local

    storage_live(@2)
    @2 := &two-phase-mut *(cnt@1)
    @0 := @TraitClause1::incr<'_>(move (@2))
    storage_dead(@2)
    return
}



