# Final LLBC before serialization:

fn test_crate::module1::do_translate()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::module2::do_translate()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("IterOnce")]
pub opaque type core::iter::sources::once::Once<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,

pub fn core::iter::sources::once::once<T>(@1: T) -> core::iter::sources::once::Once<T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
    fn clone_from<'_0, '_1> = core::clone::Clone::clone_from<'_0_0, '_0_1, Self>
}

pub fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

#[lang_item("SliceIter")]
pub opaque type core::slice::iter::Iter<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

pub fn core::slice::iter::{core::slice::iter::Iter<'a, T>[@TraitClause0]}#6::as_slice<'a, '_1, T>(@1: &'_1 (core::slice::iter::Iter<'a, T>[@TraitClause0])) -> &'a (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::num::{u32}#8::wrapping_add(@1: u32, @2: u32) -> u32

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



