# Final LLBC before serialization:

fn test_crate::module1::do_translate()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::module2::do_translate()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::iter::sources::once::Once
#[lang_item("IterOnce")]
pub opaque type Once<T>
  where
      [@TraitClause0]: Sized<T>,

// Full name: core::iter::sources::once::once
pub fn once<T>(@1: T) -> Once<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = clone<'_0_0, Self>
    fn clone_from<'_0, '_1> = clone_from<'_0_0, '_0_1, Self>
}

// Full name: core::clone::Clone::clone_from
pub fn clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

// Full name: core::slice::iter::Iter
#[lang_item("SliceIter")]
pub opaque type Iter<'a, T>
  where
      [@TraitClause0]: Sized<T>,
      T : 'a,
      T : 'a,

// Full name: core::slice::iter::{Iter<'a, T>[@TraitClause0]}#6::as_slice
pub fn as_slice<'a, '_1, T>(@1: &'_1 (Iter<'a, T>[@TraitClause0])) -> &'a (Slice<T>)
where
    [@TraitClause0]: Sized<T>,

// Full name: core::num::{u32}#8::wrapping_add
pub fn wrapping_add(@1: u32, @2: u32) -> u32

// Full name: core::clone::Clone::clone
#[lang_item("clone_fn")]
pub fn clone<'_0, Self>(@1: &'_0 (Self)) -> Self



