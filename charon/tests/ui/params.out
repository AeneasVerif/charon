# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::alloc::Global::{impl Drop for Global}
impl Drop for Global {
    parent_clause0 = MetaSized<Global>
    fn drop<'_0> = {impl Drop for Global}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: alloc::alloc::Global::{impl Drop for Global}::drop
fn {impl Drop for Global}::drop<'_0>(@1: &'_0 mut (Global))

// Full name: alloc::boxed::Box::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop
fn {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0, T, A>(@1: &'_0 mut (alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]))
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::boxed::Box::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}
impl<T, A> Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]>
    fn drop<'_0> = {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0_0, T, A>[@TraitClause0, @TraitClause1]
    non-dyn-compatible
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::test_static
fn test_static(@1: &'static (u32)) -> &'static (u32)
{
    let @0: &'_ (u32); // return
    let x@1: &'_ (u32); // arg #1

    @0 := copy (x@1)
    return
}

// Full name: test_crate::SStatic
struct SStatic {
  x: &'static (u32),
}

// Full name: test_crate::SStatic::{impl Drop for SStatic}
impl Drop for SStatic {
    parent_clause0 = MetaSized<SStatic>
    fn drop<'_0> = {impl Drop for SStatic}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::SStatic::{impl Drop for SStatic}::drop
fn {impl Drop for SStatic}::drop<'_0>(@1: &'_0 mut (SStatic))
{
    let @0: (); // return
    let @1: *mut SStatic; // arg #1
    let @2: &'_ mut (SStatic); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::E0
enum E0<'a, 'b, T1, T2>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    T1 : 'a,
    T2 : 'b,
{
  V1(&'a mut (T1), &'b mut (T2)),
}

// Full name: test_crate::E1
enum E1<'a, 'b, T1, T2>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    T1 : 'a,
    T2 : 'b,
    T2 : 'a,
    T1 : 'b,
{
  V1(&'a mut (T1), &'b mut (T2)),
  V2(alloc::boxed::Box<E1<'a, 'b, T2, T1>[@TraitClause1, @TraitClause0]>[MetaSized<E1<'_, '_, T2, T1>[@TraitClause1, @TraitClause0]>, Sized<Global>]),
}

// Full name: test_crate::E2
enum E2<'a, 'b, T1, T2>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    T1 : 'a,
    T2 : 'b,
    T1 : 'b,
    T2 : 'a,
{
  V1(&'a mut (T1), &'b mut (T2)),
  V3(alloc::boxed::Box<E2<'b, 'a, T1, T2>[@TraitClause0, @TraitClause1]>[MetaSized<E2<'_, '_, T1, T2>[@TraitClause0, @TraitClause1]>, Sized<Global>]),
}

// Full name: test_crate::E3
enum E3<'a, 'b, 'c, T1, T2>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    T1 : 'a,
    T2 : 'b,
    T2 : 'a,
    T1 : 'b,
    T2 : 'c,
    T1 : 'c,
    'a : 'c,
    'b : 'c,
{
  V1(&'a mut (T1), &'b mut (T2)),
  V2(alloc::boxed::Box<E3<'a, 'b, 'c, T2, T1>[@TraitClause1, @TraitClause0]>[MetaSized<E3<'_, '_, '_, T2, T1>[@TraitClause1, @TraitClause0]>, Sized<Global>]),
  V3(alloc::boxed::Box<E3<'b, 'a, 'c, T1, T2>[@TraitClause0, @TraitClause1]>[MetaSized<E3<'_, '_, '_, T1, T2>[@TraitClause0, @TraitClause1]>, Sized<Global>]),
  V4(&'c (&'a (T1))),
}

// Full name: test_crate::E4
enum E4<'a, 'b, 'c, T1, T2, T3>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    [@TraitClause2]: Sized<T3>,
    T1 : 'a,
    T2 : 'b,
    T2 : 'a,
    T1 : 'b,
    T3 : 'c,
    T3 : 'a,
    T3 : 'b,
    'a : 'c,
    'b : 'c,
{
  V1(&'a mut (T1), &'b mut (T2)),
  V2(alloc::boxed::Box<E4<'a, 'b, 'c, T2, T1, T3>[@TraitClause1, @TraitClause0, @TraitClause2]>[MetaSized<E4<'_, '_, '_, T2, T1, T3>[@TraitClause1, @TraitClause0, @TraitClause2]>, Sized<Global>]),
  V3(alloc::boxed::Box<E4<'b, 'a, 'c, T1, T2, T3>[@TraitClause0, @TraitClause1, @TraitClause2]>[MetaSized<E4<'_, '_, '_, T1, T2, T3>[@TraitClause0, @TraitClause1, @TraitClause2]>, Sized<Global>]),
  V4(&'c (&'a (T3))),
}

// Full name: test_crate::E5
enum E5<'a, 'b, 'c, T1, T2, T3>
where
    [@TraitClause0]: Sized<T1>,
    [@TraitClause1]: Sized<T2>,
    [@TraitClause2]: Sized<T3>,
    T1 : 'a,
    T2 : 'b,
    T2 : 'a,
    T1 : 'b,
    T3 : 'a,
    T3 : 'c,
    T3 : 'b,
    'c : 'a,
    'c : 'b,
{
  V1(&'a mut (T1), &'b mut (T2)),
  V2(alloc::boxed::Box<E5<'a, 'b, 'c, T2, T1, T3>[@TraitClause1, @TraitClause0, @TraitClause2]>[MetaSized<E5<'_, '_, '_, T2, T1, T3>[@TraitClause1, @TraitClause0, @TraitClause2]>, Sized<Global>]),
  V3(alloc::boxed::Box<E5<'b, 'a, 'c, T1, T2, T3>[@TraitClause0, @TraitClause1, @TraitClause2]>[MetaSized<E5<'_, '_, '_, T1, T2, T3>[@TraitClause0, @TraitClause1, @TraitClause2]>, Sized<Global>]),
  V4(&'a (&'c (T3))),
}

// Full name: test_crate::S1
struct S1<'a, 'b, 'c, 'd>
where
    'c : 'a,
    'd : 'b,
    'd : 'a,
    'c : 'b,
{
  x: E1<'a, 'b, &'c mut (u32), &'d (u32)>[Sized<&'_ mut (u32)>, Sized<&'_ (u32)>],
}



