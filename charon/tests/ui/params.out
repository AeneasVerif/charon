# Final LLBC before serialization:

fn test_crate::test_static(@1: &'static (u32)) -> &'static (u32)
{
    let @0: &'_ (u32); // return
    let x@1: &'_ (u32); // arg #1

    @0 := copy (x@1)
    return
}

struct test_crate::SStatic =
{
  x: &'static (u32),
}

enum test_crate::E0<'a, 'b, T1, T2>
  where
      T1 : 'a,
      T2 : 'b,
 =
|  V1(&'a mut (T1), &'b mut (T2))


enum test_crate::E1<'a, 'b, T1, T2>
  where
      T1 : 'a,
      T2 : 'b,
      T2 : 'a,
      T1 : 'b,
 =
|  V1(&'a mut (T1), &'b mut (T2))
|  V2(alloc::boxed::Box<test_crate::E1<'a, 'b, T2, T1>>)


enum test_crate::E2<'a, 'b, T1, T2>
  where
      T1 : 'a,
      T2 : 'b,
      T1 : 'b,
      T2 : 'a,
 =
|  V1(&'a mut (T1), &'b mut (T2))
|  V3(alloc::boxed::Box<test_crate::E2<'b, 'a, T1, T2>>)


enum test_crate::E3<'a, 'b, 'c, T1, T2>
  where
      T1 : 'a,
      T2 : 'b,
      T2 : 'a,
      T1 : 'b,
      T2 : 'c,
      T1 : 'c,
      'a : 'c,
      'b : 'c,
 =
|  V1(&'a mut (T1), &'b mut (T2))
|  V2(alloc::boxed::Box<test_crate::E3<'a, 'b, 'c, T2, T1>>)
|  V3(alloc::boxed::Box<test_crate::E3<'b, 'a, 'c, T1, T2>>)
|  V4(&'c (&'a (T1)))


enum test_crate::E4<'a, 'b, 'c, T1, T2, T3>
  where
      T1 : 'a,
      T2 : 'b,
      T2 : 'a,
      T1 : 'b,
      T3 : 'c,
      T3 : 'a,
      T3 : 'b,
      'a : 'c,
      'b : 'c,
 =
|  V1(&'a mut (T1), &'b mut (T2))
|  V2(alloc::boxed::Box<test_crate::E4<'a, 'b, 'c, T2, T1, T3>>)
|  V3(alloc::boxed::Box<test_crate::E4<'b, 'a, 'c, T1, T2, T3>>)
|  V4(&'c (&'a (T3)))


enum test_crate::E5<'a, 'b, 'c, T1, T2, T3>
  where
      T1 : 'a,
      T2 : 'b,
      T2 : 'a,
      T1 : 'b,
      T3 : 'a,
      T3 : 'c,
      T3 : 'b,
      'c : 'a,
      'c : 'b,
 =
|  V1(&'a mut (T1), &'b mut (T2))
|  V2(alloc::boxed::Box<test_crate::E5<'a, 'b, 'c, T2, T1, T3>>)
|  V3(alloc::boxed::Box<test_crate::E5<'b, 'a, 'c, T1, T2, T3>>)
|  V4(&'a (&'c (T3)))


struct test_crate::S1<'a, 'b, 'c, 'd>
  where
      'c : 'a,
      'd : 'b,
      'd : 'a,
      'c : 'b,
 =
{
  x: test_crate::E1<'a, 'b, &'c mut (u32), &'d (u32)>,
}



