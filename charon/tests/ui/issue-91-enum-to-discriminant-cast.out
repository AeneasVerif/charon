# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>[Self]
    non-dyn-compatible
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::marker::Copy
#[lang_item("copy")]
pub trait Copy<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Clone<Self>
    non-dyn-compatible
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: test_crate::Foo
enum Foo {
  A,
  B,
}

// Full name: test_crate::{impl Clone for Foo}::clone
pub fn {impl Clone for Foo}::clone<'_0>(@1: &'_0 (Foo)) -> Foo
{
    let @0: Foo; // return
    let self@1: &'_ (Foo); // arg #1

    @0 := copy (*(self@1))
    return
}

// Full name: test_crate::{impl Clone for Foo}
impl Clone for Foo {
    parent_clause0 = Sized<Foo>
    fn clone<'_0> = {impl Clone for Foo}::clone<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::{impl Copy for Foo}
impl Copy for Foo {
    parent_clause0 = MetaSized<Foo>
    parent_clause1 = {impl Clone for Foo}
    non-dyn-compatible
}

// Full name: test_crate::Ordering
enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let x@1: Foo; // local
    let @2: isize; // anonymous local
    let @3: Foo; // anonymous local
    let @4: isize; // anonymous local
    let @5: u8; // anonymous local
    let @6: bool; // anonymous local
    let @7: u8; // anonymous local
    let @8: Foo; // anonymous local
    let @9: isize; // anonymous local
    let @10: u8; // anonymous local
    let @11: bool; // anonymous local
    let x@12: Ordering; // local
    let @13: isize; // anonymous local
    let @14: Ordering; // anonymous local
    let @15: isize; // anonymous local
    let @16: u8; // anonymous local
    let @17: bool; // anonymous local
    let @18: bool; // anonymous local
    let @19: bool; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(x@1)
    x@1 := Foo::A {  }
    storage_live(@2)
    storage_live(@3)
    @3 := copy (x@1)
    @4 := @discriminant(@3)
    @5 := cast<isize, u8>(copy (@4))
    @6 := copy (@5) <= const (1 : u8)
    assert(move (@6) == true)
    @2 := cast<isize, isize>(move (@4))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@7)
    storage_live(@8)
    @8 := copy (x@1)
    @9 := @discriminant(@8)
    @10 := cast<isize, u8>(copy (@9))
    @11 := copy (@10) <= const (1 : u8)
    assert(move (@11) == true)
    @7 := cast<isize, u8>(move (@9))
    storage_dead(@8)
    storage_dead(@7)
    storage_live(x@12)
    x@12 := Ordering::Greater {  }
    storage_live(@13)
    storage_live(@14)
    @14 := move (x@12)
    @15 := @discriminant(@14)
    @16 := cast<isize, u8>(copy (@15))
    @17 := copy (@16) >= const (255 : u8)
    @18 := copy (@16) <= const (1 : u8)
    @19 := move (@17) | move (@18)
    assert(move (@19) == true)
    @13 := cast<isize, isize>(move (@15))
    storage_dead(@14)
    storage_dead(@13)
    @0 := ()
    storage_dead(x@12)
    storage_dead(x@1)
    @0 := ()
    return
}



