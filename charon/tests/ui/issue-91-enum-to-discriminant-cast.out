# Final LLBC before serialization:

enum test_crate::Foo =
|  A()
|  B()


#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub fn test_crate::{impl core::clone::Clone for test_crate::Foo}#1::clone<'_0>(@1: &'_0 (test_crate::Foo)) -> test_crate::Foo
{
    let @0: test_crate::Foo; // return
    let self@1: &'_ (test_crate::Foo); // arg #1

    @0 := copy (*(self@1))
    return
}

impl test_crate::{impl core::clone::Clone for test_crate::Foo}#1 : core::clone::Clone<test_crate::Foo>
{
    parent_clause0 = core::marker::Sized<test_crate::Foo>
    fn clone<'_0> = test_crate::{impl core::clone::Clone for test_crate::Foo}#1::clone<'_0_0>
}

impl test_crate::{impl core::marker::Copy for test_crate::Foo} : core::marker::Copy<test_crate::Foo>
{
    parent_clause0 = test_crate::{impl core::clone::Clone for test_crate::Foo}#1
}

enum test_crate::Ordering =
|  Less()
|  Equal()
|  Greater()


fn test_crate::main()
{
    let @0: (); // return
    let x@1: test_crate::Foo; // local
    let @2: isize; // anonymous local
    let @3: test_crate::Foo; // anonymous local
    let @4: isize; // anonymous local
    let @5: u8; // anonymous local
    let @6: bool; // anonymous local
    let @7: u8; // anonymous local
    let @8: test_crate::Foo; // anonymous local
    let @9: isize; // anonymous local
    let @10: u8; // anonymous local
    let @11: bool; // anonymous local
    let x@12: test_crate::Ordering; // local
    let @13: isize; // anonymous local
    let @14: test_crate::Ordering; // anonymous local
    let @15: isize; // anonymous local
    let @16: u8; // anonymous local
    let @17: bool; // anonymous local
    let @18: bool; // anonymous local
    let @19: bool; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(x@1)
    x@1 := test_crate::Foo::A {  }
    storage_live(@2)
    storage_live(@3)
    @3 := copy (x@1)
    match @3 {
        test_crate::Foo::A => {
            @4 := const (0 : isize)
        },
        test_crate::Foo::B => {
            @4 := const (1 : isize)
        },
    }
    @5 := cast<isize, u8>(copy (@4))
    @6 := copy (@5) <= const (1 : u8)
    assert(move (@6) == true)
    @2 := cast<isize, isize>(move (@4))
    storage_dead(@3)
    storage_dead(@2)
    storage_live(@7)
    storage_live(@8)
    @8 := copy (x@1)
    match @8 {
        test_crate::Foo::A => {
            @9 := const (0 : isize)
        },
        test_crate::Foo::B => {
            @9 := const (1 : isize)
        },
    }
    @10 := cast<isize, u8>(copy (@9))
    @11 := copy (@10) <= const (1 : u8)
    assert(move (@11) == true)
    @7 := cast<isize, u8>(move (@9))
    storage_dead(@8)
    storage_dead(@7)
    storage_live(x@12)
    x@12 := test_crate::Ordering::Greater {  }
    storage_live(@13)
    storage_live(@14)
    @14 := move (x@12)
    match @14 {
        test_crate::Ordering::Less => {
            @15 := const (-1 : isize)
        },
        test_crate::Ordering::Equal => {
            @15 := const (0 : isize)
        },
        test_crate::Ordering::Greater => {
            @15 := const (1 : isize)
        },
    }
    @16 := cast<isize, u8>(copy (@15))
    @17 := copy (@16) >= const (255 : u8)
    @18 := copy (@16) <= const (1 : u8)
    @19 := move (@17) | move (@18)
    assert(move (@19) == true)
    @13 := cast<isize, isize>(move (@15))
    storage_dead(@14)
    storage_dead(@13)
    @0 := ()
    storage_dead(x@12)
    storage_dead(x@1)
    @0 := ()
    return
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



