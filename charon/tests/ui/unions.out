# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Foo
union Foo {
  one: u64,
  two: Array<u32, 2 : usize>,
}

// Full name: test_crate::Foo::{impl Drop for Foo}
impl Drop for Foo {
    parent_clause0 = MetaSized<Foo>
    fn drop<'_0> = {impl Drop for Foo}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Foo::{impl Drop for Foo}::drop
fn {impl Drop for Foo}::drop<'_0>(@1: &'_0 mut (Foo))
{
    let @0: (); // return
    let @1: *mut Foo; // arg #1
    let @2: &'_ mut (Foo); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::use_union
fn use_union()
{
    let @0: (); // return
    let one@1: Foo; // local
    let _two@2: Array<u32, 2 : usize>; // local

    @0 := ()
    storage_live(one@1)
    one@1 := Foo { one: const (42 : u64) }
    (one@1).one := const (43 : u64)
    storage_live(_two@2)
    _two@2 := copy ((one@1).two)
    @0 := ()
    storage_dead(_two@2)
    storage_dead(one@1)
    return
}



