# Final LLBC before serialization:

trait core::marker::Sized<Self>

struct test_crate::Struct<A>
  where
      [@TraitClause0]: core::marker::Sized<A>,
 =
{
  A,
}

trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

fn core::default::Default::default<Self>() -> Self

fn test_crate::{impl core::default::Default for test_crate::Struct<A>[@TraitClause0]}#1::default<A>() -> test_crate::Struct<A>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::default::Default<A>,
{
    let @0: test_crate::Struct<A>[@TraitClause0]; // return
    let @1: A; // anonymous local

    @1 := @TraitClause1::default()
    @0 := test_crate::Struct { 0: move (@1) }
    drop @1
    drop @1
    return
}

impl test_crate::{impl core::default::Default for test_crate::Struct<A>[@TraitClause0]}#1<A> : core::default::Default<test_crate::Struct<A>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::default::Default<A>,
{
    parent_clause0 = core::marker::Sized<test_crate::Struct<A>[@TraitClause0]>
    fn default = test_crate::{impl core::default::Default for test_crate::Struct<A>[@TraitClause0]}#1::default<A>[@TraitClause0, @TraitClause1]
}

trait test_crate::Trait<Self, B, Self_Item>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<B>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self_Item>
    fn method<C, [@TraitClause0]: core::marker::Sized<C>> = test_crate::Trait::method<Self, B, C, Self_Item>[@TraitClause0_0]
}

trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

fn test_crate::{impl test_crate::Trait<B, (A, B)> for test_crate::Struct<A>[@TraitClause0]}::method<A, B, C>()
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::clone::Clone<A>,
    [@TraitClause3]: core::cmp::PartialEq<B, bool>,
    [@TraitClause4]: core::marker::Sized<C>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

impl test_crate::{impl test_crate::Trait<B, (A, B)> for test_crate::Struct<A>[@TraitClause0]}<A, B> : test_crate::Trait<test_crate::Struct<A>[@TraitClause0], B, (A, B)>
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::clone::Clone<A>,
    [@TraitClause3]: core::cmp::PartialEq<B, bool>,
{
    parent_clause0 = @TraitClause1
    parent_clause1 = core::marker::Sized<(A, B)>
    fn method<C, [@TraitClause0]: core::marker::Sized<C>> = test_crate::{impl test_crate::Trait<B, (A, B)> for test_crate::Struct<A>[@TraitClause0]}::method<A, B, C>[@TraitClause0, @TraitClause1, @TraitClause2, @TraitClause3, @TraitClause0_0]
}

fn core::default::{impl core::default::Default for bool}#1::default() -> bool

impl core::default::{impl core::default::Default for bool}#1 : core::default::Default<bool>
{
    parent_clause0 = core::marker::Sized<bool>
    fn default = core::default::{impl core::default::Default for bool}#1::default
}

opaque type alloc::string::String

fn core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0>(@1: &'_0 (u8)) -> u8

impl core::clone::impls::{impl core::clone::Clone for u8}#6 : core::clone::Clone<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0_0>
}

fn core::cmp::impls::{impl core::cmp::PartialEq<bool> for bool}#19::eq<'_0, '_1>(@1: &'_0 (bool), @2: &'_1 (bool)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<bool> for bool}#19 : core::cmp::PartialEq<bool, bool>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<bool> for bool}#19::eq<'_0_0, '_0_1>
}

fn test_crate::main()
{
    let @0: (); // return
    let _x@1: (u8, bool); // local
    let _y@2: test_crate::Struct<bool>[core::marker::Sized<bool>]; // local
    let @3: (); // anonymous local

    _x@1 := (const (0 : u8), const (false))
    @fake_read(_x@1)
    _y@2 := test_crate::{impl core::default::Default for test_crate::Struct<A>[@TraitClause0]}#1::default<bool>[core::marker::Sized<bool>, core::default::{impl core::default::Default for bool}#1]()
    @fake_read(_y@2)
    @3 := test_crate::{impl test_crate::Trait<B, (A, B)> for test_crate::Struct<A>[@TraitClause0]}::method<u8, bool, alloc::string::String>[core::marker::Sized<u8>, core::marker::Sized<bool>, core::clone::impls::{impl core::clone::Clone for u8}#6, core::cmp::impls::{impl core::cmp::PartialEq<bool> for bool}#19, core::marker::Sized<alloc::string::String>]()
    drop @3
    @0 := ()
    drop _y@2
    drop _x@1
    @0 := ()
    return
}

fn test_crate::Trait::method<Self, B, C, Self_Item>()
where
    [@TraitClause0]: core::marker::Sized<C>,

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool



