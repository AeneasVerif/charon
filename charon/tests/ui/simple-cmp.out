# Final LLBC before serialization:

#[lang_item("Ordering")]
pub enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


pub fn core::cmp::impls::{impl core::cmp::Ord for i32}#77::cmp<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> core::cmp::Ordering

fn test_crate::main()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let @3: core::cmp::Ordering; // anonymous local
    let @4: &'_ (i32); // anonymous local
    let @5: &'_ (i32); // anonymous local
    let @6: &'_ (i32); // anonymous local

    storage_live(x@1)
    x@1 := const (11 : i32)
    storage_live(y@2)
    y@2 := const (22 : i32)
    storage_live(@3)
    storage_live(@4)
    @4 := &x@1
    storage_live(@5)
    storage_live(@6)
    @6 := &y@2
    @5 := &*(@6)
    @3 := core::cmp::impls::{impl core::cmp::Ord for i32}#77::cmp<'_, '_>(move (@4), move (@5))
    â†³ unwind {
        unwind
    }
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@6)
    storage_dead(@3)
    @0 := ()
    storage_dead(y@2)
    storage_dead(x@1)
    @0 := ()
    return
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("partial_ord")]
pub trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Ord")]
pub trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

pub fn core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30::eq<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30 : core::cmp::PartialEq<i32, i32>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30::eq<'_0_0, '_0_1>
}

impl core::cmp::impls::{impl core::cmp::Eq for i32}#49 : core::cmp::Eq<i32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30
}

pub fn core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76::partial_cmp<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
{
    let @0: core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]; // return
    let self@1: &'_ (i32); // arg #1
    let other@2: &'_ (i32); // arg #2
    let @3: core::cmp::Ordering; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := copy (*(self@1))
    storage_live(@5)
    @5 := copy (*(other@2))
    @3 := move (@4) cmp move (@5)
    storage_dead(@5)
    storage_dead(@4)
    @0 := core::option::Option::Some { 0: move (@3) }
    storage_dead(@3)
    return
}

impl core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76 : core::cmp::PartialOrd<i32, i32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<i32> for i32}#30
    fn partial_cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76::partial_cmp<'_0_0, '_0_1>
}

impl core::cmp::impls::{impl core::cmp::Ord for i32}#77 : core::cmp::Ord<i32>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::Eq for i32}#49
    parent_clause1 = core::cmp::impls::{impl core::cmp::PartialOrd<i32> for i32}#76
    fn cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::Ord for i32}#77::cmp<'_0_0, '_0_1>
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]



