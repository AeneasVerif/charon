# Final LLBC before serialization:

// Full name: core::cmp::PartialEq
#[lang_item("eq")]
pub trait PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialEq::{vtable}<Rhs>
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

// Full name: core::cmp::Eq
#[lang_item("Eq")]
pub trait Eq<Self>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Self>
    non-dyn-compatible
}

// Full name: core::cmp::Ordering
#[lang_item("Ordering")]
pub enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::cmp::PartialOrd
#[lang_item("partial_ord")]
pub trait PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialOrd::{vtable}<Rhs>
}

// Full name: core::cmp::Ord
#[lang_item("Ord")]
pub trait Ord<Self>
{
    parent_clause0 : [@TraitClause0]: Eq<Self>
    parent_clause1 : [@TraitClause1]: PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>[Self]
    non-dyn-compatible
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> Ordering
where
    [@TraitClause0]: Ord<Self>,

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::cmp::impls::{impl PartialEq<i32> for i32}::eq
pub fn {impl PartialEq<i32> for i32}::eq<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> bool

// Full name: core::cmp::impls::{impl PartialEq<i32> for i32}
impl PartialEq<i32> for i32 {
    fn eq<'_0, '_1> = {impl PartialEq<i32> for i32}::eq<'_0_0, '_0_1>
    vtable: {impl PartialEq<i32> for i32}::{vtable}
}

// Full name: core::cmp::impls::{impl Eq for i32}
impl Eq for i32 {
    parent_clause0 = {impl PartialEq<i32> for i32}
    non-dyn-compatible
}

// Full name: core::cmp::impls::{impl PartialOrd<i32> for i32}::partial_cmp
pub fn {impl PartialOrd<i32> for i32}::partial_cmp<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> Option<Ordering>[Sized<Ordering>]
{
    let @0: Option<Ordering>[Sized<Ordering>]; // return
    let self@1: &'_ (i32); // arg #1
    let other@2: &'_ (i32); // arg #2
    let @3: Ordering; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := copy (*(self@1))
    storage_live(@5)
    @5 := copy (*(other@2))
    @3 := move (@4) cmp move (@5)
    storage_dead(@5)
    storage_dead(@4)
    @0 := Option::Some { 0: move (@3) }
    storage_dead(@3)
    return
}

// Full name: core::cmp::impls::{impl PartialOrd<i32> for i32}
impl PartialOrd<i32> for i32 {
    parent_clause0 = {impl PartialEq<i32> for i32}
    fn partial_cmp<'_0, '_1> = {impl PartialOrd<i32> for i32}::partial_cmp<'_0_0, '_0_1>
    vtable: {impl PartialOrd<i32> for i32}::{vtable}
}

// Full name: core::cmp::impls::{impl Ord for i32}::cmp
pub fn {impl Ord for i32}::cmp<'_0, '_1>(@1: &'_0 (i32), @2: &'_1 (i32)) -> Ordering

// Full name: core::cmp::impls::{impl Ord for i32}
impl Ord for i32 {
    parent_clause0 = {impl Eq for i32}
    parent_clause1 = {impl PartialOrd<i32> for i32}
    fn cmp<'_0, '_1> = {impl Ord for i32}::cmp<'_0_0, '_0_1>
    non-dyn-compatible
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let @3: Ordering; // anonymous local
    let @4: &'_ (i32); // anonymous local
    let @5: &'_ (i32); // anonymous local
    let @6: &'_ (i32); // anonymous local

    storage_live(x@1)
    x@1 := const (11 : i32)
    storage_live(y@2)
    y@2 := const (22 : i32)
    storage_live(@3)
    storage_live(@4)
    @4 := &x@1
    storage_live(@5)
    storage_live(@6)
    @6 := &y@2
    @5 := &*(@6)
    @3 := {impl Ord for i32}::cmp<'_, '_>(move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@6)
    storage_dead(@3)
    @0 := ()
    storage_dead(y@2)
    storage_dead(x@1)
    @0 := ()
    return
}



