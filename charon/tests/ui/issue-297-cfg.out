# Final LLBC before serialization:

fn test_crate::f1<'_0>(@1: &'_0 (Slice<u8>)) -> usize
{
    let @0: usize; // return
    let a@1: &'_ (Slice<u8>); // arg #1
    let sampled@2: usize; // local
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: u8; // anonymous local
    let @6: usize; // anonymous local
    let @7: bool; // anonymous local
    let @8: u8; // anonymous local
    let @9: usize; // anonymous local
    let @10: (); // anonymous local
    let @11: (); // anonymous local
    let @12: &'_ (Slice<u8>); // anonymous local
    let @13: &'_ (u8); // anonymous local
    let @14: &'_ (Slice<u8>); // anonymous local
    let @15: &'_ (u8); // anonymous local

    sampled@2 := const (0 : usize)
    @fake_read(sampled@2)
    @6 := const (0 : usize)
    @12 := &*(a@1)
    @13 := @SliceIndexShared<'_, u8>(move (@12), copy (@6))
    @5 := copy (*(@13))
    @4 := move (@5) < const (42 : u8)
    if move (@4) {
        drop @6
        drop @5
        @9 := const (1 : usize)
        @14 := &*(a@1)
        @15 := @SliceIndexShared<'_, u8>(move (@14), copy (@9))
        @8 := copy (*(@15))
        @7 := move (@8) < const (16 : u8)
        if move (@7) {
            drop @9
            drop @8
            sampled@2 := copy (sampled@2) + const (100 : usize)
            @11 := ()
            @3 := move (@11)
        }
        else {
            drop @9
            drop @8
            @10 := ()
            @3 := move (@10)
        }
    }
    else {
        drop @6
        drop @5
        @10 := ()
        @3 := move (@10)
    }
    drop @7
    drop @4
    drop @3
    sampled@2 := copy (sampled@2) + const (101 : usize)
    @0 := copy (sampled@2)
    drop sampled@2
    return
}

fn test_crate::FIELD_MODULUS() -> i16
{
    let @0: i16; // return

    @0 := const (8 : i16)
    return
}

global test_crate::FIELD_MODULUS: i16 = test_crate::FIELD_MODULUS()

trait core::marker::Sized<Self>

opaque type core::slice::iter::Chunks<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
      T : 'a,

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn core::slice::{Slice<T>}::chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> core::slice::iter::Chunks<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<T>,

trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
}

trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>
    fn size_hint<'_0> = core::iter::traits::iterator::Iterator::size_hint<'_0_0, Self>
    fn count<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::count<Self>[@TraitClause0_0]
    fn last<[@TraitClause0]: core::marker::Sized<Self>> = core::iter::traits::iterator::Iterator::last<Self>[@TraitClause0_0]
    fn nth<'_0> = core::iter::traits::iterator::Iterator::nth<'_0_0, Self>
    fn __iterator_get_unchecked<'_0, [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>> = core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0_0, Self>[@TraitClause0_0]
}

fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> core::option::Option<&'a (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::size_hint<'a, '_1, T>(@1: &'_1 (core::slice::iter::Chunks<'a, T>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::count<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::last<'a, T>(@1: core::slice::iter::Chunks<'a, T>[@TraitClause0]) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::nth<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: usize) -> core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,

unsafe fn core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::__iterator_get_unchecked<'a, '_1, T>(@1: &'_1 mut (core::slice::iter::Chunks<'a, T>[@TraitClause0]), @2: usize) -> &'_ (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,

impl<'a, T> core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'a, T> : core::iter::traits::iterator::Iterator<core::slice::iter::Chunks<'a, T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::marker::Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'a, '_0_0, T>[@TraitClause0]
    fn size_hint<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::size_hint<'a, '_0_0, T>[@TraitClause0]
    fn count = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::count<'a, T>[@TraitClause0]
    fn last = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::last<'a, T>[@TraitClause0]
    fn nth<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::nth<'a, '_0_0, T>[@TraitClause0]
    fn __iterator_get_unchecked<'_0> = core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::__iterator_get_unchecked<'a, '_0_0, T>[@TraitClause0]
}

fn test_crate::f2<'_0, '_1>(@1: &'_0 (Slice<u8>), @2: &'_1 mut (Slice<i16>)) -> usize
{
    let @0: usize; // return
    let a@1: &'_ (Slice<u8>); // arg #1
    let result@2: &'_ mut (Slice<i16>); // arg #2
    let sampled@3: usize; // local
    let @4: (); // anonymous local
    let @5: core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]; // anonymous local
    let @6: core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]; // anonymous local
    let @7: &'_ (Slice<u8>); // anonymous local
    let iter@8: core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]; // local
    let @9: (); // anonymous local
    let @10: (); // anonymous local
    let @11: core::option::Option<&'_ (Slice<u8>)>[core::marker::Sized<&'_ (Slice<u8>)>]; // anonymous local
    let @12: &'_ mut (core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]); // anonymous local
    let @13: &'_ mut (core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]); // anonymous local
    let bytes@14: &'_ (Slice<u8>); // local
    let b1@15: i16; // local
    let @16: u8; // anonymous local
    let @17: usize; // anonymous local
    let b2@18: i16; // local
    let @19: u8; // anonymous local
    let @20: usize; // anonymous local
    let b3@21: i16; // local
    let @22: u8; // anonymous local
    let @23: usize; // anonymous local
    let d1@24: i16; // local
    let @25: i16; // anonymous local
    let @26: i16; // anonymous local
    let @27: i16; // anonymous local
    let @28: i16; // anonymous local
    let d2@29: i16; // local
    let @30: i16; // anonymous local
    let @31: i16; // anonymous local
    let @32: i16; // anonymous local
    let @33: i16; // anonymous local
    let @34: (); // anonymous local
    let @35: bool; // anonymous local
    let @36: i16; // anonymous local
    let @37: bool; // anonymous local
    let @38: usize; // anonymous local
    let @39: i16; // anonymous local
    let @40: usize; // anonymous local
    let @41: bool; // anonymous local
    let @42: i16; // anonymous local
    let @43: bool; // anonymous local
    let @44: usize; // anonymous local
    let @45: i16; // anonymous local
    let @46: usize; // anonymous local
    let @47: (); // anonymous local
    let @48: i16; // anonymous local
    let @49: (); // anonymous local
    let @50: (); // anonymous local
    let @51: i16; // anonymous local
    let @52: (); // anonymous local
    let @53: (); // anonymous local
    let @54: (); // anonymous local
    let @55: &'_ (Slice<u8>); // anonymous local
    let @56: &'_ (u8); // anonymous local
    let @57: &'_ (Slice<u8>); // anonymous local
    let @58: &'_ (u8); // anonymous local
    let @59: &'_ (Slice<u8>); // anonymous local
    let @60: &'_ (u8); // anonymous local
    let @61: &'_ mut (Slice<i16>); // anonymous local
    let @62: &'_ mut (i16); // anonymous local
    let @63: &'_ mut (Slice<i16>); // anonymous local
    let @64: &'_ mut (i16); // anonymous local

    sampled@3 := const (0 : usize)
    @fake_read(sampled@3)
    @7 := &*(a@1)
    @6 := core::slice::{Slice<T>}::chunks<'_, u8>[core::marker::Sized<u8>](move (@7), const (3 : usize))
    drop @7
    @5 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]>[core::marker::Sized<core::slice::iter::Chunks<'_, u8>[core::marker::Sized<u8>]>, core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71<'_, u8>[core::marker::Sized<u8>]](move (@6))
    drop @6
    @fake_read(@5)
    iter@8 := move (@5)
    loop {
        @13 := &mut iter@8
        @12 := &two-phase-mut *(@13)
        @11 := core::slice::iter::{impl core::iter::traits::iterator::Iterator for core::slice::iter::Chunks<'a, T>[@TraitClause0]}#71::next<'_, '_, u8>[core::marker::Sized<u8>](move (@12))
        drop @12
        @fake_read(@11)
        match @11 {
            0 => {
                break 0
            },
            1 => {
                bytes@14 := copy ((@11 as variant @1).0)
                @17 := const (0 : usize)
                @59 := &*(bytes@14)
                @60 := @SliceIndexShared<'_, u8>(move (@59), copy (@17))
                @16 := copy (*(@60))
                b1@15 := cast<u8, i16>(move (@16))
                drop @16
                @fake_read(b1@15)
                drop @17
                @20 := const (1 : usize)
                @57 := &*(bytes@14)
                @58 := @SliceIndexShared<'_, u8>(move (@57), copy (@20))
                @19 := copy (*(@58))
                b2@18 := cast<u8, i16>(move (@19))
                drop @19
                @fake_read(b2@18)
                drop @20
                @23 := const (2 : usize)
                @55 := &*(bytes@14)
                @56 := @SliceIndexShared<'_, u8>(move (@55), copy (@23))
                @22 := copy (*(@56))
                b3@21 := cast<u8, i16>(move (@22))
                drop @22
                @fake_read(b3@21)
                drop @23
                @27 := copy (b2@18)
                @26 := move (@27) & const (15 : i16)
                drop @27
                @25 := move (@26) << const (8 : i32)
                drop @26
                @28 := copy (b1@15)
                d1@24 := move (@25) | move (@28)
                drop @28
                drop @25
                @fake_read(d1@24)
                @31 := copy (b3@21)
                @30 := move (@31) << const (4 : i32)
                drop @31
                @33 := copy (b2@18)
                @32 := move (@33) >> const (4 : i32)
                drop @33
                d2@29 := move (@30) | move (@32)
                drop @32
                drop @30
                @fake_read(d2@29)
                @36 := copy (d1@24)
                @48 := test_crate::FIELD_MODULUS
                @35 := move (@36) < move (@48)
                if move (@35) {
                    drop @36
                    @38 := copy (sampled@3)
                    @37 := move (@38) < const (16 : usize)
                    if move (@37) {
                        drop @38
                        @39 := copy (d1@24)
                        @40 := copy (sampled@3)
                        @61 := &mut *(result@2)
                        @62 := @SliceIndexMut<'_, i16>(move (@61), copy (@40))
                        *(@62) := move (@39)
                        drop @39
                        drop @40
                        sampled@3 := copy (sampled@3) + const (1 : usize)
                        @49 := ()
                        @34 := move (@49)
                    }
                    else {
                        drop @38
                        @50 := ()
                        @34 := move (@50)
                    }
                }
                else {
                    drop @36
                    @50 := ()
                    @34 := move (@50)
                }
                drop @37
                drop @35
                drop @34
                @42 := copy (d2@29)
                @51 := test_crate::FIELD_MODULUS
                @41 := move (@42) < move (@51)
                if move (@41) {
                    drop @42
                    @44 := copy (sampled@3)
                    @43 := move (@44) < const (16 : usize)
                    if move (@43) {
                        drop @44
                        @45 := copy (d2@29)
                        @46 := copy (sampled@3)
                        @63 := &mut *(result@2)
                        @64 := @SliceIndexMut<'_, i16>(move (@63), copy (@46))
                        *(@64) := move (@45)
                        drop @45
                        drop @46
                        sampled@3 := copy (sampled@3) + const (1 : usize)
                        @52 := ()
                        @10 := move (@52)
                    }
                    else {
                        drop @44
                        @53 := ()
                        @10 := move (@53)
                    }
                }
                else {
                    drop @42
                    @53 := ()
                    @10 := move (@53)
                }
                drop @43
                drop @41
                drop d2@29
                drop d1@24
                drop b3@21
                drop b2@18
                drop b1@15
                drop bytes@14
                drop @13
                drop @11
                drop @10
                @54 := ()
                @9 := move (@54)
                continue 0
            },
        }
    }
    @47 := ()
    @4 := move (@47)
    drop @13
    drop @11
    drop @10
    drop iter@8
    drop @5
    drop @4
    @0 := copy (sampled@3)
    drop sampled@3
    return
}

fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause2::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>
}

impl<I> core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    parent_clause2 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>[@TraitClause0, @TraitClause1]
}

fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

fn core::iter::traits::iterator::Iterator::size_hint<'_0, Self>(@1: &'_0 (Self)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

fn core::iter::traits::iterator::Iterator::count<Self>(@1: Self) -> usize
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::last<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::nth<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::Item>[Self::parent_clause0]

trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

trait core::marker::Tuple<Self>

trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::FromIterator::from_iter<Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual = core::ops::try_trait::FromResidual::from_residual<Self, R>
}

enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = core::ops::try_trait::Try::from_output<Self>
    fn branch = core::ops::try_trait::Try::branch<Self>
}

trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause2::Output = O,
    Self::parent_clause2::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::Try<Self::TryType>
    type TryType
}

trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend<'_0, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::Extend::extend<'_0_0, Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0_0, Self>
}

trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

unsafe fn core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Self::Item
where
    [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>,

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

fn core::default::Default::default<Self>() -> Self

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]



