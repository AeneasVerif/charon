# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0_1> = clone<'_0_1, Self>[Self]
    non-dyn-compatible
}

// Full name: core::clone::Clone::clone
#[lang_item("clone_fn")]
pub fn clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::cmp::PartialEq
#[lang_item("eq")]
pub trait PartialEq<Self, Rhs>
{
    fn eq<'_0_1, '_1_1> = core::cmp::PartialEq::eq<'_0_1, '_1_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialEq::{vtable}<Rhs>
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool
where
    [@TraitClause0]: PartialEq<Self, Rhs>,

// Full name: core::cmp::Eq
#[lang_item("Eq")]
pub trait Eq<Self>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Self>
    non-dyn-compatible
}

// Full name: core::cmp::Ordering
#[lang_item("Ordering")]
pub enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::cmp::PartialOrd
#[lang_item("partial_ord")]
pub trait PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: PartialEq<Self, Rhs>
    fn partial_cmp<'_0_1, '_1_1> = core::cmp::PartialOrd::partial_cmp<'_0_1, '_1_1, Self, Rhs>[Self]
    vtable: core::cmp::PartialOrd::{vtable}<Rhs>
}

// Full name: core::cmp::Ord
#[lang_item("Ord")]
pub trait Ord<Self>
{
    parent_clause0 : [@TraitClause0]: Eq<Self>
    parent_clause1 : [@TraitClause1]: PartialOrd<Self, Self>
    fn cmp<'_0_1, '_1_1> = core::cmp::Ord::cmp<'_0_1, '_1_1, Self>[Self]
    non-dyn-compatible
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> Ordering
where
    [@TraitClause0]: Ord<Self>,

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> Option<Ordering>[Sized<Ordering>]
where
    [@TraitClause0]: PartialOrd<Self, Rhs>,

// Full name: core::default::Default
#[lang_item("Default")]
pub trait Default<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn default = default<Self>[Self]
    non-dyn-compatible
}

// Full name: core::default::Default::default
#[lang_item("default_fn")]
pub fn default<Self>() -> Self
where
    [@TraitClause0]: Default<Self>,

// Full name: core::iter::adapters::zip::TrustedRandomAccessNoCoerce
pub trait TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
    non-dyn-compatible
}

// Full name: core::iter::traits::iterator::Iterator
#[lang_item("iterator")]
pub trait Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Item>
    type Item
    fn next<'_0_1> = core::iter::traits::iterator::Iterator::next<'_0_1, Self>[Self]
    vtable: core::iter::traits::iterator::Iterator::{vtable}<Self::Item>
}

// Full name: core::iter::traits::accum::Sum
pub trait Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn sum<I, [@TraitClause0_1]: Sized<I>, [@TraitClause1_1]: Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[Self, @TraitClause0_1, @TraitClause1_1]
    non-dyn-compatible
}

pub fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: Sum<Self, A>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Iterator<I>,
    @TraitClause2::Item = A,

// Full name: core::iter::traits::accum::Product
pub trait Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn product<I, [@TraitClause0_1]: Sized<I>, [@TraitClause1_1]: Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[Self, @TraitClause0_1, @TraitClause1_1]
    non-dyn-compatible
}

pub fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: Product<Self, A>,
    [@TraitClause1]: Sized<I>,
    [@TraitClause2]: Iterator<I>,
    @TraitClause2::Item = A,

// Full name: core::iter::traits::collect::IntoIterator
#[lang_item("IntoIterator")]
pub trait IntoIterator<Self>
where
    Self::parent_clause3::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self::Item>
    parent_clause2 : [@TraitClause2]: Sized<Self::IntoIter>
    parent_clause3 : [@TraitClause3]: Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>[Self]
    vtable: core::iter::traits::collect::IntoIterator::{vtable}<Self::Item, Self::IntoIter>
}

// Full name: core::iter::traits::collect::FromIterator
#[lang_item("FromIterator")]
pub trait FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn from_iter<T, [@TraitClause0_1]: Sized<T>, [@TraitClause1_1]: IntoIterator<T>, @TraitClause1_1::Item = A> = from_iter<Self, A, T>[Self, @TraitClause0_1, @TraitClause1_1]
    non-dyn-compatible
}

// Full name: core::iter::traits::collect::FromIterator::from_iter
#[lang_item("from_iter_fn")]
pub fn from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: FromIterator<Self, A>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: IntoIterator<T>,
    @TraitClause2::Item = A,

#[lang_item("into_iter")]
pub fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> @TraitClause0::IntoIter
where
    [@TraitClause0]: IntoIterator<Self>,

// Full name: core::iter::traits::collect::{impl IntoIterator for I}::into_iter
pub fn {impl IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,

// Full name: core::iter::traits::collect::{impl IntoIterator for I}
impl<I> IntoIterator for I
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Iterator<I>,
{
    parent_clause0 = @TraitClause0::parent_clause0
    parent_clause1 = @TraitClause1::parent_clause1
    parent_clause2 = @TraitClause0
    parent_clause3 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = {impl IntoIterator for I}::into_iter<I>[@TraitClause0, @TraitClause1]
    vtable: {impl IntoIterator for I}::{vtable}<I>[@TraitClause0, @TraitClause1]
}

// Full name: core::iter::traits::collect::Extend
pub trait Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn extend<'_0_1, T, [@TraitClause0_1]: Sized<T>, [@TraitClause1_1]: IntoIterator<T>, @TraitClause1_1::Item = A> = extend<'_0_1, Self, A, T>[Self, @TraitClause0_1, @TraitClause1_1]
    non-dyn-compatible
}

// Full name: core::iter::traits::collect::Extend::extend
pub fn extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: Extend<Self, A>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: IntoIterator<T>,
    @TraitClause2::Item = A,

// Full name: core::iter::traits::double_ended::DoubleEndedIterator
#[lang_item("DoubleEndedIterator")]
pub trait DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Iterator<Self>
    fn next_back<'_0_1> = next_back<'_0_1, Self>[Self]
    vtable: core::iter::traits::double_ended::DoubleEndedIterator::{vtable}<Self::parent_clause1::Item>
}

// Full name: core::iter::traits::double_ended::DoubleEndedIterator::next_back
pub fn next_back<'_0, Self>(@1: &'_0 mut (Self)) -> Option<@TraitClause0::parent_clause1::Item>[@TraitClause0::parent_clause1::parent_clause1]
where
    [@TraitClause0]: DoubleEndedIterator<Self>,

// Full name: core::iter::traits::exact_size::ExactSizeIterator
pub trait ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Iterator<Self>
    vtable: core::iter::traits::exact_size::ExactSizeIterator::{vtable}<Self::parent_clause1::Item>
}

#[lang_item("next")]
pub fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> Option<@TraitClause0::Item>[@TraitClause0::parent_clause1]
where
    [@TraitClause0]: Iterator<Self>,

// Full name: core::marker::Copy
#[lang_item("copy")]
pub trait Copy<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Clone<Self>
    non-dyn-compatible
}

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::control_flow::ControlFlow
#[lang_item("ControlFlow")]
pub enum ControlFlow<B, C>
where
    [@TraitClause0]: Sized<B>,
    [@TraitClause1]: Sized<C>,
{
  Continue(C),
  Break(B),
}

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = call_once<Self, Args>[Self]
    vtable: core::ops::function::FnOnce::{vtable}<Args, Self::Output>
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0_1> = call_mut<'_0_1, Self, Args>[Self]
    vtable: core::ops::function::FnMut::{vtable}<Args, Self::parent_clause1::Output>
}

// Full name: core::ops::function::FnMut::call_mut
pub fn call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

// Full name: core::ops::function::FnOnce::call_once
pub fn call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: core::ops::try_trait::FromResidual
#[lang_item("FromResidual")]
pub trait FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<R>
    fn from_residual = from_residual<Self, R>[Self]
    non-dyn-compatible
}

// Full name: core::ops::try_trait::Try
#[lang_item("Try")]
pub trait Try<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FromResidual<Self, Self::Residual>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    parent_clause3 : [@TraitClause3]: Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = from_output<Self>[Self]
    fn branch = branch<Self>[Self]
    non-dyn-compatible
}

// Full name: core::ops::try_trait::Try::from_output
#[lang_item("from_output")]
pub fn from_output<Self>(@1: @TraitClause0::Output) -> Self
where
    [@TraitClause0]: Try<Self>,

// Full name: core::ops::try_trait::Try::branch
#[lang_item("branch")]
pub fn branch<Self>(@1: Self) -> ControlFlow<@TraitClause0::Residual, @TraitClause0::Output>[@TraitClause0::parent_clause1::parent_clause1, @TraitClause0::parent_clause2]
where
    [@TraitClause0]: Try<Self>,

// Full name: core::ops::try_trait::FromResidual::from_residual
#[lang_item("from_residual")]
pub fn from_residual<Self, R>(@1: R) -> Self
where
    [@TraitClause0]: FromResidual<Self, R>,

// Full name: core::ops::try_trait::Residual
pub trait Residual<Self, O>
where
    Self::parent_clause3::Output = O,
    Self::parent_clause3::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<O>
    parent_clause2 : [@TraitClause2]: Sized<Self::TryType>
    parent_clause3 : [@TraitClause3]: Try<Self::TryType>
    type TryType
    vtable: core::ops::try_trait::Residual::{vtable}<O, Self::TryType>
}

// Full name: core::slice::iter::Chunks
pub opaque type Chunks<'a, T>
where
    [@TraitClause0]: Sized<T>,
    T : 'a,
    T : 'a,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}::next
pub fn {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'a, '_1, T>(@1: &'_1 mut (Chunks<'a, T>[@TraitClause0])) -> Option<&'a (Slice<T>)>[Sized<&'_ (Slice<T>)>]
where
    [@TraitClause0]: Sized<T>,

// Full name: core::slice::iter::{impl Iterator for Chunks<'a, T>[@TraitClause0]}
impl<'a, T> Iterator for Chunks<'a, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Chunks<'_, T>[@TraitClause0]>
    parent_clause1 = Sized<&'_ (Slice<T>)>
    type Item = &'a (Slice<T>)
    fn next<'_0_1> = {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'a, '_0_1, T>[@TraitClause0]
    vtable: {impl Iterator for Chunks<'a, T>[@TraitClause0]}::{vtable}<'a, T>[@TraitClause0]
}

// Full name: core::slice::{Slice<T>}::chunks
pub fn chunks<'_0, T>(@1: &'_0 (Slice<T>), @2: usize) -> Chunks<'_0, T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::f1
fn f1<'_0>(@1: &'_0 (Slice<u8>)) -> usize
{
    let @0: usize; // return
    let a@1: &'_ (Slice<u8>); // arg #1
    let sampled@2: usize; // local
    let @3: bool; // anonymous local
    let @4: u8; // anonymous local
    let @5: usize; // anonymous local
    let @6: bool; // anonymous local
    let @7: u8; // anonymous local
    let @8: usize; // anonymous local
    let @9: usize; // anonymous local
    let @10: usize; // anonymous local
    let @11: &'_ (Slice<u8>); // anonymous local
    let @12: &'_ (u8); // anonymous local
    let @13: &'_ (Slice<u8>); // anonymous local
    let @14: &'_ (u8); // anonymous local

    storage_live(@9)
    storage_live(@10)
    storage_live(sampled@2)
    sampled@2 := const (0 : usize)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := const (0 : usize)
    storage_live(@13)
    @13 := &*(a@1) with_metadata(copy (a@1.metadata))
    storage_live(@14)
    @14 := @SliceIndexShared<'_, u8>(move (@13), copy (@5))
    @4 := copy (*(@14))
    @3 := move (@4) < const (42 : u8)
    if move (@3) {
        storage_dead(@5)
        storage_dead(@4)
        storage_live(@6)
        storage_live(@7)
        storage_live(@8)
        @8 := const (1 : usize)
        storage_live(@11)
        @11 := &*(a@1) with_metadata(copy (a@1.metadata))
        storage_live(@12)
        @12 := @SliceIndexShared<'_, u8>(move (@11), copy (@8))
        @7 := copy (*(@12))
        @6 := move (@7) < const (16 : u8)
        if move (@6) {
            storage_dead(@8)
            storage_dead(@7)
            @9 := copy (sampled@2) panic.+ const (100 : usize)
            sampled@2 := move (@9)
        }
        else {
            storage_dead(@8)
            storage_dead(@7)
        }
    }
    else {
        storage_dead(@5)
        storage_dead(@4)
    }
    storage_dead(@6)
    storage_dead(@3)
    @10 := copy (sampled@2) panic.+ const (101 : usize)
    sampled@2 := move (@10)
    @0 := copy (sampled@2)
    storage_dead(sampled@2)
    return
}

// Full name: test_crate::FIELD_MODULUS
fn FIELD_MODULUS() -> i16
{
    let @0: i16; // return

    @0 := const (8 : i16)
    return
}

// Full name: test_crate::FIELD_MODULUS
const FIELD_MODULUS: i16 = FIELD_MODULUS()

// Full name: test_crate::f2
fn f2<'_0, '_1>(@1: &'_0 (Slice<u8>), @2: &'_1 mut (Slice<i16>)) -> usize
{
    let @0: usize; // return
    let a@1: &'_ (Slice<u8>); // arg #1
    let result@2: &'_ mut (Slice<i16>); // arg #2
    let sampled@3: usize; // local
    let @4: Chunks<'_, u8>[Sized<u8>]; // anonymous local
    let @5: Chunks<'_, u8>[Sized<u8>]; // anonymous local
    let @6: &'_ (Slice<u8>); // anonymous local
    let iter@7: Chunks<'_, u8>[Sized<u8>]; // local
    let @8: Option<&'_ (Slice<u8>)>[Sized<&'_ (Slice<u8>)>]; // anonymous local
    let @9: &'_ mut (Chunks<'_, u8>[Sized<u8>]); // anonymous local
    let @10: &'_ mut (Chunks<'_, u8>[Sized<u8>]); // anonymous local
    let bytes@11: &'_ (Slice<u8>); // local
    let b1@12: i16; // local
    let @13: u8; // anonymous local
    let @14: usize; // anonymous local
    let b2@15: i16; // local
    let @16: u8; // anonymous local
    let @17: usize; // anonymous local
    let b3@18: i16; // local
    let @19: u8; // anonymous local
    let @20: usize; // anonymous local
    let d1@21: i16; // local
    let @22: i16; // anonymous local
    let @23: i16; // anonymous local
    let @24: i16; // anonymous local
    let @25: i16; // anonymous local
    let d2@26: i16; // local
    let @27: i16; // anonymous local
    let @28: i16; // anonymous local
    let @29: i16; // anonymous local
    let @30: i16; // anonymous local
    let @31: bool; // anonymous local
    let @32: i16; // anonymous local
    let @33: bool; // anonymous local
    let @34: usize; // anonymous local
    let @35: i16; // anonymous local
    let @36: usize; // anonymous local
    let @37: usize; // anonymous local
    let @38: bool; // anonymous local
    let @39: i16; // anonymous local
    let @40: bool; // anonymous local
    let @41: usize; // anonymous local
    let @42: i16; // anonymous local
    let @43: usize; // anonymous local
    let @44: usize; // anonymous local
    let @45: &'_ mut (Slice<i16>); // anonymous local
    let @46: &'_ mut (i16); // anonymous local
    let @47: &'_ mut (Slice<i16>); // anonymous local
    let @48: &'_ mut (i16); // anonymous local
    let @49: &'_ (Slice<u8>); // anonymous local
    let @50: &'_ (u8); // anonymous local
    let @51: &'_ (Slice<u8>); // anonymous local
    let @52: &'_ (u8); // anonymous local
    let @53: &'_ (Slice<u8>); // anonymous local
    let @54: &'_ (u8); // anonymous local

    storage_live(@37)
    storage_live(@44)
    storage_live(sampled@3)
    sampled@3 := const (0 : usize)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := &*(a@1) with_metadata(copy (a@1.metadata))
    @5 := chunks<'_, u8>[Sized<u8>](move (@6), const (3 : usize))
    storage_dead(@6)
    @4 := {impl IntoIterator for I}::into_iter<Chunks<'_, u8>[Sized<u8>]>[Sized<Chunks<'_, u8>[Sized<u8>]>, {impl Iterator for Chunks<'a, T>[@TraitClause0]}<'_, u8>[Sized<u8>]](move (@5))
    storage_dead(@5)
    storage_live(iter@7)
    iter@7 := move (@4)
    loop {
        storage_live(@8)
        storage_live(@9)
        storage_live(@10)
        @10 := &mut iter@7
        @9 := &two-phase-mut *(@10)
        @8 := {impl Iterator for Chunks<'a, T>[@TraitClause0]}::next<'_, '_, u8>[Sized<u8>](move (@9))
        storage_dead(@9)
        match @8 {
            Option::None => {
                break 0
            },
            Option::Some => {
                storage_live(bytes@11)
                bytes@11 := copy ((@8 as variant Option::Some).0)
                storage_live(b1@12)
                storage_live(@13)
                storage_live(@14)
                @14 := const (0 : usize)
                storage_live(@53)
                @53 := &*(bytes@11) with_metadata(copy (bytes@11.metadata))
                storage_live(@54)
                @54 := @SliceIndexShared<'_, u8>(move (@53), copy (@14))
                @13 := copy (*(@54))
                b1@12 := cast<u8, i16>(move (@13))
                storage_dead(@13)
                storage_dead(@14)
                storage_live(b2@15)
                storage_live(@16)
                storage_live(@17)
                @17 := const (1 : usize)
                storage_live(@51)
                @51 := &*(bytes@11) with_metadata(copy (bytes@11.metadata))
                storage_live(@52)
                @52 := @SliceIndexShared<'_, u8>(move (@51), copy (@17))
                @16 := copy (*(@52))
                b2@15 := cast<u8, i16>(move (@16))
                storage_dead(@16)
                storage_dead(@17)
                storage_live(b3@18)
                storage_live(@19)
                storage_live(@20)
                @20 := const (2 : usize)
                storage_live(@49)
                @49 := &*(bytes@11) with_metadata(copy (bytes@11.metadata))
                storage_live(@50)
                @50 := @SliceIndexShared<'_, u8>(move (@49), copy (@20))
                @19 := copy (*(@50))
                b3@18 := cast<u8, i16>(move (@19))
                storage_dead(@19)
                storage_dead(@20)
                storage_live(d1@21)
                storage_live(@22)
                storage_live(@23)
                storage_live(@24)
                @24 := copy (b2@15)
                @23 := move (@24) & const (15 : i16)
                storage_dead(@24)
                @22 := move (@23) panic.<< const (8 : i32)
                storage_dead(@23)
                storage_live(@25)
                @25 := copy (b1@12)
                d1@21 := move (@22) | move (@25)
                storage_dead(@25)
                storage_dead(@22)
                storage_live(d2@26)
                storage_live(@27)
                storage_live(@28)
                @28 := copy (b3@18)
                @27 := move (@28) panic.<< const (4 : i32)
                storage_dead(@28)
                storage_live(@29)
                storage_live(@30)
                @30 := copy (b2@15)
                @29 := move (@30) panic.>> const (4 : i32)
                storage_dead(@30)
                d2@26 := move (@27) | move (@29)
                storage_dead(@29)
                storage_dead(@27)
                storage_live(@31)
                storage_live(@32)
                @32 := copy (d1@21)
                @31 := move (@32) < copy (FIELD_MODULUS)
                if move (@31) {
                    storage_dead(@32)
                    storage_live(@33)
                    storage_live(@34)
                    @34 := copy (sampled@3)
                    @33 := move (@34) < const (16 : usize)
                    if move (@33) {
                        storage_dead(@34)
                        storage_live(@35)
                        @35 := copy (d1@21)
                        storage_live(@36)
                        @36 := copy (sampled@3)
                        storage_live(@45)
                        @45 := &mut *(result@2) with_metadata(copy (result@2.metadata))
                        storage_live(@46)
                        @46 := @SliceIndexMut<'_, i16>(move (@45), copy (@36))
                        *(@46) := move (@35)
                        storage_dead(@35)
                        storage_dead(@36)
                        @37 := copy (sampled@3) panic.+ const (1 : usize)
                        sampled@3 := move (@37)
                    }
                    else {
                        storage_dead(@34)
                    }
                }
                else {
                    storage_dead(@32)
                }
                storage_dead(@33)
                storage_dead(@31)
                storage_live(@38)
                storage_live(@39)
                @39 := copy (d2@26)
                @38 := move (@39) < copy (FIELD_MODULUS)
                if move (@38) {
                    storage_dead(@39)
                    storage_live(@40)
                    storage_live(@41)
                    @41 := copy (sampled@3)
                    @40 := move (@41) < const (16 : usize)
                    if move (@40) {
                        storage_dead(@41)
                        storage_live(@42)
                        @42 := copy (d2@26)
                        storage_live(@43)
                        @43 := copy (sampled@3)
                        storage_live(@47)
                        @47 := &mut *(result@2) with_metadata(copy (result@2.metadata))
                        storage_live(@48)
                        @48 := @SliceIndexMut<'_, i16>(move (@47), copy (@43))
                        *(@48) := move (@42)
                        storage_dead(@42)
                        storage_dead(@43)
                        @44 := copy (sampled@3) panic.+ const (1 : usize)
                        sampled@3 := move (@44)
                    }
                    else {
                        storage_dead(@41)
                    }
                }
                else {
                    storage_dead(@39)
                }
                storage_dead(@40)
                storage_dead(@38)
                storage_dead(d2@26)
                storage_dead(d1@21)
                storage_dead(b3@18)
                storage_dead(b2@15)
                storage_dead(b1@12)
                storage_dead(bytes@11)
                storage_dead(@10)
                storage_dead(@8)
                continue 0
            },
        }
    }
    storage_dead(@10)
    storage_dead(@8)
    storage_dead(iter@7)
    storage_dead(@4)
    @0 := copy (sampled@3)
    storage_dead(sampled@3)
    return
}



