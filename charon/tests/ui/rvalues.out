# Final LLBC before serialization:

fn test_crate::addr_of()
{
    let @0: (); // return
    let x@1: u32; // local
    let @2: *const u32; // anonymous local
    let @3: &'_ (u32); // anonymous local
    let @4: *const u32; // anonymous local
    let @5: *mut u32; // anonymous local

    x@1 := const (0 : u32)
    @fake_read(x@1)
    @3 := &x@1
    @2 := &raw const *(@3)
    @fake_read(@2)
    drop @3
    drop @2
    @4 := &raw const x@1
    @fake_read(@4)
    drop @4
    @5 := &raw mut x@1
    @fake_read(@5)
    drop @5
    @0 := ()
    drop x@1
    @0 := ()
    return
}

pub fn core::f64::{f64}::MIN() -> f64

pub global core::f64::{f64}::MIN: f64 = core::f64::{f64}::MIN()

pub fn core::f32::{f32}::MAX() -> f32

pub global core::f32::{f32}::MAX: f32 = core::f32::{f32}::MAX()

fn test_crate::literal_casts()
{
    let @0: (); // return
    let @1: u8; // anonymous local
    let @2: u64; // anonymous local
    let @3: f64; // anonymous local
    let @4: u64; // anonymous local
    let @5: f64; // anonymous local
    let @6: f64; // anonymous local
    let @7: f32; // anonymous local

    @1 := cast<u64, u8>(const (0 : u64))
    @fake_read(@1)
    drop @1
    @2 := cast<u8, u64>(const (0 : u8))
    @fake_read(@2)
    drop @2
    @3 := cast<u64, f64>(const (0 : u64))
    @fake_read(@3)
    drop @3
    @6 := core::f64::{f64}::MIN
    @4 := cast<f64, u64>(move (@6))
    @fake_read(@4)
    drop @4
    @7 := core::f32::{f32}::MAX
    @5 := cast<f32, f64>(move (@7))
    @fake_read(@5)
    drop @5
    @0 := ()
    @0 := ()
    return
}

fn test_crate::ptr_casts::foo()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::ptr_casts()
{
    let @0: (); // return
    let array_ptr@1: *const Array<u32, 64 : usize>; // local
    let @2: &'_ (Array<u32, 64 : usize>); // anonymous local
    let @3: Array<u32, 64 : usize>; // anonymous local
    let @4: *const u32; // anonymous local
    let @5: *const Array<u32, 64 : usize>; // anonymous local
    let x@6: u8; // local
    let x@7: *const u8; // local
    let @8: &'_ (u8); // anonymous local
    let @9: *const u8; // anonymous local
    let @10: *const u8; // anonymous local
    let @11: *mut u8; // anonymous local
    let @12: *const u8; // anonymous local
    let @13: usize; // anonymous local
    let @14: *const u8; // anonymous local
    let @15: *const u8; // anonymous local
    let @16: *const u8; // anonymous local
    let @17: fn(); // anonymous local

    @3 := @ArrayRepeat<'_, u32, 64 : usize>(const (0 : u32))
    @2 := &@3
    array_ptr@1 := &raw const *(@2)
    @fake_read(array_ptr@1)
    drop @2
    @5 := copy (array_ptr@1)
    @4 := cast<*const Array<u32, 64 : usize>, *const u32>(move (@5))
    drop @5
    @fake_read(@4)
    drop @4
    x@6 := const (0 : u8)
    @fake_read(x@6)
    @8 := &x@6
    x@7 := &raw const *(@8)
    @fake_read(x@7)
    drop @8
    @12 := copy (x@7)
    @11 := cast<*const u8, *mut u8>(move (@12))
    @10 := cast<*mut u8, *const u8>(move (@11))
    drop @12
    drop @11
    @9 := cast<*const u8, *const u8>(move (@10))
    drop @10
    @fake_read(@9)
    drop @9
    @14 := copy (x@7)
    @13 := cast<*const u8, usize>(move (@14))
    drop @14
    @fake_read(@13)
    drop @13
    @15 := cast<usize, *const u8>(const (0 : usize))
    @fake_read(@15)
    drop @15
    @17 := cast<fn(), fn()>(const (test_crate::ptr_casts::foo))
    @16 := cast<fn(), *const u8>(move (@17))
    drop @17
    @fake_read(@16)
    drop @16
    @0 := ()
    drop x@7
    drop x@6
    drop @3
    drop array_ptr@1
    @0 := ()
    return
}

fn test_crate::fn_casts::foo()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

unsafe fn test_crate::fn_casts::bar()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

fn test_crate::fn_casts::closure<'_0>(@1: &'_0 (()), @2: u8)
{
    let @0: (); // return
    let state@1: &'_0 (()); // arg #1
    let @2: u8; // arg #2

    @0 := ()
    @0 := ()
    return
}

fn test_crate::fn_casts()
{
    let @0: (); // return
    let @1: fn(); // anonymous local
    let @2: fn(); // anonymous local
    let closure@3: fn(u8); // local
    let @4: fn(u8); // anonymous local
    let @5: fn(u8); // anonymous local
    let @6: fn(u8); // anonymous local
    let @7: fn(u8); // anonymous local

    @1 := cast<fn(), fn()>(const (test_crate::fn_casts::foo))
    @fake_read(@1)
    drop @1
    @2 := cast<fn(), fn()>(const (test_crate::fn_casts::bar))
    @fake_read(@2)
    drop @2
    closure@3 := {test_crate::fn_casts::closure} {}
    @fake_read(closure@3)
    @5 := copy (closure@3)
    @4 := cast<fn(u8), fn(u8)>(move (@5))
    drop @5
    @fake_read(@4)
    drop @4
    @7 := copy (closure@3)
    @6 := cast<fn(u8), fn(u8)>(move (@7))
    drop @7
    @fake_read(@6)
    drop @6
    @0 := ()
    drop closure@3
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

fn test_crate::boxes()
{
    let @0: (); // return
    let @1: alloc::boxed::Box<i32>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @2: alloc::boxed::Box<i32>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local

    @2 := @BoxNew<i32>[core::marker::Sized<alloc::alloc::Global>](const (42 : i32))
    @1 := move (@2)
    drop @2
    drop @2
    @fake_read(@1)
    drop @1
    drop @1
    @0 := ()
    @0 := ()
    return
}

fn test_crate::STEAL() -> Array<(), 1 : usize>
{
    let @0: Array<(), 1 : usize>; // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := @ArrayRepeat<'_, (), 1 : usize>(move (@1))
    drop @1
    return
}

global test_crate::STEAL: Array<(), 1 : usize> = test_crate::STEAL()

fn test_crate::transmute(@1: Array<u32, 2 : usize>) -> u64
{
    let @0: u64; // return
    let x@1: Array<u32, 2 : usize>; // arg #1
    let @2: Array<u32, 2 : usize>; // anonymous local

    // When optimized, this becomes a built-in cast. Otherwise this is just a call to `transmute`.
    @2 := copy (x@1)
    @0 := transmute<Array<u32, 2 : usize>, u64>(move (@2))
    drop @2
    return
}

fn test_crate::STEAL2() -> Array<(), 13 : usize>
{
    let @0: Array<(), 13 : usize>; // return
    let @1: (); // anonymous local

    @1 := ()
    @0 := @ArrayRepeat<'_, (), 13 : usize>(move (@1))
    drop @1
    return
}

global test_crate::STEAL2: Array<(), 13 : usize> = test_crate::STEAL2()

#[lang_item("mem_size_of")]
pub fn core::mem::size_of<T>() -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

pub fn core::mem::align_of<T>() -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

struct test_crate::nullary_ops::Struct<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
{
  a: u8,
  b: T,
}

fn test_crate::nullary_ops<T>() -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: usize; // return
    let size@1: usize; // local
    let align@2: usize; // local
    let ub@3: bool; // local
    let offset@4: usize; // local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let @8: usize; // anonymous local
    let @9: usize; // anonymous local
    let @10: bool; // anonymous local
    let @11: usize; // anonymous local

    size@1 := core::mem::size_of<T>[@TraitClause0]()
    align@2 := core::mem::align_of<T>[@TraitClause0]()
    // This is `const (false)` in the MIR we get, but `true` in const evaluation.
    ub@3 := const (false)
    offset@4 := offset_of(?)<test_crate::nullary_ops::Struct<T>[@TraitClause0]>
    @7 := copy (size@1)
    @8 := copy (align@2)
    @6 := move (@7) + move (@8)
    drop @8
    drop @7
    @10 := copy (ub@3)
    @9 := cast<bool, usize>(move (@10))
    drop @10
    @5 := move (@6) + move (@9)
    drop @9
    drop @6
    @11 := copy (offset@4)
    @0 := move (@5) + move (@11)
    drop @11
    drop @5
    drop offset@4
    drop ub@3
    drop align@2
    drop size@1
    return
}

#[lang_item("exchange_malloc")]
unsafe fn alloc::alloc::exchange_malloc(@1: usize, @2: usize) -> *mut u8



