# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Vec")]
pub opaque type alloc::vec::Vec<T, A>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<A>,

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

#[lang_item("slice_into_vec")]
pub fn alloc::slice::{Slice<T>}::into_vec<T, A>(@1: alloc::boxed::Box<Slice<T>>[@TraitClause1]) -> alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<A>,

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("vec_from_elem")]
pub fn alloc::vec::from_elem<T>(@1: T, @2: usize) -> alloc::vec::Vec<T, alloc::alloc::Global>[@TraitClause0, core::marker::Sized<alloc::alloc::Global>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

pub fn core::clone::impls::{impl core::clone::Clone for i32}#14::clone<'_0>(@1: &'_0 (i32)) -> i32

impl core::clone::impls::{impl core::clone::Clone for i32}#14 : core::clone::Clone<i32>
{
    parent_clause0 = core::marker::Sized<i32>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for i32}#14::clone<'_0_0>
}

fn test_crate::foo()
{
    let @0: (); // return
    let _v@1: alloc::vec::Vec<i32, alloc::alloc::Global>[core::marker::Sized<i32>, core::marker::Sized<alloc::alloc::Global>]; // local
    let @2: alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let _v2@5: alloc::vec::Vec<i32, alloc::alloc::Global>[core::marker::Sized<i32>, core::marker::Sized<alloc::alloc::Global>]; // local
    let @6: Array<i32, 1 : usize>; // anonymous local

    storage_live(@6)
    storage_live(_v@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @6 := [const (1 : i32)]
    @4 := @BoxNew<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>](move (@6))
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]>(move (@3))
    drop @3
    drop @4
    storage_dead(@4)
    storage_dead(@3)
    _v@1 := alloc::slice::{Slice<T>}::into_vec<i32, alloc::alloc::Global>[core::marker::Sized<i32>, core::marker::Sized<alloc::alloc::Global>](move (@2))
    storage_dead(@2)
    storage_live(_v2@5)
    _v2@5 := alloc::vec::from_elem<i32>[core::marker::Sized<i32>, core::clone::impls::{impl core::clone::Clone for i32}#14](const (1 : i32), const (10 : usize))
    @0 := ()
    drop _v2@5
    storage_dead(_v2@5)
    drop _v@1
    storage_dead(_v@1)
    @0 := ()
    return
}

pub struct test_crate::Foo = {}

pub fn test_crate::bar()
{
    let @0: (); // return
    let @1: alloc::vec::Vec<test_crate::Foo, alloc::alloc::Global>[core::marker::Sized<test_crate::Foo>, core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @2: alloc::boxed::Box<Slice<test_crate::Foo>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @5: test_crate::Foo; // anonymous local
    let @6: Array<test_crate::Foo, 1 : usize>; // anonymous local

    storage_live(@6)
    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := test_crate::Foo {  }
    @6 := [move (@5)]
    @4 := @BoxNew<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>](move (@6))
    storage_dead(@5)
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<Slice<test_crate::Foo>>[core::marker::Sized<alloc::alloc::Global>]>(move (@3))
    drop @3
    drop @4
    storage_dead(@4)
    storage_dead(@3)
    @1 := alloc::slice::{Slice<T>}::into_vec<test_crate::Foo, alloc::alloc::Global>[core::marker::Sized<test_crate::Foo>, core::marker::Sized<alloc::alloc::Global>](move (@2))
    storage_dead(@2)
    drop @1
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

#[lang_item("exchange_malloc")]
unsafe fn alloc::alloc::exchange_malloc(@1: usize, @2: usize) -> *mut u8

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



