# Final LLBC before serialization:

trait core::marker::Sized<Self>

opaque type alloc::vec::Vec<T, A>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<A>,

struct alloc::alloc::Global = {}

fn alloc::slice::{Slice<T>}::into_vec<T, A>(@1: alloc::boxed::Box<Slice<T>>[@TraitClause1]) -> alloc::vec::Vec<T, A>[@TraitClause0, @TraitClause1]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    // Local clauses:
    [@TraitClause1]: core::marker::Sized<A>,

trait core::clone::Clone<Self>
{
    parent_clause_0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone : core::clone::Clone::clone
    fn clone_from : core::clone::Clone::clone_from
}

fn alloc::vec::from_elem<T>(@1: T, @2: usize) -> alloc::vec::Vec<T, alloc::alloc::Global>[@TraitClause0, core::marker::Sized<alloc::alloc::Global>]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,

fn core::clone::impls::{impl core::clone::Clone for i32}#14::clone<'_0>(@1: &'_0 (i32)) -> i32

impl core::clone::impls::{impl core::clone::Clone for i32}#14 : core::clone::Clone<i32>
{
    parent_clause0 = core::marker::Sized<i32>
    fn clone = core::clone::impls::{impl core::clone::Clone for i32}#14::clone
}

fn test_crate::foo()
{
    let @0: (); // return
    let _v@1: alloc::vec::Vec<i32, alloc::alloc::Global>[core::marker::Sized<i32>, core::marker::Sized<alloc::alloc::Global>]; // local
    let @2: alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let _v2@5: alloc::vec::Vec<i32, alloc::alloc::Global>[core::marker::Sized<i32>, core::marker::Sized<alloc::alloc::Global>]; // local
    let @6: Array<i32, 1 : usize>; // anonymous local
    let @7: (); // anonymous local

    @6 := [const (1 : i32); 1 : usize]
    @4 := @BoxNew<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>](move (@6))
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<i32, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<Slice<i32>>[core::marker::Sized<alloc::alloc::Global>]>(move (@3))
    drop @3
    drop @4
    drop @4
    drop @3
    _v@1 := alloc::slice::{Slice<T>}::into_vec<i32, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>, core::marker::Sized<i32>](move (@2))
    drop @2
    @fake_read(_v@1)
    _v2@5 := alloc::vec::from_elem<i32>[core::marker::Sized<i32>, core::clone::impls::{impl core::clone::Clone for i32}#14](const (1 : i32), const (10 : usize))
    @fake_read(_v2@5)
    @7 := ()
    @0 := move (@7)
    drop _v2@5
    drop _v2@5
    drop _v@1
    drop _v@1
    @0 := ()
    return
}

struct test_crate::Foo = {}

fn test_crate::bar()
{
    let @0: (); // return
    let @1: alloc::vec::Vec<test_crate::Foo, alloc::alloc::Global>[core::marker::Sized<test_crate::Foo>, core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @2: alloc::boxed::Box<Slice<test_crate::Foo>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>]; // anonymous local
    let @5: test_crate::Foo; // anonymous local
    let @6: Array<test_crate::Foo, 1 : usize>; // anonymous local
    let @7: (); // anonymous local

    @5 := test_crate::Foo {  }
    @6 := [move (@5); 1 : usize]
    @4 := @BoxNew<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>](move (@6))
    drop @5
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<test_crate::Foo, 1 : usize>>[core::marker::Sized<alloc::alloc::Global>], alloc::boxed::Box<Slice<test_crate::Foo>>[core::marker::Sized<alloc::alloc::Global>]>(move (@3))
    drop @3
    drop @4
    drop @4
    drop @3
    @1 := alloc::slice::{Slice<T>}::into_vec<test_crate::Foo, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>, core::marker::Sized<test_crate::Foo>](move (@2))
    drop @2
    @fake_read(@1)
    drop @1
    drop @1
    @7 := ()
    @0 := move (@7)
    @0 := ()
    return
}

unsafe fn alloc::alloc::exchange_malloc(@1: usize, @2: usize) -> *mut u8

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))



