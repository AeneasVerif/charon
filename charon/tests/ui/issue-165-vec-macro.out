# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: alloc::vec::Vec
#[lang_item("Vec")]
pub opaque type Vec<T, A>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::slice::{Slice<T>}::into_vec
#[lang_item("slice_into_vec")]
pub fn into_vec<T, A>(@1: alloc::boxed::Box<Slice<T>>[@TraitClause1]) -> Vec<T, A>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

// Full name: alloc::vec::from_elem
#[lang_item("vec_from_elem")]
pub fn from_elem<T>(@1: T, @2: usize) -> Vec<T, Global>[@TraitClause0, Sized<Global>]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,

// Full name: core::clone::impls::{impl Clone for i32}#14::clone
pub fn {impl Clone for i32}#14::clone<'_0>(@1: &'_0 (i32)) -> i32

// Full name: core::clone::impls::{impl Clone for i32}#14
impl Clone for i32 {
    parent_clause0 = Sized<i32>
    fn clone<'_0> = {impl Clone for i32}#14::clone<'_0_0>
}

// Full name: test_crate::foo
fn foo()
{
    let @0: (); // return
    let _v@1: Vec<i32, Global>[Sized<i32>, Sized<Global>]; // local
    let @2: alloc::boxed::Box<Slice<i32>>[Sized<Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<i32, 1 : usize>>[Sized<Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<i32, 1 : usize>>[Sized<Global>]; // anonymous local
    let _v2@5: Vec<i32, Global>[Sized<i32>, Sized<Global>]; // local
    let @6: Array<i32, 1 : usize>; // anonymous local

    storage_live(@6)
    storage_live(_v@1)
    storage_live(@2)
    storage_live(@3)
    @6 := [const (1 : i32)]
    storage_live(@4)
    @4 := @BoxNew<Array<i32, 1 : usize>>[Sized<Global>](move (@6))
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<i32, 1 : usize>>[Sized<Global>], alloc::boxed::Box<Slice<i32>>[Sized<Global>]>(move (@3))
    drop @3
    drop @4
    storage_dead(@4)
    storage_dead(@3)
    _v@1 := into_vec<i32, Global>[Sized<i32>, Sized<Global>](move (@2))
    storage_dead(@2)
    storage_live(_v2@5)
    _v2@5 := from_elem<i32>[Sized<i32>, {impl Clone for i32}#14](const (1 : i32), const (10 : usize))
    @0 := ()
    drop _v2@5
    storage_dead(_v2@5)
    drop _v@1
    storage_dead(_v@1)
    @0 := ()
    return
}

// Full name: test_crate::Foo
pub struct Foo {}

// Full name: test_crate::bar
pub fn bar()
{
    let @0: (); // return
    let @1: Vec<Foo, Global>[Sized<Foo>, Sized<Global>]; // anonymous local
    let @2: alloc::boxed::Box<Slice<Foo>>[Sized<Global>]; // anonymous local
    let @3: alloc::boxed::Box<Array<Foo, 1 : usize>>[Sized<Global>]; // anonymous local
    let @4: alloc::boxed::Box<Array<Foo, 1 : usize>>[Sized<Global>]; // anonymous local
    let @5: Foo; // anonymous local
    let @6: Array<Foo, 1 : usize>; // anonymous local

    storage_live(@6)
    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @6 := [move (@5)]
    storage_live(@4)
    @4 := @BoxNew<Array<Foo, 1 : usize>>[Sized<Global>](move (@6))
    storage_live(@5)
    @5 := Foo {  }
    storage_dead(@5)
    @3 := move (@4)
    @2 := unsize_cast<alloc::boxed::Box<Array<Foo, 1 : usize>>[Sized<Global>], alloc::boxed::Box<Slice<Foo>>[Sized<Global>]>(move (@3))
    drop @3
    drop @4
    storage_dead(@4)
    storage_dead(@3)
    @1 := into_vec<Foo, Global>[Sized<Foo>, Sized<Global>](move (@2))
    storage_dead(@2)
    drop @1
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

// Full name: alloc::alloc::exchange_malloc
#[lang_item("exchange_malloc")]
unsafe fn exchange_malloc(@1: usize, @2: usize) -> *mut u8

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



