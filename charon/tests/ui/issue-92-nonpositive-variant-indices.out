# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Ordering
enum Ordering {
  Less,
  Equal,
  Greater,
}

// Full name: test_crate::Ordering::{impl Drop for Ordering}
impl Drop for Ordering {
    parent_clause0 = MetaSized<Ordering>
    fn drop<'_0> = {impl Drop for Ordering}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Ordering::{impl Drop for Ordering}::drop
fn {impl Drop for Ordering}::drop<'_0>(@1: &'_0 mut (Ordering))
{
    let @0: (); // return
    let @1: *mut Ordering; // arg #1
    let @2: &'_ mut (Ordering); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    match *(@2) {
        Ordering::Less => {
        },
        Ordering::Equal => {
            return
        },
        _ => {
            return
        },
    }
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: Ordering; // anonymous local

    @0 := ()
    storage_live(@1)
    @1 := Ordering::Less {  }
    match @1 {
        Ordering::Less => {
            @0 := ()
        },
        Ordering::Equal => {
            @0 := ()
        },
        Ordering::Greater => {
            @0 := ()
        },
    }
    storage_dead(@1)
    return
}



