# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
    vtable: core::ops::function::FnOnce::{vtable}<Args, Self::Output>
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>[Self]
    vtable: core::ops::function::FnMut::{vtable}<Args, Self::parent_clause1::Output>
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::option::Option::{impl Drop for Option<T>[@TraitClause0]}::drop
fn {impl Drop for Option<T>[@TraitClause0]}::drop<'_0, T>(@1: &'_0 mut (Option<T>[@TraitClause0]))
where
    [@TraitClause0]: Sized<T>,

// Full name: core::option::Option::{impl Drop for Option<T>[@TraitClause0]}
impl<T> Drop for Option<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Option<T>[@TraitClause0]>
    fn drop<'_0> = {impl Drop for Option<T>[@TraitClause0]}::drop<'_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::LendingIterator
pub trait LendingIterator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    type Item<'a, Self : 'a>
    where
        implied_clause_0 : [@TraitClause0]: Sized<Self::Item>

    fn next<'a> = test_crate::LendingIterator::next<'a, Self>[Self]
    non-dyn-compatible
}

pub fn test_crate::LendingIterator::next<'a, Self>(@1: &'a mut (Self)) -> Option<@TraitClause0::Item>[(@TraitClause0::Item::[@TraitClause0])]
where
    [@TraitClause0]: LendingIterator<Self>,

// Full name: test_crate::{impl LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]}::next
pub fn {impl LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]}::next<'a, 'b, T>(@1: &'b mut (Option<&'a (T)>[Sized<&'_ (T)>])) -> Option<&'b (T)>[Sized<&'b (T)>]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Option<&'_ (T)>[Sized<&'_ (T)>]; // return
    let self@1: &'_ mut (Option<&'_ (T)>[Sized<&'_ (T)>]); // arg #1
    let item@2: &'_ mut (&'_ (T)); // local
    let item@3: &'_ (T); // local
    let @4: Option<&'_ (T)>[Sized<&'_ (T)>]; // anonymous local
    let @5: &'_ (T); // anonymous local

    match *(self@1) {
        Option::Some => {
        },
        _ => {
            @0 := Option::None {  }
            return
        },
    }
    storage_live(item@2)
    item@2 := &mut (*(self@1) as variant Option::Some).0
    storage_live(item@3)
    item@3 := &*(*(item@2))
    storage_live(@4)
    @4 := Option::None {  }
    *(self@1) := move (@4)
    storage_dead(@4)
    storage_live(@5)
    @5 := &*(item@3)
    @0 := Option::Some { 0: move (@5) }
    storage_dead(@5)
    storage_dead(item@3)
    storage_dead(item@2)
    return
}

// Full name: test_crate::{impl LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]}
impl<'a, T> LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Option<&'_ (T)>[Sized<&'_ (T)>]>
    type Item<'b, Option<&'a (T)>[Sized<&'_ (T)>] : 'b> = &'b (T)
    fn next<'b> = {impl LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]}::next<'a, 'b, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: test_crate::for_each
pub fn for_each<I, impl for<'a> FnMut(I::Item<'a>)>(@1: I, @2: impl for<'a> FnMut(I::Item<'a>))
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Sized<impl for<'a> FnMut(I::Item<'a>)>,
    [@TraitClause2]: LendingIterator<I>,
    [@TraitClause3]: for<'a> FnMut<impl for<'a> FnMut(I::Item<'a>), (@TraitClause2::Item)>,
    for<'a> @TraitClause3::parent_clause1::Output = (),
{
    let @0: (); // return
    let iter@1: I; // arg #1
    let f@2: impl for<'a> FnMut(I::Item<'a>); // arg #2
    let @3: (); // anonymous local
    let @4: Option<@TraitClause2::Item>[(@TraitClause2::Item::[@TraitClause0])]; // anonymous local
    let @5: &'_ mut (I); // anonymous local
    let item@6: @TraitClause2::Item; // local
    let @7: &'_ mut (impl for<'a> FnMut(I::Item<'a>)); // anonymous local
    let @8: (@TraitClause2::Item); // anonymous local
    let @9: @TraitClause2::Item; // anonymous local
    let @10: (); // anonymous local

    storage_live(@3)
    loop {
        storage_live(@4)
        storage_live(@5)
        @5 := &two-phase-mut iter@1
        @4 := @TraitClause2::next<'_>(move (@5))
        storage_dead(@5)
        match @4 {
            Option::Some => {
            },
            _ => {
                break 0
            },
        }
        storage_live(item@6)
        item@6 := move ((@4 as variant Option::Some).0)
        storage_live(@7)
        @7 := &mut f@2
        storage_live(@8)
        storage_live(@9)
        @9 := move (item@6)
        @8 := (move (@9))
        @3 := @TraitClause3::call_mut<'_>(move (@7), move (@8))
        drop[Drop<@TraitClause2::Item>] @9
        storage_dead(@9)
        storage_dead(@8)
        storage_dead(@7)
        drop[Drop<@TraitClause2::Item>] item@6
        storage_dead(item@6)
        drop[{impl Drop for Option<T>[@TraitClause0]}<@TraitClause2::Item>[(@TraitClause2::Item::[@TraitClause0])]] @4
        storage_dead(@4)
        continue 0
    }
    storage_live(@10)
    @0 := ()
    storage_dead(@10)
    drop[{impl Drop for Option<T>[@TraitClause0]}<@TraitClause2::Item>[(@TraitClause2::Item::[@TraitClause0])]] @4
    storage_dead(@4)
    drop[Drop<impl for<'a> FnMut(I::Item<'a>)>] f@2
    drop[Drop<I>] iter@1
    @0 := ()
    return
}

// Full name: test_crate::main::closure
struct closure<'_0> {
  &'_0 mut (i32),
}

// Full name: test_crate::main::{impl FnMut<(&'_ (i32))> for closure<'_0>}::call_mut
fn {impl FnMut<(&'_ (i32))> for closure<'_0>}::call_mut<'_0, '_1, '_2>(@1: &'_2 mut (closure<'_0>), @2: (&'_1 (i32)))
{
    let @0: (); // return
    let @1: &'_ mut (closure<'_0>); // arg #1
    let tupled_args@2: (&'_1 (i32)); // arg #2
    let item@3: &'_ (i32); // local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    storage_live(item@3)
    storage_live(@5)
    item@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (*(item@3))
    @5 := copy (*((*(@1)).0)) panic.+ copy (@4)
    *((*(@1)).0) := move (@5)
    @0 := ()
    storage_dead(@4)
    @0 := ()
    return
}

// Full name: test_crate::main::{impl FnOnce<(&'_ (i32))> for closure<'_0>}::call_once
fn {impl FnOnce<(&'_ (i32))> for closure<'_0>}::call_once<'_0, '_1>(@1: closure<'_0>, @2: (&'_1 (i32)))
{
    let @0: (); // return
    let @1: closure<'_0>; // arg #1
    let @2: (&'_ (i32)); // arg #2
    let @3: &'_ mut (closure<'_0>); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<(&'_ (i32))> for closure<'_0>}::call_mut<'_0, '_1, '_>(move (@3), move (@2))
    drop[Drop<closure<'_0>>] @1
    @0 := ()
    return
}

// Full name: test_crate::main::{impl FnOnce<(&'_ (i32))> for closure<'_0>}
impl<'_0, '_1> FnOnce<(&'_ (i32))> for closure<'_0> {
    parent_clause0 = MetaSized<closure<'_0>>
    parent_clause1 = Sized<(&'_ (i32))>
    parent_clause2 = Tuple<(&'_ (i32))>
    parent_clause3 = Sized<()>
    type Output = ()
    fn call_once = {impl FnOnce<(&'_ (i32))> for closure<'_0>}::call_once<'_0, '_1>
    non-dyn-compatible
}

// Full name: test_crate::main::{impl FnMut<(&'_ (i32))> for closure<'_0>}
impl<'_0, '_1> FnMut<(&'_ (i32))> for closure<'_0> {
    parent_clause0 = MetaSized<closure<'_0>>
    parent_clause1 = {impl FnOnce<(&'_ (i32))> for closure<'_0>}<'_0, '_1>
    parent_clause2 = Sized<(&'_ (i32))>
    parent_clause3 = Tuple<(&'_ (i32))>
    fn call_mut<'_0> = {impl FnMut<(&'_ (i32))> for closure<'_0>}::call_mut<'_0, '_1, '_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main
pub fn main()
{
    let @0: (); // return
    let x@1: i32; // local
    let iter@2: Option<&'_ (i32)>[Sized<&'_ (i32)>]; // local
    let @3: &'_ (i32); // anonymous local
    let @4: i32; // anonymous local
    let sum@5: i32; // local
    let @6: (); // anonymous local
    let @7: Option<&'_ (i32)>[Sized<&'_ (i32)>]; // anonymous local
    let @8: closure<'_>; // anonymous local
    let @9: &'_ mut (i32); // anonymous local
    let @10: (); // anonymous local
    let @11: (&'_ (i32), &'_ (i32)); // anonymous local
    let @12: &'_ (i32); // anonymous local
    let @13: &'_ (i32); // anonymous local
    let @14: i32; // anonymous local
    let left_val@15: &'_ (i32); // local
    let right_val@16: &'_ (i32); // local
    let @17: bool; // anonymous local
    let @18: i32; // anonymous local
    let @19: i32; // anonymous local
    let kind@20: AssertKind; // local
    let @21: AssertKind; // anonymous local
    let @22: &'_ (i32); // anonymous local
    let @23: &'_ (i32); // anonymous local
    let @24: &'_ (i32); // anonymous local
    let @25: &'_ (i32); // anonymous local
    let @26: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local

    storage_live(x@1)
    x@1 := const (42 : i32)
    storage_live(iter@2)
    storage_live(@3)
    storage_live(@4)
    @4 := const (42 : i32)
    @3 := &@4
    iter@2 := Option::Some { 0: move (@3) }
    storage_dead(@3)
    storage_live(sum@5)
    sum@5 := const (0 : i32)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (iter@2)
    storage_live(@8)
    storage_live(@9)
    @9 := &mut sum@5
    @8 := closure { 0: move (@9) }
    storage_dead(@9)
    @6 := for_each<Option<&'_ (i32)>[Sized<&'_ (i32)>], closure<'_>>[Sized<Option<&'_ (i32)>[Sized<&'_ (i32)>]>, Sized<closure<'_>>, {impl LendingIterator for Option<&'a (T)>[Sized<&'_ (T)>]}<'_, i32>[Sized<i32>], {impl FnMut<(&'_ (i32))> for closure<'_0>}<'_, '_>](move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@6)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    @12 := &sum@5
    storage_live(@13)
    storage_live(@14)
    @14 := const (42 : i32)
    @13 := &@14
    @11 := (move (@12), move (@13))
    storage_dead(@13)
    storage_dead(@12)
    storage_live(left_val@15)
    left_val@15 := copy ((@11).0)
    storage_live(right_val@16)
    right_val@16 := copy ((@11).1)
    storage_live(@17)
    storage_live(@18)
    @18 := copy (*(left_val@15))
    storage_live(@19)
    @19 := copy (*(right_val@16))
    @17 := move (@18) == move (@19)
    if move (@17) {
    }
    else {
        storage_dead(@19)
        storage_dead(@18)
        storage_live(kind@20)
        kind@20 := AssertKind::Eq {  }
        storage_live(@21)
        @21 := move (kind@20)
        storage_live(@22)
        storage_live(@23)
        @23 := &*(left_val@15)
        @22 := &*(@23)
        storage_live(@24)
        storage_live(@25)
        @25 := &*(right_val@16)
        @24 := &*(@25)
        storage_live(@26)
        @26 := Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@19)
    storage_dead(@18)
    storage_dead(@17)
    storage_dead(right_val@16)
    storage_dead(left_val@15)
    storage_dead(@14)
    storage_dead(@11)
    storage_dead(@10)
    @0 := ()
    storage_dead(sum@5)
    storage_dead(@4)
    storage_dead(iter@2)
    storage_dead(x@1)
    @0 := ()
    return
}



