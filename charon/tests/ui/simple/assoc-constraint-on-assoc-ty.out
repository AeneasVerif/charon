# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
}

// Full name: test_crate::Trait
trait Trait<Self, Self_Assoc>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self_Assoc>
}

// Full name: test_crate::takes_trait
fn takes_trait<I, Clause1_Assoc>(@1: I)
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: Trait<I, Clause1_Assoc>,
{
    let @0: (); // return
    let it@1: I; // arg #1

    @0 := ()
    drop it@1
    @0 := ()
    return
}

// Full name: test_crate::IntoIterator
trait IntoIterator<Self, Self_IntoIter>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self_IntoIter>
    parent_clause2 : [@TraitClause2]: Trait<Self_IntoIter, ()>
}

// Full name: test_crate::collect
fn collect<I, Clause1_IntoIter>(@1: Clause1_IntoIter)
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: IntoIterator<I, Clause1_IntoIter>,
{
    let @0: (); // return
    let it@1: Clause1_IntoIter; // arg #1
    let @2: Clause1_IntoIter; // anonymous local

    storage_live(@2)
    @2 := move (it@1)
    @0 := takes_trait<Clause1_IntoIter, ()>[@TraitClause1::parent_clause1, @TraitClause1::parent_clause2](move (@2))
    storage_dead(@2)
    drop it@1
    @0 := ()
    return
}



