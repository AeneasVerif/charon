# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub struct test_crate::Foo<F>
  where
      [@TraitClause0]: core::marker::Sized<F>,
 =
{
  F,
}

struct test_crate::{test_crate::Foo<F>[@TraitClause0]}::method::closure<F, T>
  where
      [@TraitClause0]: core::marker::Sized<F>,
      [@TraitClause1]: core::marker::Sized<T>,
 = {}

pub fn test_crate::{test_crate::Foo<F>[@TraitClause0]}::method<F, T>()
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<T>,
{
    let @0: (); // return
    let _closure@1: test_crate::{test_crate::Foo<F>[@TraitClause0]}::method::closure<F, T>[@TraitClause0, @TraitClause1]; // local

    storage_live(_closure@1)
    _closure@1 := test_crate::{test_crate::Foo<F>[@TraitClause0]}::method::closure {  }
    @0 := ()
    storage_dead(_closure@1)
    @0 := ()
    return
}



