# Final LLBC before serialization:

// Full name: test_crate::HasAssoc
trait HasAssoc<Self>
{
    type Assoc
}

// Full name: test_crate::Trait
trait Trait<Self>
{
    fn default_method<T, [@TraitClause1]: HasAssoc<T>> = default_method<Self, T>[@TraitClause0_1]
}

fn test_crate::{impl Trait for T}::default_method<T, T>() -> @TraitClause2::Assoc
where
    [@TraitClause2]: HasAssoc<T>,
{
    let @0: @TraitClause2::Assoc; // return

    panic(core::panicking::panic)
}

// Full name: test_crate::{impl Trait for T}
impl<T> Trait for T {
    fn default_method<T, [@TraitClause1]: HasAssoc<T>> = test_crate::{impl Trait for T}::default_method<T, T>[@TraitClause0_1]
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::Trait::default_method
fn default_method<Self, T>() -> @TraitClause1::Assoc
where
    [@TraitClause1]: HasAssoc<T>,
{
    let @0: @TraitClause1::Assoc; // return

    panic(core::panicking::panic)
}



