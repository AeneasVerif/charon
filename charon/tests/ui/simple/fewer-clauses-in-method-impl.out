# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait test_crate::Trait<Self>
{
    fn method<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::marker::Copy<T>> = test_crate::Trait::method<Self, T>[@TraitClause0_0, @TraitClause0_1]
}

fn test_crate::{impl test_crate::Trait for ()}::method<T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

impl test_crate::{impl test_crate::Trait for ()} : test_crate::Trait<()> {
    fn method<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::clone::Clone<T>> = test_crate::{impl test_crate::Trait for ()}::method<T>[@TraitClause0_0, @TraitClause0_1]
}

fn test_crate::main()
{
    let @0: (); // return

    @0 := test_crate::{impl test_crate::Trait for ()}::method<()>[core::marker::Sized<()>, core::marker::Copy<()>]()
    @0 := ()
    return
}

fn test_crate::Trait::method<Self, T>()
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Copy<T>,

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self



