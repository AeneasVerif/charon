# Final LLBC before serialization:

enum test_crate::Enum =
|  Some(u8)
|  None()


#[lang_item("structural_peq")]
pub trait core::marker::StructuralPartialEq<Self>

impl test_crate::{impl core::marker::StructuralPartialEq for test_crate::Enum} : core::marker::StructuralPartialEq<test_crate::Enum>

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

pub fn core::cmp::impls::{impl core::cmp::PartialEq<&'_0 (B)> for &'_1 (A)}#9::eq<'_0, '_1, '_2, '_3, A, B>(@1: &'_2 (&'_1 (A)), @2: &'_3 (&'_0 (B))) -> bool
where
    [@TraitClause0]: core::cmp::PartialEq<A, B>,

pub fn core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22 : core::cmp::PartialEq<u8, u8>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq<'_0_0, '_0_1>
}

pub fn test_crate::{impl core::cmp::PartialEq<test_crate::Enum> for test_crate::Enum}#1::eq<'_0, '_1>(@1: &'_0 (test_crate::Enum), @2: &'_1 (test_crate::Enum)) -> bool
{
    let @0: bool; // return
    let self@1: &'_ (test_crate::Enum); // arg #1
    let other@2: &'_ (test_crate::Enum); // arg #2
    let __self_discr@3: isize; // local
    let @4: &'_ (test_crate::Enum); // anonymous local
    let __arg1_discr@5: isize; // local
    let @6: &'_ (test_crate::Enum); // anonymous local
    let @7: bool; // anonymous local
    let @8: isize; // anonymous local
    let @9: isize; // anonymous local
    let @10: (&'_ (test_crate::Enum), &'_ (test_crate::Enum)); // anonymous local
    let @11: &'_ (test_crate::Enum); // anonymous local
    let @12: &'_ (test_crate::Enum); // anonymous local
    let __self_0@13: &'_ (u8); // local
    let __arg1_0@14: &'_ (u8); // local
    let @15: &'_ (&'_ (u8)); // anonymous local
    let @16: &'_ (&'_ (u8)); // anonymous local

    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(__self_0@13)
    storage_live(__arg1_0@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(__self_discr@3)
    storage_live(@4)
    @4 := &*(self@1)
    match *(@4) {
        0 => {
            __self_discr@3 := const (0 : isize)
        },
        1 => {
            __self_discr@3 := const (1 : isize)
        },
    }
    storage_dead(@4)
    storage_live(__arg1_discr@5)
    storage_live(@6)
    @6 := &*(other@2)
    match *(@6) {
        0 => {
            __arg1_discr@5 := const (0 : isize)
        },
        1 => {
            __arg1_discr@5 := const (1 : isize)
        },
    }
    storage_dead(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := copy (__self_discr@3)
    storage_live(@9)
    @9 := copy (__arg1_discr@5)
    @7 := move (@8) == move (@9)
    if move (@7) {
        storage_dead(@9)
        storage_dead(@8)
        storage_live(@10)
        storage_live(@11)
        @11 := copy (self@1)
        storage_live(@12)
        @12 := copy (other@2)
        @10 := (move (@11), move (@12))
        storage_dead(@12)
        storage_dead(@11)
        match *((@10).0) {
            0 => {
                match *((@10).1) {
                    0 => {
                        storage_live(__self_0@13)
                        __self_0@13 := &(*((@10).0) as variant @0).0
                        storage_live(__arg1_0@14)
                        __arg1_0@14 := &(*((@10).1) as variant @0).0
                        storage_live(@15)
                        @15 := &__self_0@13
                        storage_live(@16)
                        @16 := &__arg1_0@14
                        @0 := core::cmp::impls::{impl core::cmp::PartialEq<&'_0 (B)> for &'_1 (A)}#9::eq<'_, '_, '_, '_, u8, u8>[core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22](move (@15), move (@16))
                        storage_dead(@16)
                        storage_dead(@15)
                        storage_dead(__arg1_0@14)
                        storage_dead(__self_0@13)
                    },
                    _ => {
                        @0 := const (true)
                    },
                }
            },
            _ => {
                @0 := const (true)
            },
        }
        storage_dead(@10)
    }
    else {
        storage_dead(@9)
        storage_dead(@8)
        @0 := const (false)
    }
    storage_dead(@7)
    storage_dead(__arg1_discr@5)
    storage_dead(__self_discr@3)
    return
}

impl test_crate::{impl core::cmp::PartialEq<test_crate::Enum> for test_crate::Enum}#1 : core::cmp::PartialEq<test_crate::Enum, test_crate::Enum>
{
    fn eq<'_0, '_1> = test_crate::{impl core::cmp::PartialEq<test_crate::Enum> for test_crate::Enum}#1::eq<'_0_0, '_0_1>
}

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

#[lang_item("Formatter")]
pub opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::Error = {}

#[lang_item("Debug")]
pub trait core::fmt::Debug<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Debug::fmt<'_0_0, '_0_1, '_0_2, Self>
}

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

pub trait core::hash::Hasher<Self>
{
    fn finish<'_0> = core::hash::Hasher::finish<'_0_0, Self>
    fn write<'_0, '_1> = core::hash::Hasher::write<'_0_0, '_0_1, Self>
}

#[lang_item("Hash")]
pub trait core::hash::Hash<Self>
{
    fn hash<'_0, '_1, H, [@TraitClause0]: core::marker::Sized<H>, [@TraitClause1]: core::hash::Hasher<H>> = core::hash::Hash::hash<'_0_0, '_0_1, Self, H>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("Send")]
pub trait core::marker::Send<Self>

#[lang_item("sync")]
pub trait core::marker::Sync<Self>

#[lang_item("unpin")]
pub trait core::marker::Unpin<Self>

#[lang_item("discriminant_kind")]
pub trait core::marker::DiscriminantKind<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause2 : [@TraitClause2]: core::marker::Copy<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause3 : [@TraitClause3]: core::fmt::Debug<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause4 : [@TraitClause4]: core::cmp::Eq<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause5 : [@TraitClause5]: core::cmp::PartialEq<core::marker::DiscriminantKind<Self>::Discriminant, core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause6 : [@TraitClause6]: core::hash::Hash<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause7 : [@TraitClause7]: core::marker::Send<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause8 : [@TraitClause8]: core::marker::Sync<core::marker::DiscriminantKind<Self>::Discriminant>
    parent_clause9 : [@TraitClause9]: core::marker::Unpin<core::marker::DiscriminantKind<Self>::Discriminant>
    type Discriminant
}

pub fn core::intrinsics::discriminant_value<'_0, T>(@1: &'_0 (T)) -> core::marker::DiscriminantKind<T>::Discriminant
where
    [@TraitClause0]: core::marker::Sized<T>,

impl core::cmp::impls::{impl core::cmp::PartialEq<&'_0 (B)> for &'_1 (A)}#9<'_0, '_1, A, B> : core::cmp::PartialEq<&'_1 (A), &'_0 (B)>
where
    [@TraitClause0]: core::cmp::PartialEq<A, B>,
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<&'_0 (B)> for &'_1 (A)}#9::eq<'_0, '_1, '_0_0, '_0_1, A, B>[@TraitClause0]
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn core::fmt::Debug::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

pub fn core::hash::Hash::hash<'_0, '_1, Self, H>(@1: &'_0 (Self), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,

pub fn core::hash::Hasher::finish<'_0, Self>(@1: &'_0 (Self)) -> u64

pub fn core::hash::Hasher::write<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Slice<u8>))



