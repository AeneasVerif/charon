# Final LLBC before serialization:

struct core::marker::MetaSized::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0_2]: MetaSized<_dyn> + _dyn : '_)),
}

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

struct test_crate::Trait::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0_2]: Trait<_dyn> + _dyn : '_)),
  method_foo: fn<'_0_1>(&'_0_1 ((dyn exists<_dyn> [@TraitClause0_2]: Trait<_dyn> + _dyn : '_))),
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::Trait
trait Trait<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn foo<'a, '_1_1, Self : 'a> = test_crate::Trait::foo<'a, '_1_1, Self>[Self]
    vtable: test_crate::Trait::{vtable}
}

fn test_crate::Trait::foo<'a, '_1, Self>(@1: &'_1 (Self))
where
    [@TraitClause0]: Trait<Self>,
    Self : 'a,

fn test_crate::foo<'_0>(@1: &'_0 ((dyn exists<_dyn> [@TraitClause0_1]: Trait<_dyn> + _dyn : '_0)))
{
    let @0: (); // return
    let x@1: &'_ ((dyn exists<_dyn> [@TraitClause0_1]: Trait<_dyn> + _dyn : '_)); // arg #1

    @0 := ()
    @0 := ()
    return
}



