# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
    non-dyn-compatible
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>[Self]
    non-dyn-compatible
}

// Full name: core::ops::function::Fn
#[lang_item("r#fn")]
pub trait Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnMut<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>[Self]
    non-dyn-compatible
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> @TraitClause0::parent_clause1::parent_clause1::Output
where
    [@TraitClause0]: Fn<Self, Args>,

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: test_crate::takes_fn
fn takes_fn<'_0>(@1: &'_0 ((dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_0 + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool)))
{
    let @0: (); // return
    let f@1: &'_ ((dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_ + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool)); // arg #1
    let counter@2: u32; // local
    let @3: bool; // anonymous local
    let @4: &'_ ((dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_ + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool)); // anonymous local
    let @5: (&'_ mut (u32)); // anonymous local
    let @6: &'_ mut (u32); // anonymous local
    let @7: &'_ mut (u32); // anonymous local

    storage_live(counter@2)
    counter@2 := const (0 : u32)
    storage_live(@3)
    storage_live(@4)
    @4 := &*(f@1)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := &mut counter@2
    @6 := &two-phase-mut *(@7)
    @5 := (move (@6))
    @3 := Fn<(dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_ + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool), (&'_ mut (u32))>::call<'_>(move (@4), move (@5))
    if move (@3) {
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    else {
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
        storage_dead(@4)
        @0 := ()
    }
    storage_dead(@3)
    storage_dead(counter@2)
    @0 := ()
    return
}

// Full name: test_crate::gives_fn::closure
struct closure {}

// Full name: test_crate::gives_fn::{impl Fn<(&'_ mut (u32))> for closure}::call
fn {impl Fn<(&'_ mut (u32))> for closure}::call<'_0, '_1>(@1: &'_1 (closure), @2: (&'_0 mut (u32))) -> bool
{
    let @0: bool; // return
    let @1: &'_ (closure); // arg #1
    let tupled_args@2: (&'_0 mut (u32)); // arg #2
    let counter@3: &'_ mut (u32); // local
    let @4: u32; // anonymous local

    storage_live(counter@3)
    storage_live(@4)
    counter@3 := move ((tupled_args@2).0)
    @4 := copy (*(counter@3)) panic.+ const (1 : u32)
    *(counter@3) := move (@4)
    @0 := const (true)
    return
}

// Full name: test_crate::gives_fn::{impl FnMut<(&'_ mut (u32))> for closure}::call_mut
fn {impl FnMut<(&'_ mut (u32))> for closure}::call_mut<'_0, '_1>(@1: &'_1 mut (closure), @2: (&'_0 mut (u32))) -> bool
{
    let @0: bool; // return
    let state@1: &'_1 mut (closure); // arg #1
    let args@2: (&'_0 mut (u32)); // arg #2
    let @3: &'_ (closure); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := {impl Fn<(&'_ mut (u32))> for closure}::call<'_0, '_>(move (@3), move (args@2))
    return
}

// Full name: test_crate::gives_fn::{impl FnOnce<(&'_ mut (u32))> for closure}::call_once
fn {impl FnOnce<(&'_ mut (u32))> for closure}::call_once<'_0>(@1: closure, @2: (&'_0 mut (u32))) -> bool
{
    let @0: bool; // return
    let @1: closure; // arg #1
    let @2: (&'_ mut (u32)); // arg #2
    let @3: &'_ mut (closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<(&'_ mut (u32))> for closure}::call_mut<'_0, '_>(move (@3), move (@2))
    drop[Drop<closure>] @1
    return
}

// Full name: test_crate::gives_fn::{impl FnOnce<(&'_ mut (u32))> for closure}
impl<'_0> FnOnce<(&'_ mut (u32))> for closure {
    parent_clause0 = MetaSized<closure>
    parent_clause1 = Sized<(&'_ mut (u32))>
    parent_clause2 = Tuple<(&'_ mut (u32))>
    parent_clause3 = Sized<bool>
    type Output = bool
    fn call_once = {impl FnOnce<(&'_ mut (u32))> for closure}::call_once<'_0>
    non-dyn-compatible
}

// Full name: test_crate::gives_fn::{impl FnMut<(&'_ mut (u32))> for closure}
impl<'_0> FnMut<(&'_ mut (u32))> for closure {
    parent_clause0 = MetaSized<closure>
    parent_clause1 = {impl FnOnce<(&'_ mut (u32))> for closure}<'_0>
    parent_clause2 = Sized<(&'_ mut (u32))>
    parent_clause3 = Tuple<(&'_ mut (u32))>
    fn call_mut<'_0> = {impl FnMut<(&'_ mut (u32))> for closure}::call_mut<'_0, '_0_0>
    non-dyn-compatible
}

// Full name: test_crate::gives_fn::{impl Fn<(&'_ mut (u32))> for closure}
impl<'_0> Fn<(&'_ mut (u32))> for closure {
    parent_clause0 = MetaSized<closure>
    parent_clause1 = {impl FnMut<(&'_ mut (u32))> for closure}<'_0>
    parent_clause2 = Sized<(&'_ mut (u32))>
    parent_clause3 = Tuple<(&'_ mut (u32))>
    fn call<'_0> = {impl Fn<(&'_ mut (u32))> for closure}::call<'_0, '_0_0>
    non-dyn-compatible
}

// Full name: test_crate::gives_fn
fn gives_fn()
{
    let @0: (); // return
    let @1: &'_ ((dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_ + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool)); // anonymous local
    let @2: &'_ (closure); // anonymous local
    let @3: &'_ (closure); // anonymous local
    let @4: closure; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := closure {  }
    @3 := &@4
    @2 := &*(@3)
    @1 := unsize_cast<&'_ (closure), &'_ ((dyn exists<_dyn> [@TraitClause0]: for<'a> Fn<_dyn, (&'a mut (u32))> + _dyn : '_ + for<'a> @TraitClause1_0::parent_clause1::parent_clause1::Output = bool)), {impl Fn<(&'_ mut (u32))> for closure}<'_>>(move (@2))
    storage_dead(@2)
    @0 := takes_fn<'_>(move (@1))
    storage_dead(@1)
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    return
}



