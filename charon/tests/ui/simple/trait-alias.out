# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>[Self]
    non-dyn-compatible
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::marker::Destruct
#[lang_item("destruct")]
pub trait Destruct<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Destruct::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: test_crate::Trait
trait Trait<Self, T, Self_Item>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    parent_clause2 : [@TraitClause2]: Sized<Self_Item>
    non-dyn-compatible
}

// Full name: test_crate::Struct
struct Struct {}

// Full name: test_crate::{impl Clone for Struct}::clone
pub fn {impl Clone for Struct}::clone<'_0>(@1: &'_0 (Struct)) -> Struct
{
    let @0: Struct; // return
    let self@1: &'_ (Struct); // arg #1

    @0 := Struct {  }
    return
}

// Full name: test_crate::{impl Clone for Struct}
impl Clone for Struct {
    parent_clause0 = Sized<Struct>
    fn clone<'_0> = {impl Clone for Struct}::clone<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::{impl Trait<T, u32> for Struct}
impl<T> Trait<T, u32> for Struct
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Struct>
    parent_clause1 = @TraitClause0
    parent_clause2 = Sized<u32>
    non-dyn-compatible
}

// Full name: test_crate::Alias
trait Alias<Self, U>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Trait<Self, Option<U>[Self::parent_clause3], u32>
    parent_clause2 : [@TraitClause2]: Clone<Self>
    parent_clause3 : [@TraitClause3]: Sized<U>
    non-dyn-compatible
}

// Full name: test_crate::Alias::{impl Alias<U> for Self}
impl<Self, U> Alias<U> for Self
where
    [@TraitClause0]: MetaSized<Self>,
    [@TraitClause1]: Trait<Self, Option<U>[@TraitClause3], u32>,
    [@TraitClause2]: Clone<Self>,
    [@TraitClause3]: Sized<U>,
{
    parent_clause0 = @TraitClause0
    parent_clause1 = @TraitClause1
    parent_clause2 = @TraitClause2
    parent_clause3 = @TraitClause3
    non-dyn-compatible
}

// Full name: test_crate::takes_alias
fn takes_alias<T>(@1: T)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Alias<T, ()>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let @2: T; // anonymous local
    let @3: &'_ (T); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &x@1
    @2 := @TraitClause1::parent_clause2::clone<'_>(move (@3))
    storage_dead(@3)
    drop[Drop<T>] @2
    storage_dead(@2)
    @0 := ()
    drop[Drop<T>] x@1
    @0 := ()
    return
}

// Full name: test_crate::use_alias
fn use_alias()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: Struct; // anonymous local

    storage_live(@1)
    storage_live(@2)
    @2 := Struct {  }
    @1 := takes_alias<Struct>[Sized<Struct>, {impl Alias<U> for Self}<Struct, ()>[MetaSized<Struct>, {impl Trait<T, u32> for Struct}<Option<()>[Sized<()>]>[Sized<Option<()>[Sized<()>]>], {impl Clone for Struct}, Sized<()>]](move (@2))
    storage_dead(@2)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



