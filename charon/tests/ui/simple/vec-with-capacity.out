# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: alloc::raw_vec::RawVec
opaque type RawVec<T, A>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::vec::Vec
#[lang_item("Vec")]
pub struct Vec<T, A>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<A>,
{
  buf: RawVec<T, A>[@TraitClause0, @TraitClause1],
  len: usize,
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::raw_vec::RawVecInner
opaque type RawVecInner<A>
where
    [@TraitClause0]: Sized<A>,

// Full name: core::marker::PhantomData
#[lang_item("phantom_data")]
pub struct PhantomData<T> {}

// Full name: core::alloc::layout::Layout
#[lang_item("alloc_layout")]
pub opaque type Layout

// Full name: alloc::raw_vec::{RawVecInner<A>[@TraitClause0]}#4::with_capacity_in
fn with_capacity_in<A>(@1: usize, @2: A, @3: Layout) -> RawVecInner<A>[@TraitClause0]
where
    [@TraitClause0]: Sized<A>,

// Full name: core::mem::SizedTypeProperties
pub trait SizedTypeProperties<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    const IS_ZST : bool
    const LAYOUT : Layout
    const MAX_SLICE_LEN : usize
}

pub fn core::mem::SizedTypeProperties::IS_ZST<Self>() -> bool
where
    [@TraitClause0]: SizedTypeProperties<Self>,

pub const core::mem::SizedTypeProperties::IS_ZST<Self>: bool
where
    [@TraitClause0]: SizedTypeProperties<Self>,
 = core::mem::SizedTypeProperties::IS_ZST()

pub fn core::mem::SizedTypeProperties::LAYOUT<Self>() -> Layout
where
    [@TraitClause0]: SizedTypeProperties<Self>,

pub const core::mem::SizedTypeProperties::LAYOUT<Self>: Layout
where
    [@TraitClause0]: SizedTypeProperties<Self>,
 = core::mem::SizedTypeProperties::LAYOUT()

pub fn core::mem::SizedTypeProperties::MAX_SLICE_LEN<Self>() -> usize
where
    [@TraitClause0]: SizedTypeProperties<Self>,

pub const core::mem::SizedTypeProperties::MAX_SLICE_LEN<Self>: usize
where
    [@TraitClause0]: SizedTypeProperties<Self>,
 = core::mem::SizedTypeProperties::MAX_SLICE_LEN()

// Full name: core::mem::{impl SizedTypeProperties for T}#6
impl<T> SizedTypeProperties for T
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = @TraitClause0
    const IS_ZST = core::mem::SizedTypeProperties::IS_ZST<T>[{impl SizedTypeProperties for T}#6<T>[@TraitClause0]]
    const LAYOUT = core::mem::SizedTypeProperties::LAYOUT<T>[{impl SizedTypeProperties for T}#6<T>[@TraitClause0]]
    const MAX_SLICE_LEN = core::mem::SizedTypeProperties::MAX_SLICE_LEN<T>[{impl SizedTypeProperties for T}#6<T>[@TraitClause0]]
}

// Full name: alloc::vec::{Vec<T, Global>[@TraitClause0, Sized<Global>]}::with_capacity
#[lang_item("vec_with_capacity")]
pub fn with_capacity<T>(@1: usize) -> Vec<T, Global>[@TraitClause0, Sized<Global>]
where
    [@TraitClause0]: Sized<T>,
{
    let @0: Vec<T, Global>[@TraitClause0, Sized<Global>]; // return
    let capacity@1: usize; // arg #1
    let @2: RawVec<T, Global>[@TraitClause0, Sized<Global>]; // anonymous local
    let @3: RawVecInner<Global>[Sized<Global>]; // anonymous local
    let @4: Global; // anonymous local
    let @5: PhantomData<T>; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@2)
    storage_live(@3)
    @4 := Global {  }
    @3 := with_capacity_in<Global>[Sized<Global>](move (capacity@1), move (@4), const ({impl SizedTypeProperties for T}#6<T>[@TraitClause0]::LAYOUT))
    @5 := PhantomData {  }
    @2 := RawVec { 0: move (@3), 1: move (@5) }
    storage_dead(@3)
    @0 := Vec { buf: move (@2), len: const (0 : usize) }
    storage_dead(@2)
    return
}

// Full name: test_crate::vec
fn vec()
{
    let @0: (); // return
    let @1: Vec<u32, Global>[Sized<u32>, Sized<Global>]; // anonymous local

    storage_live(@1)
    @1 := with_capacity<u32>[Sized<u32>](const (42 : usize))
    drop @1
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



