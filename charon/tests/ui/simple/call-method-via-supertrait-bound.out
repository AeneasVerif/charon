# Final LLBC before serialization:

// Full name: test_crate::OtherTrait
trait OtherTrait<Self>

// Full name: test_crate::ImpliesOtherTrait
trait ImpliesOtherTrait<Self>
{
    parent_clause0 : [@TraitClause0]: OtherTrait<Self>
}

// Full name: test_crate::HasMethod
trait HasMethod<Self>
{
    fn method<'_0> = test_crate::HasMethod::method<'_0_0, Self>[Self]
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::{impl HasMethod for T}::method
fn {impl HasMethod for T}::method<'_0, T>(@1: &'_0 (T))
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: OtherTrait<T>,
{
    let @0: (); // return
    let self@1: &'_ (T); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl HasMethod for T}
impl<T> HasMethod for T
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: OtherTrait<T>,
{
    fn method<'_0> = {impl HasMethod for T}::method<'_0_0, T>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::call_method
fn call_method<T>(@1: T)
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: ImpliesOtherTrait<T>,
{
    let @0: (); // return
    let x@1: T; // arg #1
    let @2: (); // anonymous local
    let @3: &'_ (T); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := &x@1
    @2 := {impl HasMethod for T}::method<'_, T>[@TraitClause0, @TraitClause1::parent_clause0](move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    drop x@1
    @0 := ()
    return
}

fn test_crate::HasMethod::method<'_0, Self>(@1: &'_0 (Self))
where
    [@TraitClause0]: HasMethod<Self>,



