# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::IntoIterator
pub trait IntoIterator<Self, Self_Item>
{
    parent_clause0 : [@TraitClause0]: Sized<Self_Item>
}

// Full name: test_crate::FromIterator
pub trait FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<A>
    fn from_iter<T, [@TraitClause0]: Sized<T>, [@TraitClause1]: IntoIterator<T, A>> = test_crate::FromIterator::from_iter<Self, A, T>[Self, @TraitClause0_0, @TraitClause0_1]
}

pub fn test_crate::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: FromIterator<Self, A>,
    [@TraitClause1]: Sized<T>,
    [@TraitClause2]: IntoIterator<T, A>,

// Full name: test_crate::{impl FromIterator<()> for ()}::from_iter
pub fn {impl FromIterator<()> for ()}::from_iter<I>(@1: I)
where
    [@TraitClause0]: Sized<I>,
    [@TraitClause1]: IntoIterator<I, ()>,
{
    let @0: (); // return
    let iter@1: I; // arg #1

    @0 := ()
    drop iter@1
    @0 := ()
    return
}

// Full name: test_crate::{impl FromIterator<()> for ()}
impl FromIterator<()> for () {
    parent_clause0 = Sized<()>
    parent_clause1 = Sized<()>
    fn from_iter<I, [@TraitClause0]: Sized<I>, [@TraitClause1]: IntoIterator<I, ()>> = {impl FromIterator<()> for ()}::from_iter<I>[@TraitClause0_0, @TraitClause0_1]
}



