# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Link
pub trait Link<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    vtable: test_crate::Link::{vtable}<T>
}

// Full name: test_crate::{impl Link<T> for U}
impl<T, U> Link<T> for U
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<U>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    vtable: {impl Link<T> for U}::{vtable}<T, U>[@TraitClause0, @TraitClause1]
}

// Full name: test_crate::Trait
pub trait Trait<Self, T>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    type Type<U, [@TraitClause0]: Sized<U>>
    where
        implied_clause_0 : [@TraitClause0]: Sized<Self::Type>
        implied_clause_1 : [@TraitClause1]: Link<Self::Type, T>

    non-dyn-compatible
}

// Full name: test_crate::Foo
pub struct Foo {}

// Full name: test_crate::Foo::{impl Drop for Foo}
impl Drop for Foo {
    parent_clause0 = MetaSized<Foo>
    fn drop<'_0> = {impl Drop for Foo}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Foo::{impl Drop for Foo}::drop
fn {impl Drop for Foo}::drop<'_0>(@1: &'_0 mut (Foo))
{
    let @0: (); // return
    let @1: *mut Foo; // arg #1
    let @2: &'_ mut (Foo); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::{impl Trait<Option<T>[@TraitClause0]> for Foo}
impl<T> Trait<Option<T>[@TraitClause0]> for Foo
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Foo>
    parent_clause1 = Sized<Option<T>[@TraitClause0]>
    type Type<U, [@TraitClause0]: Sized<U>> = (T, U)
    non-dyn-compatible
}



