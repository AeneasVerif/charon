# Final LLBC before serialization:

// Full name: core::marker::MetaSized::<E1>
#[lang_item("meta_sized")]
pub trait MetaSized::<E1>

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::E1
enum E1 {
  A,
  B,
}

// Full name: core::ops::drop::Drop::<E1>
#[lang_item("drop")]
pub trait Drop::<E1>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<E1>
    fn drop<'_0> = core::ops::drop::Drop::drop::<E1><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<E1>
}

// Full name: test_crate::E1::{impl Drop::<E1>}
impl Drop::<E1> {
    parent_clause0 = MetaSized::<E1>
    fn drop<'_0> = {impl Drop::<E1>}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::E1::{impl Drop::<E1>}::drop
fn {impl Drop::<E1>}::drop<'_0>(@1: &'_0 mut (E1))
{
    let @0: (); // return
    let @1: *mut E1; // arg #1
    let @2: &'_ mut (E1); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    match *(@2) {
        E1::A => {
        },
        _ => {
            return
        },
    }
    return
}

// Full name: core::intrinsics::discriminant_value::<E1>
pub fn discriminant_value::<E1><'_0>(@1: &'_0 (E1)) -> isize

// Full name: core::marker::MetaSized::<E2>
#[lang_item("meta_sized")]
pub trait MetaSized::<E2>

// Full name: test_crate::E2
enum E2 {
  A,
  B,
}

// Full name: core::ops::drop::Drop::<E2>
#[lang_item("drop")]
pub trait Drop::<E2>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<E2>
    fn drop<'_0> = core::ops::drop::Drop::drop::<E2><'_0_0>
    vtable: core::ops::drop::Drop::{vtable}::<E2>
}

// Full name: test_crate::E2::{impl Drop::<E2>}
impl Drop::<E2> {
    parent_clause0 = MetaSized::<E2>
    fn drop<'_0> = {impl Drop::<E2>}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::E2::{impl Drop::<E2>}::drop
fn {impl Drop::<E2>}::drop<'_0>(@1: &'_0 mut (E2))
{
    let @0: (); // return
    let @1: *mut E2; // arg #1
    let @2: &'_ mut (E2); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    match *(@2) {
        E2::A => {
        },
        _ => {
            return
        },
    }
    return
}

// Full name: core::intrinsics::discriminant_value::<E2>
pub fn discriminant_value::<E2><'_0>(@1: &'_0 (E2)) -> isize

// Full name: core::marker::Sized::<E1>
#[lang_item("sized")]
pub trait Sized::<E1>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<E1>
    non-dyn-compatible
}

// Full name: core::marker::Sized::<E2>
#[lang_item("sized")]
pub trait Sized::<E2>
{
    parent_clause0 : [@TraitClause0]: MetaSized::<E2>
    non-dyn-compatible
}

pub fn core::ops::drop::Drop::drop::<E1><'_0>(@1: &'_0 mut (E1))

pub fn core::ops::drop::Drop::drop::<E2><'_0>(@1: &'_0 mut (E2))

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: isize; // anonymous local
    let @2: &'_ (E1); // anonymous local
    let @3: &'_ (E1); // anonymous local
    let @4: E1; // anonymous local
    let @5: isize; // anonymous local
    let @6: &'_ (E2); // anonymous local
    let @7: &'_ (E2); // anonymous local
    let @8: E2; // anonymous local

    @0 := ()
    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    // We detect these in a pass; this test makes sure we don't mess up the generics in `--mono`
    // mode.
    @4 := E1::A {  }
    @3 := &@4
    @2 := &*(@3)
    @1 := @discriminant(*(@2))
    storage_dead(@2)
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@1)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := E2::A {  }
    @7 := &@8
    @6 := &*(@7)
    @5 := @discriminant(*(@6))
    storage_dead(@6)
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@5)
    @0 := ()
    return
}



