# Final LLBC before serialization:

trait test_crate::BoolTrait<Self>
{
    fn foo<'_0> = test_crate::BoolTrait::foo<'_0_0, Self>
}

trait core::marker::Sized<Self>

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


fn test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}::foo<'_0, T>(@1: &'_0 (core::option::Option<T>[@TraitClause0]))
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: (); // return
    let self@1: &'_ (core::option::Option<T>[@TraitClause0]); // arg #1
    let @2: (); // anonymous local

    @2 := ()
    @0 := move (@2)
    @0 := ()
    return
}

impl<T> test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}<T> : test_crate::BoolTrait<core::option::Option<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    fn foo<'_0> = test_crate::{impl test_crate::BoolTrait for core::option::Option<T>[@TraitClause0]}::foo<'_0_0, T>[@TraitClause0]
}

fn test_crate::BoolTrait::foo<'_0, Self>(@1: &'_0 (Self))
{
    let @0: (); // return
    let self@1: &'_ (Self); // arg #1
    let @2: (); // anonymous local

    @2 := ()
    @0 := move (@2)
    @0 := ()
    return
}



