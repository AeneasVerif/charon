# Final LLBC before serialization:

struct test_crate::foo::closure<'_0> {
  &'_0 mut (i32),
}

fn test_crate::foo::{impl core::ops::function::FnMut<()> for test_crate::foo::closure<'_0>}::call_mut<'_0, '_1>(@1: &'_1 mut (test_crate::foo::closure<'_0>), @2: ())
{
    let @0: (); // return
    let @1: &'_ mut (test_crate::foo::closure<'_0>); // arg #1
    let tupled_args@2: (); // arg #2

    *((*(@1)).0) := copy (*((*(@1)).0)) + const (1 : i32)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::foo()
{
    let @0: (); // return
    let x@1: i32; // local
    let rx@2: &'_ mut (i32); // local
    let closure@3: test_crate::foo::closure<'_>; // local
    let @4: (); // anonymous local
    let @5: &'_ mut (test_crate::foo::closure<'_>); // anonymous local
    let @6: (); // anonymous local

    storage_live(x@1)
    x@1 := const (0 : i32)
    storage_live(rx@2)
    rx@2 := &mut x@1
    storage_live(closure@3)
    closure@3 := test_crate::foo::closure { 0: move (rx@2) }
    storage_live(@4)
    storage_live(@5)
    @5 := &mut closure@3
    storage_live(@6)
    @6 := ()
    @4 := test_crate::foo::{impl core::ops::function::FnMut<()> for test_crate::foo::closure<'_0>}::call_mut<'_, '_>(move (@5), move (@6))
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    storage_dead(closure@3)
    storage_dead(rx@2)
    storage_dead(x@1)
    @0 := ()
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

fn test_crate::foo::{impl core::ops::function::FnOnce<()> for test_crate::foo::closure<'_0>}::call_once<'_0>(@1: test_crate::foo::closure<'_0>, @2: ())
{
    let @0: (); // return
    let @1: test_crate::foo::closure<'_0>; // arg #1
    let @2: (); // arg #2
    let @3: &'_ mut (test_crate::foo::closure<'_0>); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := test_crate::foo::{impl core::ops::function::FnMut<()> for test_crate::foo::closure<'_0>}::call_mut<'_0, '_>(move (@3), move (@2))
    drop @1
    @0 := ()
    return
}

impl test_crate::foo::{impl core::ops::function::FnOnce<()> for test_crate::foo::closure<'_0>}<'_0> : core::ops::function::FnOnce<test_crate::foo::closure<'_0>, ()> {
    parent_clause0 = core::marker::Sized<()>
    parent_clause1 = core::marker::Tuple<()>
    parent_clause2 = core::marker::Sized<()>
    type Output = ()
    fn call_once = test_crate::foo::{impl core::ops::function::FnOnce<()> for test_crate::foo::closure<'_0>}::call_once<'_0>
}

impl test_crate::foo::{impl core::ops::function::FnMut<()> for test_crate::foo::closure<'_0>}<'_0> : core::ops::function::FnMut<test_crate::foo::closure<'_0>, ()> {
    parent_clause0 = test_crate::foo::{impl core::ops::function::FnOnce<()> for test_crate::foo::closure<'_0>}<'_0>
    parent_clause1 = core::marker::Sized<()>
    parent_clause2 = core::marker::Tuple<()>
    fn call_mut<'_0> = test_crate::foo::{impl core::ops::function::FnMut<()> for test_crate::foo::closure<'_0>}::call_mut<'_0, '_0_0>
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



