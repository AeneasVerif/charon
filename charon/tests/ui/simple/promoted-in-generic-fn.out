# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::mem::size_of
#[lang_item("mem_size_of")]
pub fn size_of<T>() -> usize
where
    [@TraitClause0]: Sized<T>,

// Full name: test_crate::f
fn f<T>()
where
    [@TraitClause0]: Sized<T>,
{
    let @0: (); // return
    let @1: &'_ (usize); // anonymous local
    let @2: &'_ (usize); // anonymous local
    let @3: (); // anonymous local
    let @4: &'_ (usize); // anonymous local
    let @5: usize; // anonymous local
    let @6: (); // anonymous local

    storage_live(@2)
    storage_live(@4)
    storage_live(@5)
    // This can't be evaluated generically.
    @5 := size_of<T>[@TraitClause0]()
    storage_live(@6)
    @6 := ()
    @4 := &(@5, move (@6))
    storage_live(@1)
    @2 := move (@4)
    storage_live(@3)
    @3 := ()
    @1 := &(*(@2), move (@3))
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



