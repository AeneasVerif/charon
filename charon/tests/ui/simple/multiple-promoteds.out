# Final LLBC before serialization:

// Full name: core::ops::arith::{impl Add<&'_0 (u32)> for &'_1 (u32)}#27::add
pub fn {impl Add<&'_0 (u32)> for &'_1 (u32)}#27::add<'_0, '_1>(@1: &'_1 (u32), @2: &'_0 (u32)) -> u32

// Full name: test_crate::six
fn six() -> u32
{
    let @0: u32; // return
    let x@1: &'_ (u32); // local
    let y@2: &'_ (u32); // local
    let @3: &'_ (u32); // anonymous local
    let @4: &'_ (u32); // anonymous local
    let @5: &'_ (u32); // anonymous local
    let @6: &'_ (u32); // anonymous local
    let @7: &'_ (u32); // anonymous local
    let @8: u32; // anonymous local
    let @9: (u32, bool); // anonymous local
    let @10: &'_ (u32); // anonymous local
    let @11: u32; // anonymous local
    let @12: (u32, bool); // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(x@1)
    @9 := const (0 : u32) checked.+ const (1 : u32)
    @8 := move ((@9).0)
    @7 := &@8
    @6 := move (@7)
    x@1 := &*(@6)
    storage_live(y@2)
    @12 := const (2 : u32) checked.+ const (3 : u32)
    @11 := move ((@12).0)
    @10 := &@11
    @5 := move (@10)
    y@2 := &*(@5)
    storage_live(@3)
    @3 := copy (x@1)
    storage_live(@4)
    @4 := copy (y@2)
    @0 := {impl Add<&'_0 (u32)> for &'_1 (u32)}#27::add<'_, '_>(move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(y@2)
    storage_dead(x@1)
    return
}

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::ops::arith::Add
#[lang_item("add")]
pub trait Add<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: Sized<Rhs>
    parent_clause1 : [@TraitClause1]: Sized<Self::Output>
    type Output
    fn add = core::ops::arith::Add::add<Self, Rhs>[Self]
}

#[lang_item("add")]
pub fn core::ops::arith::Add::add<Self, Rhs>(@1: Self, @2: Rhs) -> @TraitClause0::Output
where
    [@TraitClause0]: Add<Self, Rhs>,

// Full name: core::ops::arith::{impl Add<&'_0 (u32)> for &'_1 (u32)}#27
impl<'_0, '_1> Add<&'_0 (u32)> for &'_1 (u32) {
    parent_clause0 = Sized<&'_ (u32)>
    parent_clause1 = Sized<u32>
    type Output = u32
    fn add = {impl Add<&'_0 (u32)> for &'_1 (u32)}#27::add<'_0, '_1>
}

// Full name: core::ops::arith::{impl Add<u32> for u32}#3::add
pub fn {impl Add<u32> for u32}#3::add(@1: u32, @2: u32) -> u32

// Full name: core::ops::arith::{impl Add<u32> for u32}#3
impl Add<u32> for u32 {
    parent_clause0 = Sized<u32>
    parent_clause1 = Sized<u32>
    type Output = u32
    fn add = {impl Add<u32> for u32}#3::add
}



