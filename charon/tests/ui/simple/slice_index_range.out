# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("RangeInclusive")]
pub struct core::ops::range::RangeInclusive<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
  exhausted: bool,
}

#[lang_item("range_inclusive_new")]
pub fn core::ops::range::{core::ops::range::RangeInclusive<Idx>[@TraitClause0]}#7::new<Idx>(@1: Idx, @2: Idx) -> core::ops::range::RangeInclusive<Idx>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Idx>,
{
    let @0: core::ops::range::RangeInclusive<Idx>[@TraitClause0]; // return
    let start@1: Idx; // arg #1
    let end@2: Idx; // arg #2

    @0 := core::ops::range::RangeInclusive { start: copy (start@1), end: copy (end@2), exhausted: const (false) }
    return
}

pub trait core::slice::index::private_slice_index::Sealed<Self>

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("SliceIndex")]
pub trait core::slice::index::SliceIndex<Self, T>
{
    parent_clause0 : [@TraitClause0]: core::slice::index::private_slice_index::Sealed<Self>
    type Output
    fn get<'_0> = core::slice::index::SliceIndex::get<'_0_0, Self, T>
    fn get_mut<'_0> = core::slice::index::SliceIndex::get_mut<'_0_0, Self, T>
    fn get_unchecked = core::slice::index::SliceIndex::get_unchecked<Self, T>
    fn get_unchecked_mut = core::slice::index::SliceIndex::get_unchecked_mut<Self, T>
    fn index<'_0> = core::slice::index::SliceIndex::index<'_0_0, Self, T>
    fn index_mut<'_0> = core::slice::index::SliceIndex::index_mut<'_0_0, Self, T>
}

pub fn core::slice::index::SliceIndex::index<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> &'_0 (Self::Output)

pub fn core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_0, T, I>(@1: &'_0 (Slice<T>), @2: I) -> &'_0 (@TraitClause2::Output)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    let @0: &'_ (@TraitClause2::Output); // return
    let self@1: &'_ (Slice<T>); // arg #1
    let index@2: I; // arg #2

    @0 := @TraitClause2::index<'_>(move (index@2), move (self@1))
    return
}

impl core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#5 : core::slice::index::private_slice_index::Sealed<core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]>

pub fn core::num::{usize}#11::MAX() -> usize
{
    let @0: usize; // return

    @0 := ~(const (0 : usize))
    return
}

pub const core::num::{usize}#11::MAX: usize = core::num::{usize}#11::MAX()

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get<'_0, T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> core::option::Option<&'_0 (Slice<T>)>[core::marker::Sized<&'_0 (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: bool; // anonymous local
    let self@4: usize; // local
    let self@5: &'_ (core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]); // local
    let exclusive_end@6: usize; // local
    let start@7: usize; // local
    let self@8: usize; // local
    let @9: bool; // anonymous local
    let @10: usize; // anonymous local
    let @11: &'_ (Slice<T>); // anonymous local
    let @12: *const Slice<T>; // anonymous local
    let @13: *const Slice<T>; // anonymous local
    let @14: bool; // anonymous local
    let new_len@15: usize; // local
    let @16: *const T; // anonymous local
    let @17: *const T; // anonymous local
    let self@18: usize; // local
    let self@19: bool; // local
    let @20: usize; // anonymous local
    let @21: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // anonymous local
    let @22: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(exclusive_end@6)
    storage_live(start@7)
    storage_live(self@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    storage_live(new_len@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(self@18)
    storage_live(self@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    storage_live(@3)
    storage_live(self@5)
    self@5 := &self@1
    storage_dead(self@5)
    self@4 := copy ((self@1).end)
    @20 := core::num::{usize}#11::MAX
    @3 := copy (self@4) == move (@20)
    if move (@3) {
        @21 := core::option::Option::None {  }
        @0 := move (@21)
    }
    else {
        self@18 := move ((self@1).start)
        self@19 := move ((self@1).exhausted)
        exclusive_end@6 := copy (self@4) wrapping.+ const (1 : usize)
        storage_live(start@7)
        if copy (self@19) {
            start@7 := copy (exclusive_end@6)
        }
        else {
            start@7 := copy (self@18)
        }
        self@8 := copy (start@7)
        storage_dead(start@7)
        storage_live(@11)
        storage_live(@14)
        @14 := copy (exclusive_end@6) < copy (self@8)
        if move (@14) {
            storage_dead(@14)
            @22 := core::option::Option::None {  }
            @0 := move (@22)
            storage_dead(@9)
            storage_dead(@11)
        }
        else {
            new_len@15 := copy (exclusive_end@6) wrapping.- copy (self@8)
            storage_dead(@14)
            storage_live(@9)
            storage_live(@10)
            @10 := ptr_metadata(copy (slice@2))
            @9 := copy (exclusive_end@6) <= move (@10)
            if move (@9) {
                storage_dead(@10)
                storage_live(@12)
                storage_live(@13)
                @13 := &raw const *(slice@2)
                storage_live(@16)
                storage_live(@17)
                @17 := cast<*const Slice<T>, *const T>(copy (@13))
                @16 := copy (@17) offset copy (self@8)
                storage_dead(@17)
                @12 := @PtrFromPartsShared<'_, Slice<T>>(copy (@16), copy (new_len@15))
                storage_dead(@16)
                storage_dead(@13)
                @11 := &*(@12)
                @0 := core::option::Option::Some { 0: copy (@11) }
                storage_dead(@12)
            }
            else {
                storage_dead(@10)
                @22 := core::option::Option::None {  }
                @0 := move (@22)
            }
            storage_dead(@9)
            storage_dead(@11)
        }
    }
    storage_dead(@3)
    return
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_mut<'_0, T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> core::option::Option<&'_0 mut (Slice<T>)>[core::marker::Sized<&'_0 mut (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: bool; // anonymous local
    let self@4: usize; // local
    let self@5: &'_ (core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]); // local
    let exclusive_end@6: usize; // local
    let start@7: usize; // local
    let self@8: usize; // local
    let @9: bool; // anonymous local
    let @10: usize; // anonymous local
    let @11: &'_ mut (Slice<T>); // anonymous local
    let @12: *mut Slice<T>; // anonymous local
    let ptr@13: *mut Slice<T>; // local
    let @14: bool; // anonymous local
    let new_len@15: usize; // local
    let @16: *mut T; // anonymous local
    let @17: *mut T; // anonymous local
    let self@18: usize; // local
    let self@19: bool; // local
    let @20: usize; // anonymous local
    let @21: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // anonymous local
    let @22: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(exclusive_end@6)
    storage_live(start@7)
    storage_live(self@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(ptr@13)
    storage_live(@14)
    storage_live(new_len@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(self@18)
    storage_live(self@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    storage_live(@3)
    storage_live(self@5)
    self@5 := &self@1
    storage_dead(self@5)
    self@4 := copy ((self@1).end)
    @20 := core::num::{usize}#11::MAX
    @3 := copy (self@4) == move (@20)
    if move (@3) {
        @21 := core::option::Option::None {  }
        @0 := move (@21)
    }
    else {
        self@18 := move ((self@1).start)
        self@19 := move ((self@1).exhausted)
        exclusive_end@6 := copy (self@4) wrapping.+ const (1 : usize)
        storage_live(start@7)
        if copy (self@19) {
            start@7 := copy (exclusive_end@6)
        }
        else {
            start@7 := copy (self@18)
        }
        self@8 := copy (start@7)
        storage_dead(start@7)
        storage_live(@11)
        storage_live(@14)
        @14 := copy (exclusive_end@6) < copy (self@8)
        if move (@14) {
            storage_dead(@14)
            @22 := core::option::Option::None {  }
            @0 := move (@22)
            storage_dead(@9)
            storage_dead(@11)
        }
        else {
            new_len@15 := copy (exclusive_end@6) wrapping.- copy (self@8)
            storage_dead(@14)
            storage_live(@9)
            storage_live(@10)
            @10 := ptr_metadata(copy (slice@2))
            @9 := copy (exclusive_end@6) <= move (@10)
            if move (@9) {
                storage_dead(@10)
                storage_live(@12)
                storage_live(ptr@13)
                ptr@13 := &raw mut *(slice@2)
                storage_live(@16)
                storage_live(@17)
                @17 := cast<*mut Slice<T>, *mut T>(copy (ptr@13))
                @16 := copy (@17) offset copy (self@8)
                storage_dead(@17)
                @12 := @PtrFromPartsMut<'_, Slice<T>>(copy (@16), copy (new_len@15))
                storage_dead(@16)
                storage_dead(ptr@13)
                @11 := &mut *(@12)
                @0 := core::option::Option::Some { 0: copy (@11) }
                storage_dead(@12)
            }
            else {
                storage_dead(@10)
                @22 := core::option::Option::None {  }
                @0 := move (@22)
            }
            storage_dead(@9)
            storage_dead(@11)
        }
    }
    storage_dead(@3)
    return
}

#[lang_item("format_count")]
pub enum core::fmt::rt::Count =
|  Is(u16)
|  Param(usize)
|  Implied()


#[lang_item("format_placeholder")]
pub struct core::fmt::rt::Placeholder =
{
  position: usize,
  flags: u32,
  precision: core::fmt::rt::Count,
  width: core::fmt::rt::Count,
}

#[lang_item("NonNull")]
pub struct core::ptr::non_null::NonNull<T> =
{
  pointer: *const T,
}

pub struct core::fmt::FormattingOptions =
{
  flags: u32,
  width: u16,
  precision: u16,
}

#[lang_item("Formatter")]
pub struct core::fmt::Formatter<'a>
  where
      'a : 'a,
 =
{
  options: core::fmt::FormattingOptions,
  buf: &'a mut (dyn (exists(TODO))),
}

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::Error = {}

#[lang_item("phantom_data")]
pub struct core::marker::PhantomData<T> = {}

enum core::fmt::rt::ArgumentType<'a> =
|  Placeholder(value: core::ptr::non_null::NonNull<()>, formatter: fn<'_0, '_1>(core::ptr::non_null::NonNull<()>, &'_0_0 mut (core::fmt::Formatter<'_0_1>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>], _lifetime: core::marker::PhantomData<&'a (())>)
|  Count(u16)


#[lang_item("format_argument")]
pub struct core::fmt::rt::Argument<'a> =
{
  ty: core::fmt::rt::ArgumentType<'a>,
}

#[lang_item("format_arguments")]
pub struct core::fmt::Arguments<'a>
  where
      'a : 'a,
 =
{
  pieces: &'a (Slice<&'static (Str)>),
  fmt: core::option::Option<&'a (Slice<core::fmt::rt::Placeholder>)>[core::marker::Sized<&'_ (Slice<core::fmt::rt::Placeholder>)>],
  args: &'a (Slice<core::fmt::rt::Argument<'a>>),
}

pub fn core::fmt::{core::fmt::Arguments<'a>}#4::new_const<'a, const N : usize>(@1: &'a (Array<&'static (Str), const N : usize>)) -> core::fmt::Arguments<'a>
{
    let @0: core::fmt::Arguments<'_>; // return
    let pieces@1: &'_ (Array<&'_ (Str), const N : usize>); // arg #1
    let @2: &'_ (Slice<&'_ (Str)>); // anonymous local
    let @3: &'_ (Slice<core::fmt::rt::Argument<'_>>); // anonymous local
    let @4: &'_ (Array<core::fmt::rt::Argument<'_>, 0 : usize>); // anonymous local
    let @5: Array<core::fmt::rt::Argument<'_>, 0 : usize>; // anonymous local
    let @6: core::option::Option<&'_ (Slice<core::fmt::rt::Placeholder>)>[core::marker::Sized<&'_ (Slice<core::fmt::rt::Placeholder>)>]; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @5 := []
    @4 := &@5
    storage_live(@2)
    @2 := @ArrayToSliceShared<'_, &'_ (Str), const N : usize>(copy (pieces@1))
    storage_live(@3)
    @3 := @ArrayToSliceShared<'_, core::fmt::rt::Argument<'_>, 0 : usize>(move (@4))
    @6 := core::option::Option::None {  }
    @0 := core::fmt::Arguments { pieces: move (@2), fmt: move (@6), args: move (@3) }
    storage_dead(@3)
    storage_dead(@2)
    return
}

fn core::panicking::panic_nounwind_fmt::compiletime<'_0>(@1: core::fmt::Arguments<'_0>, @2: bool) -> !
{
    let @0: !; // return
    let fmt@1: core::fmt::Arguments<'_>; // arg #1
    let force_no_backtrace@2: bool; // arg #2

    panic(core::panicking::panic_fmt)
}

pub fn core::panicking::panic_nounwind_fmt<'_0>(@1: core::fmt::Arguments<'_0>, @2: bool) -> !
{
    let @0: !; // return
    let fmt@1: core::fmt::Arguments<'_>; // arg #1
    let force_no_backtrace@2: bool; // arg #2
    let @3: (core::fmt::Arguments<'_>, bool); // anonymous local
    let @4: core::fmt::Arguments<'_>; // anonymous local
    let @5: bool; // anonymous local

    storage_live(@3)
    storage_live(@4)
    @4 := copy (fmt@1)
    storage_live(@5)
    @5 := copy (force_no_backtrace@2)
    @3 := (move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @0 := core::panicking::panic_nounwind_fmt::compiletime<'_>(move ((@3).0), move ((@3).1))
}

#[lang_item("panic_nounwind")]
pub fn core::panicking::panic_nounwind(@1: &'static (Str)) -> !
{
    let @0: !; // return
    let expr@1: &'_ (Str); // arg #1
    let @2: !; // anonymous local
    let @3: core::fmt::Arguments<'_>; // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @6: Array<&'_ (Str), 1 : usize>; // anonymous local
    let @7: &'_ (Str); // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (expr@1)
    @6 := [move (@7)]
    storage_dead(@7)
    @5 := &@6
    @4 := &*(@5)
    @3 := core::fmt::{core::fmt::Arguments<'a>}#4::new_const<'_, 1 : usize>(move (@4))
    storage_dead(@4)
    @2 := core::panicking::panic_nounwind_fmt<'_>(move (@3), const (false))
}

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    @6 := core::panicking::panic_nounwind(const ("unsafe precondition(s) violated: slice::get_unchecked requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety."))
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_unchecked<T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: *const Slice<T>) -> *const Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *const Slice<T>; // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *const Slice<T>; // arg #2
    let exclusive_end@3: usize; // local
    let start@4: usize; // local
    let self@5: usize; // local
    let @6: bool; // anonymous local
    let @7: (); // anonymous local
    let @8: usize; // anonymous local
    let new_len@9: usize; // local
    let @10: *const T; // anonymous local
    let @11: *const T; // anonymous local
    let self@12: usize; // local
    let self@13: usize; // local
    let self@14: bool; // local

    storage_live(exclusive_end@3)
    storage_live(self@5)
    storage_live(@7)
    storage_live(@8)
    storage_live(self@12)
    storage_live(self@13)
    storage_live(self@14)
    self@12 := move ((self@1).start)
    self@13 := move ((self@1).end)
    self@14 := move ((self@1).exhausted)
    exclusive_end@3 := copy (self@13) wrapping.+ const (1 : usize)
    storage_live(start@4)
    if copy (self@14) {
        start@4 := copy (exclusive_end@3)
    }
    else {
        start@4 := copy (self@12)
    }
    self@5 := copy (start@4)
    storage_dead(start@4)
    storage_live(new_len@9)
    storage_live(@6)
    @6 := ub_checks<bool>
    if move (@6) {
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked::precondition_check(copy (self@5), copy (exclusive_end@3), move (@8))
        storage_dead(@8)
    }
    else {
    }
    storage_dead(@6)
    new_len@9 := copy (exclusive_end@3) wrapping.- copy (self@5)
    storage_live(@10)
    storage_live(@11)
    @11 := cast<*const Slice<T>, *const T>(copy (slice@2))
    @10 := copy (@11) offset copy (self@5)
    storage_dead(@11)
    @0 := @PtrFromPartsShared<'_, Slice<T>>(copy (@10), copy (new_len@9))
    storage_dead(@10)
    storage_dead(new_len@9)
    return
}

fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut::precondition_check(@1: usize, @2: usize, @3: usize)
{
    let @0: (); // return
    let start@1: usize; // arg #1
    let end@2: usize; // arg #2
    let len@3: usize; // arg #3
    let @4: bool; // anonymous local
    let @5: bool; // anonymous local
    let @6: !; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@4)
    @4 := copy (end@2) >= copy (start@1)
    if move (@4) {
        storage_live(@5)
        @5 := copy (end@2) <= copy (len@3)
        if move (@5) {
            storage_dead(@5)
            storage_dead(@4)
            @0 := ()
            return
        }
        else {
        }
    }
    else {
    }
    @6 := core::panicking::panic_nounwind(const ("unsafe precondition(s) violated: slice::get_unchecked_mut requires that the range is within the slice\n\nThis indicates a bug in the program. This Undefined Behavior check is optional, and cannot be relied on for safety."))
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_unchecked_mut<T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: *mut Slice<T>) -> *mut Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *mut Slice<T>; // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *mut Slice<T>; // arg #2
    let exclusive_end@3: usize; // local
    let start@4: usize; // local
    let self@5: usize; // local
    let @6: bool; // anonymous local
    let @7: (); // anonymous local
    let @8: usize; // anonymous local
    let new_len@9: usize; // local
    let @10: *mut T; // anonymous local
    let @11: *mut T; // anonymous local
    let self@12: usize; // local
    let self@13: usize; // local
    let self@14: bool; // local

    storage_live(exclusive_end@3)
    storage_live(self@5)
    storage_live(@7)
    storage_live(@8)
    storage_live(self@12)
    storage_live(self@13)
    storage_live(self@14)
    self@12 := move ((self@1).start)
    self@13 := move ((self@1).end)
    self@14 := move ((self@1).exhausted)
    exclusive_end@3 := copy (self@13) wrapping.+ const (1 : usize)
    storage_live(start@4)
    if copy (self@14) {
        start@4 := copy (exclusive_end@3)
    }
    else {
        start@4 := copy (self@12)
    }
    self@5 := copy (start@4)
    storage_dead(start@4)
    storage_live(new_len@9)
    storage_live(@6)
    @6 := ub_checks<bool>
    if move (@6) {
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut::precondition_check(copy (self@5), copy (exclusive_end@3), move (@8))
        storage_dead(@8)
    }
    else {
    }
    storage_dead(@6)
    new_len@9 := copy (exclusive_end@3) wrapping.- copy (self@5)
    storage_live(@10)
    storage_live(@11)
    @11 := cast<*mut Slice<T>, *mut T>(copy (slice@2))
    @10 := copy (@11) offset copy (self@5)
    storage_dead(@11)
    @0 := @PtrFromPartsMut<'_, Slice<T>>(copy (@10), copy (new_len@9))
    storage_dead(@10)
    storage_dead(new_len@9)
    return
}

#[lang_item("Range")]
pub struct core::ops::range::Range<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
}

fn core::slice::index::slice_end_index_len_fail::do_panic::runtime(@1: usize, @2: usize) -> !

fn core::slice::index::slice_end_index_len_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2

    @0 := core::slice::index::slice_end_index_len_fail::do_panic::runtime(move (index@1), move (len@2))
}

fn core::slice::index::slice_end_index_len_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let len@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (len@2)
    @0 := core::slice::index::slice_end_index_len_fail::do_panic(move (@3), move (@4))
}

fn core::slice::index::slice_index_order_fail::do_panic::runtime(@1: usize, @2: usize) -> !

fn core::slice::index::slice_index_order_fail::do_panic(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2

    @0 := core::slice::index::slice_index_order_fail::do_panic::runtime(move (index@1), move (end@2))
}

fn core::slice::index::slice_index_order_fail(@1: usize, @2: usize) -> !
{
    let @0: !; // return
    let index@1: usize; // arg #1
    let end@2: usize; // arg #2
    let @3: usize; // anonymous local
    let @4: usize; // anonymous local

    storage_live(@3)
    @3 := copy (index@1)
    storage_live(@4)
    @4 := copy (end@2)
    @0 := core::slice::index::slice_index_order_fail::do_panic(move (@3), move (@4))
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> &'_0 (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (Slice<T>); // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: *const Slice<T>; // anonymous local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *const T; // anonymous local
    let @16: *const T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) wrapping.- copy (rhs@7)
        @5 := core::option::Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant @1).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(@12)
            @12 := &raw const *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @16 := cast<*const Slice<T>, *const T>(copy (@12))
            @15 := copy (@16) offset copy (rhs@7)
            storage_dead(@16)
            @11 := @PtrFromPartsShared<'_, Slice<T>>(copy (@15), copy (new_len@4))
            storage_dead(@15)
            storage_dead(@12)
            @0 := &*(@11)
            storage_dead(@11)
            return
        }
        @10 := core::slice::index::slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := core::slice::index::slice_index_order_fail(move (rhs@7), move (self@6))
}

fn core::slice::index::slice_end_index_overflow_fail() -> !
{
    let @0: !; // return
    let @1: core::fmt::Arguments<'_>; // anonymous local
    let @2: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @3: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @4: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @5: &'_ (Array<&'_ (Str), 1 : usize>); // anonymous local
    let @6: Array<&'_ (Str), 1 : usize>; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := [const ("attempted to index slice up to maximum usize")]
    @5 := &@6
    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    @4 := move (@5)
    @3 := &*(@4)
    @2 := &*(@3)
    @1 := core::fmt::{core::fmt::Arguments<'a>}#4::new_const<'_, 1 : usize>(move (@2))
    storage_dead(@2)
    panic(core::panicking::panic_fmt)
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::index<'_0, T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> &'_0 (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ (Slice<T>); // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: bool; // anonymous local
    let self@4: usize; // local
    let self@5: &'_ (core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]); // local
    let @6: !; // anonymous local
    let @7: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let exclusive_end@8: usize; // local
    let start@9: usize; // local
    let @10: usize; // anonymous local
    let self@11: usize; // local
    let self@12: bool; // local
    let @13: usize; // anonymous local

    storage_live(self@4)
    storage_live(@6)
    storage_live(@7)
    storage_live(exclusive_end@8)
    storage_live(start@9)
    storage_live(@10)
    storage_live(self@11)
    storage_live(self@12)
    storage_live(@13)
    storage_live(@3)
    storage_live(self@5)
    self@5 := &self@1
    storage_dead(self@5)
    self@4 := copy ((self@1).end)
    @13 := core::num::{usize}#11::MAX
    @3 := copy (self@4) == move (@13)
    if move (@3) {
    }
    else {
        storage_dead(@3)
        storage_live(@7)
        self@11 := move ((self@1).start)
        self@12 := move ((self@1).exhausted)
        exclusive_end@8 := copy (self@4) wrapping.+ const (1 : usize)
        storage_live(start@9)
        if copy (self@12) {
            start@9 := copy (exclusive_end@8)
        }
        else {
            start@9 := copy (self@11)
        }
        storage_live(@10)
        @10 := copy (start@9)
        @7 := core::ops::range::Range { start: move (@10), end: copy (exclusive_end@8) }
        storage_dead(@10)
        storage_dead(start@9)
        @0 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index<'_, T>[@TraitClause0](move (@7), move (slice@2))
        storage_dead(@7)
        return
    }
    @6 := core::slice::index::slice_end_index_overflow_fail()
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index_mut<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> &'_0 mut (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ mut (Slice<T>); // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: !; // anonymous local
    let new_len@4: usize; // local
    let @5: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@6: usize; // local
    let rhs@7: usize; // local
    let @8: bool; // anonymous local
    let @9: usize; // anonymous local
    let @10: !; // anonymous local
    let @11: *mut Slice<T>; // anonymous local
    let ptr@12: *mut Slice<T>; // local
    let @13: bool; // anonymous local
    let @14: usize; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: *mut T; // anonymous local

    storage_live(@3)
    storage_live(new_len@4)
    storage_live(self@6)
    storage_live(rhs@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(ptr@12)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@5)
    self@6 := copy ((self@1).end)
    rhs@7 := copy ((self@1).start)
    storage_live(@13)
    @13 := copy (self@6) < copy (rhs@7)
    if move (@13) {
    }
    else {
        storage_live(@14)
        @14 := copy (self@6) wrapping.- copy (rhs@7)
        @5 := core::option::Option::Some { 0: move (@14) }
        storage_dead(@14)
        storage_dead(@13)
        new_len@4 := copy ((@5 as variant @1).0)
        storage_dead(@5)
        storage_live(@8)
        @9 := ptr_metadata(copy (slice@2))
        @8 := copy (self@6) > copy (@9)
        if move (@8) {
        }
        else {
            storage_dead(@8)
            storage_live(@11)
            storage_live(ptr@12)
            ptr@12 := &raw mut *(slice@2)
            storage_live(@15)
            storage_live(@16)
            @16 := cast<*mut Slice<T>, *mut T>(copy (ptr@12))
            @15 := copy (@16) offset copy (rhs@7)
            storage_dead(@16)
            @11 := @PtrFromPartsMut<'_, Slice<T>>(copy (@15), copy (new_len@4))
            storage_dead(@15)
            storage_dead(ptr@12)
            @0 := &mut *(@11)
            storage_dead(@11)
            return
        }
        @10 := core::slice::index::slice_end_index_len_fail(move (self@6), move (@9))
    }
    storage_dead(@13)
    storage_dead(@5)
    @3 := core::slice::index::slice_index_order_fail(move (rhs@7), move (self@6))
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::index_mut<'_0, T>(@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> &'_0 mut (Slice<T>)
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: &'_ mut (Slice<T>); // return
    let self@1: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: bool; // anonymous local
    let self@4: usize; // local
    let self@5: &'_ (core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]); // local
    let @6: !; // anonymous local
    let @7: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // anonymous local
    let exclusive_end@8: usize; // local
    let start@9: usize; // local
    let @10: usize; // anonymous local
    let self@11: usize; // local
    let self@12: bool; // local
    let @13: usize; // anonymous local

    storage_live(self@4)
    storage_live(@6)
    storage_live(@7)
    storage_live(exclusive_end@8)
    storage_live(start@9)
    storage_live(@10)
    storage_live(self@11)
    storage_live(self@12)
    storage_live(@13)
    storage_live(@3)
    storage_live(self@5)
    self@5 := &self@1
    storage_dead(self@5)
    self@4 := copy ((self@1).end)
    @13 := core::num::{usize}#11::MAX
    @3 := copy (self@4) == move (@13)
    if move (@3) {
    }
    else {
        storage_dead(@3)
        storage_live(@7)
        self@11 := move ((self@1).start)
        self@12 := move ((self@1).exhausted)
        exclusive_end@8 := copy (self@4) wrapping.+ const (1 : usize)
        storage_live(start@9)
        if copy (self@12) {
            start@9 := copy (exclusive_end@8)
        }
        else {
            start@9 := copy (self@11)
        }
        storage_live(@10)
        @10 := copy (start@9)
        @7 := core::ops::range::Range { start: move (@10), end: copy (exclusive_end@8) }
        storage_dead(@10)
        storage_dead(start@9)
        @0 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index_mut<'_, T>[@TraitClause0](move (@7), move (slice@2))
        storage_dead(@7)
        return
    }
    @6 := core::slice::index::slice_end_index_overflow_fail()
}

impl core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10<T> : core::slice::index::SliceIndex<core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>], Slice<T>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#5
    type Output = Slice<T>
    fn get<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get<'_0_0, T>[@TraitClause0]
    fn get_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_mut<'_0_0, T>[@TraitClause0]
    fn get_unchecked = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_unchecked<T>[@TraitClause0]
    fn get_unchecked_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::get_unchecked_mut<T>[@TraitClause0]
    fn index<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::index<'_0_0, T>[@TraitClause0]
    fn index_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10::index_mut<'_0_0, T>[@TraitClause0]
}

pub fn test_crate::slice_index_range<'_0>(@1: &'_0 (Slice<u8>)) -> &'_0 (Slice<u8>)
{
    let @0: &'_ (Slice<u8>); // return
    let slice@1: &'_ (Slice<u8>); // arg #1
    let @2: &'_ (Slice<u8>); // anonymous local
    let @3: &'_ (Slice<u8>); // anonymous local
    let @4: &'_ (Slice<u8>); // anonymous local
    let @5: core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]; // anonymous local

    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := &*(slice@1)
    storage_live(@5)
    @5 := core::ops::range::{core::ops::range::RangeInclusive<Idx>[@TraitClause0]}#7::new<usize>[core::marker::Sized<usize>](const (0 : usize), const (10 : usize))
    @3 := core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_, u8, core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]>[core::marker::Sized<u8>, core::marker::Sized<core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]>, core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::RangeInclusive<usize>[core::marker::Sized<usize>]}#10<u8>[core::marker::Sized<u8>]](move (@4), move (@5))
    storage_dead(@5)
    storage_dead(@4)
    @2 := &*(@3)
    @0 := &*(@2)
    storage_dead(@3)
    storage_dead(@2)
    return
}

#[lang_item("index")]
pub trait core::ops::index::Index<Self, Idx>
{
    type Output
    fn index<'_0> = core::ops::index::Index::index<'_0_0, Self, Idx>
}

pub fn core::ops::index::Index::index<'_0, Self, Idx>(@1: &'_0 (Self), @2: Idx) -> &'_0 (Self::Output)

impl core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}<T, I> : core::ops::index::Index<Slice<T>, I>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<I>,
    [@TraitClause2]: core::slice::index::SliceIndex<I, Slice<T>>,
{
    type Output = @TraitClause2::Output
    fn index<'_0> = core::slice::index::{impl core::ops::index::Index<I> for Slice<T>}::index<'_0_0, T, I>[@TraitClause0, @TraitClause1, @TraitClause2]
}

pub fn core::slice::index::SliceIndex::get<'_0, Self, T>(@1: Self, @2: &'_0 (T)) -> core::option::Option<&'_0 (Self::Output)>[core::marker::Sized<&'_0 (Self::Output)>]

pub fn core::slice::index::SliceIndex::get_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> core::option::Option<&'_0 mut (Self::Output)>[core::marker::Sized<&'_0 mut (Self::Output)>]

pub unsafe fn core::slice::index::SliceIndex::get_unchecked<Self, T>(@1: Self, @2: *const T) -> *const Self::Output

pub unsafe fn core::slice::index::SliceIndex::get_unchecked_mut<Self, T>(@1: Self, @2: *mut T) -> *mut Self::Output

pub fn core::slice::index::SliceIndex::index_mut<'_0, Self, T>(@1: Self, @2: &'_0 mut (T)) -> &'_0 mut (Self::Output)

impl core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#1 : core::slice::index::private_slice_index::Sealed<core::ops::range::Range<usize>[core::marker::Sized<usize>]>

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 (Slice<T>)) -> core::option::Option<&'_0 (Slice<T>)>[core::marker::Sized<&'_0 (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ (Slice<T>); // arg #2
    let @3: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (Slice<T>); // anonymous local
    let @10: *const Slice<T>; // anonymous local
    let @11: *const Slice<T>; // anonymous local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *const T; // anonymous local
    let @15: *const T; // anonymous local
    let @16: core::option::Option<&'_ (Slice<T>)>[core::marker::Sized<&'_ (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := core::option::Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) wrapping.- copy (rhs@5)
        @3 := core::option::Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant @1).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(@11)
            @11 := &raw const *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @15 := cast<*const Slice<T>, *const T>(copy (@11))
            @14 := copy (@15) offset copy (rhs@5)
            storage_dead(@15)
            @10 := @PtrFromPartsShared<'_, Slice<T>>(copy (@14), copy (new_len@6))
            storage_dead(@14)
            storage_dead(@11)
            @9 := &*(@10)
            @0 := core::option::Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := core::option::Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

pub fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_mut<'_0, T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: &'_0 mut (Slice<T>)) -> core::option::Option<&'_0 mut (Slice<T>)>[core::marker::Sized<&'_0 mut (Slice<T>)>]
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: &'_ mut (Slice<T>); // arg #2
    let @3: core::option::Option<usize>[core::marker::Sized<usize>]; // anonymous local
    let self@4: usize; // local
    let rhs@5: usize; // local
    let new_len@6: usize; // local
    let @7: bool; // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ mut (Slice<T>); // anonymous local
    let @10: *mut Slice<T>; // anonymous local
    let ptr@11: *mut Slice<T>; // local
    let @12: bool; // anonymous local
    let @13: usize; // anonymous local
    let @14: *mut T; // anonymous local
    let @15: *mut T; // anonymous local
    let @16: core::option::Option<&'_ mut (Slice<T>)>[core::marker::Sized<&'_ mut (Slice<T>)>]; // anonymous local

    storage_live(self@4)
    storage_live(rhs@5)
    storage_live(new_len@6)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(ptr@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@3)
    self@4 := copy ((self@1).end)
    rhs@5 := copy ((self@1).start)
    storage_live(@12)
    @12 := copy (self@4) < copy (rhs@5)
    if move (@12) {
        storage_dead(@12)
        storage_dead(@3)
        @16 := core::option::Option::None {  }
        @0 := move (@16)
    }
    else {
        storage_live(@13)
        @13 := copy (self@4) wrapping.- copy (rhs@5)
        @3 := core::option::Option::Some { 0: move (@13) }
        storage_dead(@13)
        storage_dead(@12)
        new_len@6 := copy ((@3 as variant @1).0)
        storage_live(@7)
        storage_live(@8)
        @8 := ptr_metadata(copy (slice@2))
        @7 := copy (self@4) <= move (@8)
        if move (@7) {
            storage_dead(@8)
            storage_live(@10)
            storage_live(ptr@11)
            ptr@11 := &raw mut *(slice@2)
            storage_live(@14)
            storage_live(@15)
            @15 := cast<*mut Slice<T>, *mut T>(copy (ptr@11))
            @14 := copy (@15) offset copy (rhs@5)
            storage_dead(@15)
            @10 := @PtrFromPartsMut<'_, Slice<T>>(copy (@14), copy (new_len@6))
            storage_dead(@14)
            storage_dead(ptr@11)
            @9 := &mut *(@10)
            @0 := core::option::Option::Some { 0: copy (@9) }
            storage_dead(@10)
            storage_dead(@3)
        }
        else {
            storage_dead(@8)
            storage_dead(@3)
            @16 := core::option::Option::None {  }
            @0 := move (@16)
        }
    }
    storage_dead(@7)
    return
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked<T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: *const Slice<T>) -> *const Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *const Slice<T>; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *const Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *const T; // anonymous local
    let @12: *const T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) wrapping.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @12 := cast<*const Slice<T>, *const T>(copy (slice@2))
    @11 := copy (@12) offset copy (offset@10)
    storage_dead(@12)
    @0 := @PtrFromPartsShared<'_, Slice<T>>(copy (@11), copy (new_len@8))
    storage_dead(@11)
    return
}

pub unsafe fn core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut<T>(@1: core::ops::range::Range<usize>[core::marker::Sized<usize>], @2: *mut Slice<T>) -> *mut Slice<T>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    let @0: *mut Slice<T>; // return
    let self@1: core::ops::range::Range<usize>[core::marker::Sized<usize>]; // arg #1
    let slice@2: *mut Slice<T>; // arg #2
    let @3: bool; // anonymous local
    let @4: (); // anonymous local
    let @5: usize; // anonymous local
    let @6: usize; // anonymous local
    let @7: usize; // anonymous local
    let new_len@8: usize; // local
    let @9: usize; // anonymous local
    let offset@10: usize; // local
    let @11: *mut T; // anonymous local
    let @12: *mut T; // anonymous local

    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(new_len@8)
    storage_live(offset@10)
    storage_live(@3)
    @3 := ub_checks<bool>
    if move (@3) {
        storage_live(@5)
        @5 := copy ((self@1).start)
        storage_live(@6)
        @6 := copy ((self@1).end)
        storage_live(@7)
        @7 := ptr_metadata(copy (slice@2))
        @4 := core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut::precondition_check(move (@5), move (@6), move (@7))
        storage_dead(@7)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@3)
    storage_live(@9)
    @9 := copy ((self@1).end)
    offset@10 := copy ((self@1).start)
    new_len@8 := move (@9) wrapping.- copy (offset@10)
    storage_dead(@9)
    storage_live(@11)
    storage_live(@12)
    @12 := cast<*mut Slice<T>, *mut T>(copy (slice@2))
    @11 := copy (@12) offset copy (offset@10)
    storage_dead(@12)
    @0 := @PtrFromPartsMut<'_, Slice<T>>(copy (@11), copy (new_len@8))
    storage_dead(@11)
    return
}

impl core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4<T> : core::slice::index::SliceIndex<core::ops::range::Range<usize>[core::marker::Sized<usize>], Slice<T>>
where
    [@TraitClause0]: core::marker::Sized<T>,
{
    parent_clause0 = core::slice::index::private_slice_index::{impl core::slice::index::private_slice_index::Sealed for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#1
    type Output = Slice<T>
    fn get<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get<'_0_0, T>[@TraitClause0]
    fn get_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_mut<'_0_0, T>[@TraitClause0]
    fn get_unchecked = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked<T>[@TraitClause0]
    fn get_unchecked_mut = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::get_unchecked_mut<T>[@TraitClause0]
    fn index<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index<'_0_0, T>[@TraitClause0]
    fn index_mut<'_0> = core::slice::index::{impl core::slice::index::SliceIndex<Slice<T>> for core::ops::range::Range<usize>[core::marker::Sized<usize>]}#4::index_mut<'_0_0, T>[@TraitClause0]
}



