# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

struct test_crate::DynableTrait::{vtable}<Ty0> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, Ty0> + _dyn : '_)),
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::DynableTrait
trait DynableTrait<Self, Self_DynableTraitType>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self_DynableTraitType>
    vtable: test_crate::DynableTrait::{vtable}<Self_DynableTraitType>
}

// Full name: test_crate::Trait
trait Trait<Self, Self_TraitType, Self_Clause2_DynableTraitType>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: MetaSized<Self_TraitType>
    parent_clause2 : [@TraitClause2]: DynableTrait<Self_TraitType, Self_Clause2_DynableTraitType>
    vtable: test_crate::Trait::{vtable}<Self_TraitType>
}

// Full name: test_crate::{impl Trait<(dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, ()> + _dyn : 'static), ()> for ()}
impl Trait<(dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, ()> + _dyn : 'static), ()> for () {
    parent_clause0 = MetaSized<()>
    parent_clause1 = MetaSized<(dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, ()> + _dyn : '_)>
    parent_clause2 = DynableTrait<(dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, ()> + _dyn : '_), ()>
    vtable: {impl Trait<(dyn exists<_dyn> [@TraitClause0]: DynableTrait<_dyn, ()> + _dyn : 'static), ()> for ()}::{vtable}
}



