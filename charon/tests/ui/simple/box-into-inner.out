# Final LLBC before serialization:

#[lang_item("String")]
pub opaque type alloc::string::String

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("global_alloc_ty")]
pub struct alloc::alloc::Global = {}

#[lang_item("NonNull")]
pub opaque type core::ptr::non_null::NonNull<T>

#[lang_item("ptr_unique")]
pub opaque type core::ptr::unique::Unique<T>

pub fn alloc::boxed::{impl core::ops::drop::Drop for alloc::boxed::Box<T>[@TraitClause0]}#8::drop<'_0, T, A>(@1: &'_0 mut (alloc::boxed::Box<T>[@TraitClause0]))
where
    [@TraitClause0]: core::marker::Sized<A>,

fn test_crate::into_inner(@1: alloc::boxed::Box<alloc::string::String>[core::marker::Sized<alloc::alloc::Global>])
{
    let @0: (); // return
    let b@1: alloc::boxed::Box<alloc::string::String>[core::marker::Sized<alloc::alloc::Global>]; // arg #1
    let _x@2: alloc::string::String; // local
    let @3: &'_ mut (alloc::boxed::Box<alloc::string::String>[core::marker::Sized<alloc::alloc::Global>]); // anonymous local
    let @4: (); // anonymous local
    let @5: *const alloc::string::String; // anonymous local
    let @6: *const alloc::string::String; // anonymous local

    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(_x@2)
    @6 := transmute<core::ptr::non_null::NonNull<alloc::string::String>, *const alloc::string::String>(copy ((*(b@1)).__unknown_field))
    _x@2 := move (*(@6))
    @0 := ()
    drop _x@2
    storage_dead(_x@2)
    @5 := transmute<core::ptr::non_null::NonNull<alloc::string::String>, *const alloc::string::String>(copy ((*(b@1)).__unknown_field))
    @3 := &mut b@1
    @4 := alloc::boxed::{impl core::ops::drop::Drop for alloc::boxed::Box<T>[@TraitClause0]}#8::drop<'_, alloc::string::String, alloc::alloc::Global>[core::marker::Sized<alloc::alloc::Global>](move (@3))
    @0 := ()
    return
}

#[lang_item("drop")]
pub trait core::ops::drop::Drop<Self>
{
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))

impl alloc::boxed::{impl core::ops::drop::Drop for alloc::boxed::Box<T>[@TraitClause0]}#8<T, A> : core::ops::drop::Drop<alloc::boxed::Box<T>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<A>,
{
    fn drop<'_0> = alloc::boxed::{impl core::ops::drop::Drop for alloc::boxed::Box<T>[@TraitClause0]}#8::drop<'_0_0, T, A>[@TraitClause0]
}



