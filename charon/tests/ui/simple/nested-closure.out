# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

struct test_crate::Foo<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
 =
{
  &'a (T),
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

struct test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::clone::Clone<T>,
 =
{
  &'_ (T),
}

struct test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'a, '_1, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::clone::Clone<T>,
 =
{
  &'_ (T),
}

struct test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'a, '_1, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::clone::Clone<T>,
 =
{
  &'_ (T),
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call<'a, '_1, T>(@1: &'_1 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]), @2: ()) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let @1: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let tupled_args@2: (); // arg #2
    let @3: &'_ (T); // anonymous local

    storage_live(@3)
    @3 := &*((*(@1)).0)
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure { 0: move (@3) }
    storage_dead(@3)
    return
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'a, '_1, '_2, T>(@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]), @2: (&'_1 (u32))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let @1: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let tupled_args@2: (&'_1 (u32)); // arg #2
    let _y@3: &'_ (u32); // local
    let @4: &'_ (T); // anonymous local

    storage_live(_y@3)
    _y@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := &*((*(@1)).0)
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure { 0: move (@4) }
    storage_dead(@4)
    return
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'a, '_1, '_2, T>(@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]), @2: (&'_1 (u32))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let @1: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let tupled_args@2: (&'_1 (u32)); // arg #2
    let _z@3: &'_ (u32); // local
    let @4: &'_ (T); // anonymous local

    storage_live(_z@3)
    _z@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := &*((*(@1)).0)
    @0 := @TraitClause1::clone<'_>(move (@4))
    storage_dead(@4)
    return
}

pub fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures<'a, 'b, T>(@1: &'a (&'b (T))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: &'_ (&'_ (T)); // arg #1
    let clo@2: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]; // local
    let @3: &'_ (T); // anonymous local
    let @4: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // anonymous local
    let @5: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // anonymous local
    let @6: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // anonymous local
    let @7: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // anonymous local
    let @8: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]); // anonymous local
    let @9: (); // anonymous local
    let @10: (&'_ (u32)); // anonymous local
    let @11: &'_ (u32); // anonymous local
    let @12: &'_ (u32); // anonymous local
    let @13: u32; // anonymous local
    let @14: (&'_ (u32)); // anonymous local
    let @15: &'_ (u32); // anonymous local
    let @16: &'_ (u32); // anonymous local
    let @17: u32; // anonymous local

    storage_live(clo@2)
    storage_live(@3)
    @3 := &*(*(x@1))
    clo@2 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure { 0: move (@3) }
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &clo@2
    storage_live(@9)
    @9 := ()
    @7 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call<'_>(move (@8), move (@9))
    @6 := &@7
    storage_dead(@9)
    storage_dead(@8)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    @13 := const (0 : u32)
    @12 := &@13
    @11 := &*(@12)
    @10 := (move (@11))
    @5 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_>(move (@6), move (@10))
    @4 := &@5
    storage_dead(@11)
    storage_dead(@10)
    storage_dead(@6)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    @17 := const (1 : u32)
    @16 := &@17
    @15 := &*(@16)
    @14 := (move (@15))
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_>(move (@4), move (@14))
    storage_dead(@15)
    storage_dead(@14)
    storage_dead(@4)
    storage_dead(clo@2)
    storage_dead(@17)
    storage_dead(@16)
    storage_dead(@13)
    storage_dead(@12)
    storage_dead(@7)
    storage_dead(@5)
    return
}

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> Self::parent_clause0::parent_clause0::Output

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnOnce<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call_once<'a, T>(@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1], @2: ()) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let state@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]; // arg #1
    let args@2: (); // arg #2
    let temp_ref@3: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &state@1
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, T>[@TraitClause0, @TraitClause1](move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnOnce<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}<'a, T> : core::ops::function::FnOnce<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1], (())>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<(())>
    parent_clause1 = core::marker::Tuple<(())>
    parent_clause2 = core::marker::Sized<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]>
    type Output = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
    fn call_once = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnOnce<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call_once
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnMut<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call_mut<'a, '_1, T>(@1: &'_1 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]), @2: ()) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let state@1: &'_1 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let args@2: (); // arg #2

    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, T>[@TraitClause0, @TraitClause1](move (state@1), move (args@2))
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnMut<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}<'a, T> : core::ops::function::FnMut<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1], (())>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnOnce<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}<'_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<(())>
    parent_clause2 = core::marker::Tuple<(())>
    fn call_mut<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnMut<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call_mut<'_>
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}<'a, T> : core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1], (())>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::FnMut<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}<'_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<(())>
    parent_clause2 = core::marker::Tuple<(())>
    fn call<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::{impl core::ops::function::Fn<(())> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]}::call<'_>
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_once<'a, '_1, T>(@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], @2: (&'_1 (u32))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let state@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // arg #1
    let args@2: (&'_1 (u32)); // arg #2
    let temp_ref@3: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &state@1
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, '_, T>[@TraitClause0, @TraitClause1](move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::FnOnce<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<((&'_ (u32)))>
    parent_clause1 = core::marker::Tuple<((&'_ (u32)))>
    parent_clause2 = core::marker::Sized<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]>
    type Output = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
    fn call_once = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_once
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_mut<'a, '_1, '_2, T>(@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]), @2: (&'_1 (u32))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // return
    let state@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let args@2: (&'_1 (u32)); // arg #2

    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, '_, T>[@TraitClause0, @TraitClause1](move (state@1), move (args@2))
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::FnMut<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'_, '_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<((&'_ (u32)))>
    parent_clause2 = core::marker::Tuple<((&'_ (u32)))>
    fn call_mut<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_mut<'_>
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'_, '_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<((&'_ (u32)))>
    parent_clause2 = core::marker::Tuple<((&'_ (u32)))>
    fn call<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_>
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_once<'a, '_1, T>(@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], @2: (&'_1 (u32))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]; // arg #1
    let args@2: (&'_1 (u32)); // arg #2
    let temp_ref@3: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &state@1
    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, '_, T>[@TraitClause0, @TraitClause1](move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::FnOnce<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = core::marker::Sized<((&'_ (u32)))>
    parent_clause1 = core::marker::Tuple<((&'_ (u32)))>
    parent_clause2 = core::marker::Sized<T>
    type Output = T
    fn call_once = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_once
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_mut<'a, '_1, '_2, T>(@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]), @2: (&'_1 (u32))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: &'_2 (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]); // arg #1
    let args@2: (&'_1 (u32)); // arg #2

    @0 := test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_, '_, '_, T>[@TraitClause0, @TraitClause1](move (state@1), move (args@2))
    return
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::FnMut<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnOnce<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'_, '_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<((&'_ (u32)))>
    parent_clause2 = core::marker::Tuple<((&'_ (u32)))>
    fn call_mut<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call_mut<'_>
}

impl test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'a, '_1, T> : core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1], ((&'_ (u32)))>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    parent_clause0 = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::FnMut<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}<'_, '_, T>[@TraitClause0, @TraitClause1]
    parent_clause1 = core::marker::Sized<((&'_ (u32)))>
    parent_clause2 = core::marker::Tuple<((&'_ (u32)))>
    fn call<'_0> = test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::{impl core::ops::function::Fn<((&'_ (u32)))> for test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]}::call<'_>
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



