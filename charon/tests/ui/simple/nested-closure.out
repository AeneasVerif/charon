# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

struct test_crate::Foo<'a, T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      T : 'a,
 =
{
  &'a (T),
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'a, '_1, '_2, '_3, T>(@1: &'_2 ((&'_3 (T))), @2: &'_1 (u32)) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let state@1: &'_2 ((&'_3 (T))); // arg #1
    let _z@2: &'_ (u32); // arg #2
    let @3: &'_ (T); // anonymous local

    storage_live(@3)
    @3 := &*((*(state@1)).0)
    @0 := @TraitClause1::clone<'_>(move (@3))
    storage_dead(@3)
    return
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'a, '_1, '_2, '_3, T>(@1: &'_2 ((&'_3 (T))), @2: &'_1 (u32)) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure; // return
    let state@1: &'_2 ((&'_3 (T))); // arg #1
    let _y@2: &'_ (u32); // arg #2
    let @3: &'_ (T); // anonymous local

    storage_live(@3)
    @3 := &*((*(state@1)).0)
    @0 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]} {move (@3)}
    storage_dead(@3)
    return
}

fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'a, '_1, '_2, T>(@1: &'_1 ((&'_2 (T)))) -> test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure; // return
    let state@1: &'_1 ((&'_2 (T))); // arg #1
    let @2: &'_ (T); // anonymous local

    storage_live(@2)
    @2 := &*((*(state@1)).0)
    @0 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure<'_, '_, T>[@TraitClause0, @TraitClause1]} {move (@2)}
    storage_dead(@2)
    return
}

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> Self::parent_clause0::parent_clause0::Output

pub fn test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures<'a, 'b, T>(@1: &'a (&'b (T))) -> T
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::clone::Clone<T>,
{
    let @0: T; // return
    let x@1: &'_ (&'_ (T)); // arg #1
    let clo@2: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure; // local
    let @3: &'_ (T); // anonymous local
    let @4: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure); // anonymous local
    let @5: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure; // anonymous local
    let @6: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure); // anonymous local
    let @7: test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure; // anonymous local
    let @8: &'_ (test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure); // anonymous local
    let @9: (); // anonymous local
    let @10: (&'_ (u32)); // anonymous local
    let @11: &'_ (u32); // anonymous local
    let @12: &'_ (u32); // anonymous local
    let @13: u32; // anonymous local
    let @14: (&'_ (u32)); // anonymous local
    let @15: &'_ (u32); // anonymous local
    let @16: &'_ (u32); // anonymous local
    let @17: u32; // anonymous local

    storage_live(clo@2)
    storage_live(@3)
    @3 := &*(*(x@1))
    clo@2 := {test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure<'_, T>[@TraitClause0, @TraitClause1]} {move (@3)}
    storage_dead(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &clo@2
    storage_live(@9)
    @9 := ()
    @7 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure, ()>::call<'_>(move (@8), move (@9))
    @6 := &@7
    storage_dead(@9)
    storage_dead(@8)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    @13 := const (0 : u32)
    @12 := &@13
    @11 := &*(@12)
    @10 := (move (@11))
    @5 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure, (&'_ (u32))>::call<'_>(move (@6), move (@10))
    @4 := &@5
    storage_dead(@11)
    storage_dead(@10)
    storage_dead(@6)
    storage_live(@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    @17 := const (1 : u32)
    @16 := &@17
    @15 := &*(@16)
    @14 := (move (@15))
    @0 := core::ops::function::Fn<test_crate::{test_crate::Foo<'a, T>[@TraitClause0]}::test_nested_closures::closure::closure::closure, (&'_ (u32))>::call<'_>(move (@4), move (@14))
    storage_dead(@15)
    storage_dead(@14)
    storage_dead(@4)
    storage_dead(clo@2)
    storage_dead(@17)
    storage_dead(@16)
    storage_dead(@13)
    storage_dead(@12)
    storage_dead(@7)
    storage_dead(@5)
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output



