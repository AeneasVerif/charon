# Final LLBC before serialization:

trait core::marker::Sized<Self>

trait test_crate::Trait<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Type>
    type Type
}

impl test_crate::{impl test_crate::Trait for ()} : test_crate::Trait<()>
{
    parent_clause0 = core::marker::Sized<()>
    type Type = ()
}

struct test_crate::HashMap<S>
  where
      [@TraitClause0]: core::marker::Sized<S>,
 =
{
  S,
}

fn test_crate::{test_crate::HashMap<S>[@TraitClause0]}#1::get<S, Q>(@1: test_crate::HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Q>,
    [@TraitClause2]: test_crate::Trait<Q>,
{
    let @0: (); // return
    let _x@1: test_crate::HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2
    let @3: (); // anonymous local

    @3 := ()
    @0 := move (@3)
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

fn test_crate::top_level_get<S, Q>(@1: test_crate::HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Q>,
    [@TraitClause2]: test_crate::Trait<Q>,
{
    let @0: (); // return
    let _x@1: test_crate::HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2
    let @3: (); // anonymous local

    @3 := ()
    @0 := move (@3)
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

fn test_crate::test(@1: test_crate::HashMap<()>[core::marker::Sized<()>])
{
    let @0: (); // return
    let map@1: test_crate::HashMap<()>[core::marker::Sized<()>]; // arg #1
    let @2: (); // anonymous local
    let @3: test_crate::HashMap<()>[core::marker::Sized<()>]; // anonymous local
    let @4: (); // anonymous local
    let @5: (); // anonymous local
    let @6: test_crate::HashMap<()>[core::marker::Sized<()>]; // anonymous local
    let @7: (); // anonymous local
    let @8: (); // anonymous local

    @3 := move (map@1)
    @4 := ()
    @2 := test_crate::top_level_get<(), ()>[core::marker::Sized<()>, core::marker::Sized<()>, test_crate::{impl test_crate::Trait for ()}](move (@3), move (@4))
    drop @4
    drop @3
    drop @2
    @6 := move (map@1)
    @7 := ()
    @5 := test_crate::{test_crate::HashMap<S>[@TraitClause0]}#1::get<(), ()>[core::marker::Sized<()>, core::marker::Sized<()>, test_crate::{impl test_crate::Trait for ()}](move (@6), move (@7))
    drop @7
    drop @6
    drop @5
    @8 := ()
    @0 := move (@8)
    @0 := ()
    return
}



