# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

pub trait test_crate::Trait<Self, Self_Type>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self_Type>
}

impl test_crate::{impl test_crate::Trait<()> for ()} : test_crate::Trait<(), ()>
{
    parent_clause0 = core::marker::Sized<()>
}

pub struct test_crate::HashMap<S>
  where
      [@TraitClause0]: core::marker::Sized<S>,
 =
{
  S,
}

pub fn test_crate::{test_crate::HashMap<S>[@TraitClause0]}#1::get<S, Q, Clause2_Type>(@1: test_crate::HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Q>,
    [@TraitClause2]: test_crate::Trait<Q, Clause2_Type>,
{
    let @0: (); // return
    let _x@1: test_crate::HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2

    @0 := ()
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

pub fn test_crate::top_level_get<S, Q, Clause2_Type>(@1: test_crate::HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Q>,
    [@TraitClause2]: test_crate::Trait<Q, Clause2_Type>,
{
    let @0: (); // return
    let _x@1: test_crate::HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2

    @0 := ()
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

pub fn test_crate::test1(@1: test_crate::HashMap<()>[core::marker::Sized<()>])
{
    let @0: (); // return
    let map@1: test_crate::HashMap<()>[core::marker::Sized<()>]; // arg #1
    let @2: (); // anonymous local
    let @3: test_crate::HashMap<()>[core::marker::Sized<()>]; // anonymous local
    let @4: (); // anonymous local

    @3 := move (map@1)
    @4 := ()
    @2 := test_crate::top_level_get<(), (), ()>[core::marker::Sized<()>, core::marker::Sized<()>, test_crate::{impl test_crate::Trait<()> for ()}](move (@3), move (@4))
    drop @4
    drop @3
    drop @2
    @0 := ()
    @0 := ()
    return
}

pub fn test_crate::test2(@1: test_crate::HashMap<()>[core::marker::Sized<()>])
{
    let @0: (); // return
    let map@1: test_crate::HashMap<()>[core::marker::Sized<()>]; // arg #1
    let @2: (); // anonymous local
    let @3: test_crate::HashMap<()>[core::marker::Sized<()>]; // anonymous local
    let @4: (); // anonymous local

    @3 := move (map@1)
    @4 := ()
    @2 := test_crate::{test_crate::HashMap<S>[@TraitClause0]}#1::get<(), (), ()>[core::marker::Sized<()>, core::marker::Sized<()>, test_crate::{impl test_crate::Trait<()> for ()}](move (@3), move (@4))
    drop @4
    drop @3
    drop @2
    @0 := ()
    @0 := ()
    return
}



