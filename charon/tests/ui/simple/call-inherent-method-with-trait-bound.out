# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: test_crate::Trait
pub trait Trait<Self, Self_Type>
{
    parent_clause0 : [@TraitClause0]: Sized<Self_Type>
}

// Full name: test_crate::{impl Trait<()> for ()}
impl Trait<()> for () {
    parent_clause0 = Sized<()>
}

// Full name: test_crate::HashMap
pub struct HashMap<S>
where
    [@TraitClause0]: Sized<S>,
{
  S,
}

// Full name: test_crate::{HashMap<S>[@TraitClause0]}::get
pub fn get<S, Q, Clause2_Type>(@1: HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: Sized<S>,
    [@TraitClause1]: Sized<Q>,
    [@TraitClause2]: Trait<Q, Clause2_Type>,
{
    let @0: (); // return
    let _x@1: HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2

    @0 := ()
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

// Full name: test_crate::top_level_get
pub fn top_level_get<S, Q, Clause2_Type>(@1: HashMap<S>[@TraitClause0], @2: Q)
where
    [@TraitClause0]: Sized<S>,
    [@TraitClause1]: Sized<Q>,
    [@TraitClause2]: Trait<Q, Clause2_Type>,
{
    let @0: (); // return
    let _x@1: HashMap<S>[@TraitClause0]; // arg #1
    let _k@2: Q; // arg #2

    @0 := ()
    drop _k@2
    drop _x@1
    @0 := ()
    return
}

// Full name: test_crate::test1
pub fn test1(@1: HashMap<()>[Sized<()>])
{
    let @0: (); // return
    let map@1: HashMap<()>[Sized<()>]; // arg #1
    let @2: (); // anonymous local
    let @3: HashMap<()>[Sized<()>]; // anonymous local
    let @4: (); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := move (map@1)
    storage_live(@4)
    @4 := ()
    @2 := top_level_get<(), (), ()>[Sized<()>, Sized<()>, {impl Trait<()> for ()}](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::test2
pub fn test2(@1: HashMap<()>[Sized<()>])
{
    let @0: (); // return
    let map@1: HashMap<()>[Sized<()>]; // arg #1
    let @2: (); // anonymous local
    let @3: HashMap<()>[Sized<()>]; // anonymous local
    let @4: (); // anonymous local

    storage_live(@2)
    storage_live(@3)
    @3 := move (map@1)
    storage_live(@4)
    @4 := ()
    @2 := get<(), (), ()>[Sized<()>, Sized<()>, {impl Trait<()> for ()}](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    @0 := ()
    return
}



