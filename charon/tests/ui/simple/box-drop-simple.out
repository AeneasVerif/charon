# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::alloc::layout::Layout
#[lang_item("alloc_layout")]
pub opaque type Layout

// Full name: core::alloc::layout::Layout::{impl Drop for Layout}
impl Drop for Layout {
    parent_clause0 = MetaSized<Layout>
    fn drop<'_0> = {impl Drop for Layout}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: core::alloc::layout::Layout::{impl Drop for Layout}::drop
fn {impl Drop for Layout}::drop<'_0>(@1: &'_0 mut (Layout))

// Full name: core::alloc::AllocError
pub struct AllocError {}

// Full name: core::alloc::AllocError::{impl Drop for AllocError}
impl Drop for AllocError {
    parent_clause0 = MetaSized<AllocError>
    fn drop<'_0> = {impl Drop for AllocError}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: core::alloc::AllocError::{impl Drop for AllocError}::drop
fn {impl Drop for AllocError}::drop<'_0>(@1: &'_0 mut (AllocError))

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: core::ptr::non_null::NonNull
#[lang_item("NonNull")]
pub opaque type NonNull<T>

// Full name: core::alloc::Allocator
pub trait Allocator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn allocate<'_0> = core::alloc::Allocator::allocate<'_0_0, Self>[Self]
    fn deallocate<'_0> = core::alloc::Allocator::deallocate<'_0_0, Self>[Self]
    vtable: core::alloc::Allocator::{vtable}
}

pub fn core::alloc::Allocator::allocate<'_0, Self>(@1: &'_0 (Self), @2: Layout) -> Result<NonNull<Slice<u8>>, AllocError>[Sized<NonNull<Slice<u8>>>, Sized<AllocError>]
where
    [@TraitClause0]: Allocator<Self>,

pub unsafe fn core::alloc::Allocator::deallocate<'_0, Self>(@1: &'_0 (Self), @2: NonNull<u8>, @3: Layout)
where
    [@TraitClause0]: Allocator<Self>,

#[lang_item("mem_drop")]
pub fn core::mem::drop<T>(@1: T)
where
    [@TraitClause0]: Sized<T>,

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::alloc::Global::{impl Drop for Global}
impl Drop for Global {
    parent_clause0 = MetaSized<Global>
    fn drop<'_0> = {impl Drop for Global}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: alloc::alloc::Global::{impl Drop for Global}::drop
fn {impl Drop for Global}::drop<'_0>(@1: &'_0 mut (Global))

// Full name: alloc::alloc::{impl Allocator for Global}::allocate
pub fn {impl Allocator for Global}::allocate<'_0>(@1: &'_0 (Global), @2: Layout) -> Result<NonNull<Slice<u8>>, AllocError>[Sized<NonNull<Slice<u8>>>, Sized<AllocError>]

// Full name: alloc::alloc::{impl Allocator for Global}::deallocate
pub unsafe fn {impl Allocator for Global}::deallocate<'_0>(@1: &'_0 (Global), @2: NonNull<u8>, @3: Layout)

// Full name: alloc::alloc::{impl Allocator for Global}
impl Allocator for Global {
    parent_clause0 = MetaSized<Global>
    fn allocate<'_0> = {impl Allocator for Global}::allocate<'_0_0>
    fn deallocate<'_0> = {impl Allocator for Global}::deallocate<'_0_0>
    vtable: {impl Allocator for Global}::{vtable}
}

// Full name: alloc::boxed::Box::{impl Drop for alloc::boxed::Box<T>[@TraitClause0]}::drop
fn {impl Drop for alloc::boxed::Box<T>[@TraitClause0]}::drop<'_0, T>(@1: &'_0 mut (alloc::boxed::Box<T>[@TraitClause0]))
where
    [@TraitClause0]: MetaSized<T>,

// Full name: alloc::boxed::Box::{impl Drop for alloc::boxed::Box<T>[@TraitClause0]}
impl<T> Drop for alloc::boxed::Box<T>[@TraitClause0]
where
    [@TraitClause0]: MetaSized<T>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T>[@TraitClause0]>
    fn drop<'_0> = {impl Drop for alloc::boxed::Box<T>[@TraitClause0]}::drop<'_0_0, T>[@TraitClause0]
    non-dyn-compatible
}

// Full name: test_crate::test_box_drop
fn test_box_drop()
{
    let @0: (); // return
    let b@1: alloc::boxed::Box<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]; // local
    let @2: (); // anonymous local
    let @3: alloc::boxed::Box<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]; // anonymous local

    storage_live(b@1)
    b@1 := @BoxNew<i32>[Sized<i32>](const (42 : i32))
    storage_live(@2)
    storage_live(@3)
    @3 := move (b@1)
    @2 := core::mem::drop<alloc::boxed::Box<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]>[Sized<alloc::boxed::Box<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]>](move (@3))
    storage_dead(@3)
    storage_dead(@2)
    @0 := ()
    storage_dead(b@1)
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local

    storage_live(@1)
    @1 := test_box_drop()
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



