# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0_1> = core::ops::drop::Drop::drop<'_0_1, Self>[Self]
    fn drop_in_place = core::ops::drop::Drop::drop_in_place<Self>
    vtable: core::ops::drop::Drop::{vtable}
}

fn core::ops::drop::Drop::drop_in_place<Self>(@1: *mut Self)

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::vec::Vec
#[lang_item("Vec")]
pub opaque type Vec<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<type_error("removed allocator parameter")>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Foo
struct Foo<T>
where
    [@TraitClause0]: Sized<T>,
{
  vec: Vec<T>[@TraitClause0, Sized<Global>],
}

// Full name: test_crate::{impl Drop for Foo<T>[@TraitClause0]}::drop
pub fn {impl Drop for Foo<T>[@TraitClause0]}::drop<'_0, T>(@1: &'_0 mut (Foo<T>[@TraitClause0]))
where
    [@TraitClause0]: Sized<T>,
{
    let @0: (); // return
    let self@1: &'_ mut (Foo<T>[@TraitClause0]); // arg #1

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::{impl Drop for Foo<T>[@TraitClause0]}::drop_in_place
fn {impl Drop for Foo<T>[@TraitClause0]}::drop_in_place<T>(@1: *mut Foo<T>[@TraitClause0])
where
    [@TraitClause0]: Sized<T>,

// Full name: test_crate::{impl Drop for Foo<T>[@TraitClause0]}
impl<T> Drop for Foo<T>[@TraitClause0]
where
    [@TraitClause0]: Sized<T>,
{
    parent_clause0 = MetaSized<Foo<T>[@TraitClause0]>
    fn drop<'_0_1> = {impl Drop for Foo<T>[@TraitClause0]}::drop<'_0_1, T>[@TraitClause0]
    fn drop_in_place = {impl Drop for Foo<T>[@TraitClause0]}::drop_in_place<T>[@TraitClause0]
    vtable: {impl Drop for Foo<T>[@TraitClause0]}::{vtable}<T>[@TraitClause0]
}

// Full name: test_crate::drop_foo
fn drop_foo(@1: Foo<u32>[Sized<u32>])
{
    let @0: (); // return
    let @1: Foo<u32>[Sized<u32>]; // arg #1

    @0 := ()
    @0 := ()
    drop[{impl Drop for Foo<T>[@TraitClause0]}<u32>[Sized<u32>]] @1
    return
}



