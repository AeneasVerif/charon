# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("Formatter")]
pub opaque type core::fmt::Formatter<'a>
  where
      'a : 'a,

#[lang_item("Result")]
pub enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


pub struct core::fmt::Error = {}

#[lang_item("Debug")]
pub trait core::fmt::Debug<Self>
{
    fn fmt<'_0, '_1, '_2> = core::fmt::Debug::fmt<'_0_0, '_0_1, '_0_2, Self>
}

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

#[lang_item("Send")]
pub trait core::marker::Send<Self>

#[lang_item("sync")]
pub trait core::marker::Sync<Self>

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("Ordering")]
pub enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


#[lang_item("partial_ord")]
pub trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Ord")]
pub trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

pub trait core::hash::Hasher<Self>
{
    fn finish<'_0> = core::hash::Hasher::finish<'_0_0, Self>
    fn write<'_0, '_1> = core::hash::Hasher::write<'_0_0, '_0_1, Self>
}

#[lang_item("Hash")]
pub trait core::hash::Hash<Self>
{
    fn hash<'_0, '_1, H, [@TraitClause0]: core::marker::Sized<H>, [@TraitClause1]: core::hash::Hasher<H>> = core::hash::Hash::hash<'_0_0, '_0_1, Self, H>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("unpin")]
pub trait core::marker::Unpin<Self>

#[lang_item("freeze")]
pub trait core::marker::Freeze<Self>

#[lang_item("pointee_trait")]
pub trait core::ptr::metadata::Pointee<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause1 : [@TraitClause1]: core::fmt::Debug<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause2 : [@TraitClause2]: core::marker::Copy<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause3 : [@TraitClause3]: core::marker::Send<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause4 : [@TraitClause4]: core::marker::Sync<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause5 : [@TraitClause5]: core::cmp::Ord<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause6 : [@TraitClause6]: core::hash::Hash<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause7 : [@TraitClause7]: core::marker::Unpin<core::ptr::metadata::Pointee<Self>::Metadata>
    parent_clause8 : [@TraitClause8]: core::marker::Freeze<core::ptr::metadata::Pointee<Self>::Metadata>
    type Metadata
}

pub fn core::ptr::const_ptr::{*const T}::to_raw_parts<T>(@1: *const T) -> (*const (), core::ptr::metadata::Pointee<T>::Metadata)

fn test_crate::empty_metadata()
{
    let @0: (); // return
    let @1: (*const (), ()); // anonymous local
    let @2: *const u32; // anonymous local
    let @3: &'_ (u32); // anonymous local
    let @4: u32; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    @4 := const (0 : u32)
    @3 := &@4
    @2 := &raw const *(@3)
    @1 := core::ptr::const_ptr::{*const T}::to_raw_parts<u32>(move (@2))
    storage_dead(@2)
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

fn test_crate::slice_metadata()
{
    let @0: (); // return
    let @1: (*const (), usize); // anonymous local
    let @2: *const Slice<u32>; // anonymous local
    let @3: *const Array<u32, 2 : usize>; // anonymous local
    let @4: &'_ (Array<u32, 2 : usize>); // anonymous local
    let @5: Array<u32, 2 : usize>; // anonymous local

    storage_live(@1)
    storage_live(@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    @5 := [const (0 : u32), const (1 : u32)]
    @4 := &@5
    @3 := &raw const *(@4)
    @2 := unsize_cast<*const Array<u32, 2 : usize>, *const Slice<u32>>(move (@3))
    storage_dead(@3)
    @1 := core::ptr::const_ptr::{*const T}::to_raw_parts<Slice<u32>>(move (@2))
    storage_dead(@2)
    storage_dead(@5)
    storage_dead(@4)
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

pub fn core::fmt::Debug::fmt<'_0, '_1, '_2, Self>(@1: &'_0 (Self), @2: &'_1 mut (core::fmt::Formatter<'_2>)) -> core::result::Result<(), core::fmt::Error>[core::marker::Sized<()>, core::marker::Sized<core::fmt::Error>]

pub fn core::hash::Hash::hash<'_0, '_1, Self, H>(@1: &'_0 (Self), @2: &'_1 mut (H))
where
    [@TraitClause0]: core::marker::Sized<H>,
    [@TraitClause1]: core::hash::Hasher<H>,

pub fn core::hash::Hasher::finish<'_0, Self>(@1: &'_0 (Self)) -> u64

pub fn core::hash::Hasher::write<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Slice<u8>))



