# Final LLBC before serialization:

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>

// Full name: core::clone::Clone
#[lang_item("clone")]
pub trait Clone<Self>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    fn clone<'_0> = clone<'_0_0, Self>[Self]
}

// Full name: core::clone::Clone::clone
#[lang_item("clone_fn")]
pub fn clone<'_0, Self>(@1: &'_0 (Self)) -> Self
where
    [@TraitClause0]: Clone<Self>,

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: Sized<Args>
    parent_clause1 : [@TraitClause1]: Tuple<Args>
    parent_clause2 : [@TraitClause2]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

struct test_crate::foo::closure::closure<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
  T,
}

struct test_crate::foo::closure<T>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
  T,
}

// Full name: test_crate::foo::{impl FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]}::call_once
fn {impl FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]}::call_once<T>(@1: test_crate::foo::closure<T>[@TraitClause0, @TraitClause1], @2: ()) -> test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    let @0: test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]; // return
    let @1: test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]; // arg #1
    let tupled_args@2: (); // arg #2

    @0 := test_crate::foo::closure::closure { 0: move ((@1).0) }
    return
}

// Full name: test_crate::foo
fn foo<T>(@1: T) -> test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    let @0: test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]; // return
    let x@1: T; // arg #1
    let f@2: test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]; // local
    let @3: test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]; // anonymous local
    let @4: (); // anonymous local

    storage_live(f@2)
    f@2 := test_crate::foo::closure { 0: move (x@1) }
    storage_live(@3)
    @3 := move (f@2)
    storage_live(@4)
    @4 := ()
    @0 := {impl FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]}::call_once<T>[@TraitClause0, @TraitClause1](move (@3), move (@4))
    storage_dead(@4)
    storage_dead(@3)
    storage_dead(f@2)
    return
}

// Full name: test_crate::foo::{impl FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]}
impl<T> FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Clone<T>,
{
    parent_clause0 = Sized<()>
    parent_clause1 = Tuple<()>
    parent_clause2 = Sized<test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]>
    type Output = test_crate::foo::closure::closure<T>[@TraitClause0, @TraitClause1]
    fn call_once = {impl FnOnce<()> for test_crate::foo::closure<T>[@TraitClause0, @TraitClause1]}::call_once<T>[@TraitClause0, @TraitClause1]
}



