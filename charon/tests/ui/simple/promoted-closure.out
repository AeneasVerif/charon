disabled backtrace
error[E9999]: Cannot convert constant back to an expression
              
              Context:
               - op: OpTy {
                  op: Indirect(
                      MemPlace {
                          ptr: a2<imm>,
                          meta: None,
                          misaligned: None,
                      },
                  ),
                  ty: {closure@tests/ui/simple/promoted-closure.rs:4:6: 4:14},
              }
  |
  = note: ⚠️ This is a bug in Hax's frontend.
          Please report this error to https://github.com/hacspec/hax/issues with some context (e.g. the current crate)!

error: Hax panicked when translating `Body { basic_blocks: BasicBlocks { basic_blocks: [BasicBlockData { statements: [StorageLive(_1), StorageLive(_2), _3 = const foo::promoted[0], _2 = copy _3, _1 = copy _2, _0 = copy _1, StorageDead(_2), StorageDead(_1)], terminator: Some(Terminator { source_info: SourceInfo { span: tests/ui/simple/promoted-closure.rs:5:2: 5:2 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }], cache: Cache { predecessors: OnceLock(<uninit>), switch_sources: OnceLock(<uninit>), reverse_postorder: OnceLock(<uninit>), dominators: OnceLock(<uninit>) } }, phase: Runtime(Optimized), pass_count: 1, source: MirSource { instance: Item(test_crate::foo), promoted: None }, source_scopes: [SourceScopeData { span: tests/ui/simple/promoted-closure.rs:3:1: 5:2 (#0), parent_scope: None, inlined: None, inlined_parent_scope: None, local_data: Set(SourceScopeLocalData { lint_root: HirId(test_crate::foo.0) }) }], coroutine: None, local_decls: [LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} Closure(test_crate::foo::{closure#0}, [i8, Binder { value: extern "RustCall" fn((u32,)) -> u32, bound_vars: [] }, ()]), user_ty: None, source_info: SourceInfo { span: tests/ui/simple/promoted-closure.rs:3:17: 3:45 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} Closure(test_crate::foo::{closure#0}, [i8, Binder { value: extern "RustCall" fn((u32,)) -> u32, bound_vars: [] }, ()]), user_ty: None, source_info: SourceInfo { span: tests/ui/simple/promoted-closure.rs:4:5: 4:16 (#0), scope: scope[0] } }, LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} Closure(test_crate::foo::{closure#0}, [i8, Binder { value: extern "RustCall" fn((u32,)) -> u32, bound_vars: [] }, ()]), user_ty: None, source_info: SourceInfo { span: tests/ui/simple/promoted-closure.rs:4:5: 4:16 (#0), scope: scope[0] } }, LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} Closure(test_crate::foo::{closure#0}, [i8, Binder { value: extern "RustCall" fn((u32,)) -> u32, bound_vars: [] }, ()]), user_ty: None, source_info: SourceInfo { span: tests/ui/simple/promoted-closure.rs:4:5: 4:16 (#0), scope: scope[0] } }], user_type_annotations: [], arg_count: 0, spread_arg: None, var_debug_info: [], span: tests/ui/simple/promoted-closure.rs:3:1: 5:2 (#0), required_consts: Some([]), mentioned_items: Some([]), is_polymorphic: false, injection_phase: None, tainted_by_errors: None, coverage_info_hi: None, function_coverage_info: None }`.
 --> tests/ui/simple/promoted-closure.rs:3:1
  |
3 | / pub fn foo() -> &'static impl Fn(u32) -> u32 {
4 | |     &|x: u32| x
5 | | }
  | |_^
  |

error: aborting due to 1 previous error

ERROR Code failed to compile
