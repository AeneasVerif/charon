# Final LLBC before serialization:

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

#[lang_item("r#fn")]
pub trait core::ops::function::Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnMut<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> Self::parent_clause0::parent_clause0::Output

fn test_crate::apply_to<'_0, impl Fn(u8, u8) -> u8>(@1: &'_0 (impl Fn(u8, u8) -> u8)) -> u8
where
    [@TraitClause0]: core::marker::Sized<impl Fn(u8, u8) -> u8>,
    [@TraitClause1]: core::ops::function::Fn<impl Fn(u8, u8) -> u8, (u8, u8)>,
    @TraitClause1::parent_clause0::parent_clause0::Output = u8,
{
    let @0: u8; // return
    let f@1: &'_ (impl Fn(u8, u8) -> u8); // arg #1
    let @2: &'_ (impl Fn(u8, u8) -> u8); // anonymous local
    let @3: (u8, u8); // anonymous local

    storage_live(@2)
    @2 := &*(f@1)
    storage_live(@3)
    @3 := (const (10 : u8), const (20 : u8))
    @0 := @TraitClause1::call<'_>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

fn test_crate::apply_to_mut<'_0, impl FnMut(u8, u8) -> u8>(@1: &'_0 mut (impl FnMut(u8, u8) -> u8)) -> u8
where
    [@TraitClause0]: core::marker::Sized<impl FnMut(u8, u8) -> u8>,
    [@TraitClause1]: core::ops::function::FnMut<impl FnMut(u8, u8) -> u8, (u8, u8)>,
    @TraitClause1::parent_clause0::Output = u8,
{
    let @0: u8; // return
    let f@1: &'_ mut (impl FnMut(u8, u8) -> u8); // arg #1
    let @2: &'_ mut (impl FnMut(u8, u8) -> u8); // anonymous local
    let @3: (u8, u8); // anonymous local

    storage_live(@2)
    @2 := &mut *(f@1)
    storage_live(@3)
    @3 := (const (10 : u8), const (20 : u8))
    @0 := @TraitClause1::call_mut<'_>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

fn test_crate::apply_to_once<impl FnOnce(u8, u8) -> u8>(@1: impl FnOnce(u8, u8) -> u8) -> u8
where
    [@TraitClause0]: core::marker::Sized<impl FnOnce(u8, u8) -> u8>,
    [@TraitClause1]: core::ops::function::FnOnce<impl FnOnce(u8, u8) -> u8, (u8, u8)>,
    @TraitClause1::Output = u8,
{
    let @0: u8; // return
    let f@1: impl FnOnce(u8, u8) -> u8; // arg #1
    let @2: impl FnOnce(u8, u8) -> u8; // anonymous local
    let @3: (u8, u8); // anonymous local

    storage_live(@2)
    @2 := move (f@1)
    storage_live(@3)
    @3 := (const (10 : u8), const (20 : u8))
    @0 := @TraitClause1::call_once(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop f@1
    return
}

struct test_crate::main::closure =
{
  &'_ (u8),
  &'_ (u8),
}

fn test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}::call<'_0>(@1: &'_0 (test_crate::main::closure), @2: (u8, u8)) -> u8
{
    let @0: u8; // return
    let @1: &'_ (test_crate::main::closure); // arg #1
    let tupled_args@2: (u8, u8); // arg #2
    let x@3: u8; // local
    let y@4: u8; // local
    let @5: u8; // anonymous local
    let @6: u8; // anonymous local
    let @7: u8; // anonymous local
    let @8: u8; // anonymous local
    let @9: u8; // anonymous local
    let @10: u8; // anonymous local

    storage_live(x@3)
    storage_live(y@4)
    x@3 := move ((tupled_args@2).0)
    y@4 := move ((tupled_args@2).1)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    @7 := copy (*((*(@1)).0))
    storage_live(@8)
    @8 := copy (x@3)
    @6 := copy (@7) + copy (@8)
    storage_dead(@8)
    storage_dead(@7)
    storage_live(@9)
    @9 := copy (y@4)
    @5 := copy (@6) + copy (@9)
    storage_dead(@9)
    storage_dead(@6)
    storage_live(@10)
    @10 := copy (*((*(@1)).1))
    @0 := copy (@5) + copy (@10)
    storage_dead(@10)
    storage_dead(@5)
    return
}

fn test_crate::main::{impl core::ops::function::FnOnce<((u8, u8))> for test_crate::main::closure}::call_once(@1: test_crate::main::closure, @2: (u8, u8)) -> u8
{
    let @0: u8; // return
    let state@1: test_crate::main::closure; // arg #1
    let args@2: (u8, u8); // arg #2
    let temp_ref@3: &'_ (test_crate::main::closure); // local

    storage_live(temp_ref@3)
    temp_ref@3 := &state@1
    @0 := test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}::call<'_>(move (temp_ref@3), move (args@2))
    drop state@1
    return
}

impl test_crate::main::{impl core::ops::function::FnOnce<((u8, u8))> for test_crate::main::closure} : core::ops::function::FnOnce<test_crate::main::closure, ((u8, u8))>
{
    parent_clause0 = core::marker::Sized<((u8, u8))>
    parent_clause1 = core::marker::Tuple<((u8, u8))>
    parent_clause2 = core::marker::Sized<u8>
    type Output = u8
    fn call_once = test_crate::main::{impl core::ops::function::FnOnce<((u8, u8))> for test_crate::main::closure}::call_once
}

fn test_crate::main::{impl core::ops::function::FnMut<((u8, u8))> for test_crate::main::closure}::call_mut<'_0>(@1: &'_0 (test_crate::main::closure), @2: (u8, u8)) -> u8
{
    let @0: u8; // return
    let state@1: &'_0 (test_crate::main::closure); // arg #1
    let args@2: (u8, u8); // arg #2

    @0 := test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}::call<'_>(move (state@1), move (args@2))
    return
}

impl test_crate::main::{impl core::ops::function::FnMut<((u8, u8))> for test_crate::main::closure} : core::ops::function::FnMut<test_crate::main::closure, ((u8, u8))>
{
    parent_clause0 = test_crate::main::{impl core::ops::function::FnOnce<((u8, u8))> for test_crate::main::closure}
    parent_clause1 = core::marker::Sized<((u8, u8))>
    parent_clause2 = core::marker::Tuple<((u8, u8))>
    fn call_mut<'_0> = test_crate::main::{impl core::ops::function::FnMut<((u8, u8))> for test_crate::main::closure}::call_mut<'_>
}

impl test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure} : core::ops::function::Fn<test_crate::main::closure, ((u8, u8))>
{
    parent_clause0 = test_crate::main::{impl core::ops::function::FnMut<((u8, u8))> for test_crate::main::closure}
    parent_clause1 = core::marker::Sized<((u8, u8))>
    parent_clause2 = core::marker::Tuple<((u8, u8))>
    fn call<'_0> = test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}::call<'_>
}

fn test_crate::main()
{
    let @0: (); // return
    let v@1: u8; // local
    let z@2: u8; // local
    let f@3: test_crate::main::closure; // local
    let @4: &'_ (u8); // anonymous local
    let @5: &'_ (u8); // anonymous local
    let @6: u8; // anonymous local
    let @7: &'_ (test_crate::main::closure); // anonymous local
    let @8: (u8, u8); // anonymous local
    let @9: u8; // anonymous local
    let @10: &'_ (test_crate::main::closure); // anonymous local
    let @11: &'_ (test_crate::main::closure); // anonymous local
    let @12: u8; // anonymous local
    let @13: &'_ mut (test_crate::main::closure); // anonymous local
    let @14: &'_ mut (test_crate::main::closure); // anonymous local
    let @15: u8; // anonymous local
    let @16: test_crate::main::closure; // anonymous local

    storage_live(v@1)
    v@1 := const (5 : u8)
    storage_live(z@2)
    z@2 := const (1 : u8)
    storage_live(f@3)
    storage_live(@4)
    @4 := &v@1
    storage_live(@5)
    @5 := &z@2
    f@3 := test_crate::main::closure { 0: move (@4), 1: move (@5) }
    storage_dead(@5)
    storage_dead(@4)
    storage_live(@6)
    storage_live(@7)
    @7 := &f@3
    storage_live(@8)
    @8 := (const (10 : u8), const (20 : u8))
    @6 := test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}::call<'_>(move (@7), move (@8))
    storage_dead(@8)
    storage_dead(@7)
    storage_dead(@6)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    @11 := &f@3
    @10 := &*(@11)
    @9 := test_crate::apply_to<'_, test_crate::main::closure>[core::marker::Sized<test_crate::main::closure>, test_crate::main::{impl core::ops::function::Fn<((u8, u8))> for test_crate::main::closure}](move (@10))
    storage_dead(@10)
    storage_dead(@11)
    storage_dead(@9)
    storage_live(@12)
    storage_live(@13)
    storage_live(@14)
    @14 := &mut f@3
    @13 := &two-phase-mut *(@14)
    @12 := test_crate::apply_to_mut<'_, test_crate::main::closure>[core::marker::Sized<test_crate::main::closure>, test_crate::main::{impl core::ops::function::FnMut<((u8, u8))> for test_crate::main::closure}](move (@13))
    storage_dead(@13)
    storage_dead(@14)
    storage_dead(@12)
    storage_live(@15)
    storage_live(@16)
    @16 := copy (f@3)
    @15 := test_crate::apply_to_once<test_crate::main::closure>[core::marker::Sized<test_crate::main::closure>, test_crate::main::{impl core::ops::function::FnOnce<((u8, u8))> for test_crate::main::closure}](move (@16))
    storage_dead(@16)
    storage_dead(@15)
    @0 := ()
    storage_dead(f@3)
    storage_dead(z@2)
    storage_dead(v@1)
    @0 := ()
    return
}



