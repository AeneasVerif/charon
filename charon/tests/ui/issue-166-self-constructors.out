# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Foo
enum Foo {
  A,
  B(usize),
}

// Full name: test_crate::Foo::{impl Drop for Foo}
impl Drop for Foo {
    parent_clause0 = MetaSized<Foo>
    fn drop<'_0> = {impl Drop for Foo}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Foo::{impl Drop for Foo}::drop
fn {impl Drop for Foo}::drop<'_0>(@1: &'_0 mut (Foo))
{
    let @0: (); // return
    let @1: *mut Foo; // arg #1
    let @2: &'_ mut (Foo); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    match *(@2) {
        Foo::A => {
        },
        _ => {
            return
        },
    }
    return
}

// Full name: test_crate::{Foo}::b
pub fn b() -> Foo
{
    let @0: Foo; // return

    @0 := Foo::B { 0: const (0 : usize) }
    return
}

// Full name: test_crate::Bar
struct Bar<'a> {
  r: &'a (i32),
}

// Full name: test_crate::{Bar<'a>}::new
fn new<'a>(@1: &'a (i32)) -> Bar<'a>
{
    let @0: Bar<'_>; // return
    let r@1: &'_ (i32); // arg #1
    let @2: &'_ (i32); // anonymous local

    storage_live(@2)
    @2 := copy (r@1)
    @0 := Bar { r: move (@2) }
    storage_dead(@2)
    return
}



