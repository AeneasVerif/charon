# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

fn UNIT_METADATA()
{
    let @0: (); // return

    @0 := ()
    return
}

const UNIT_METADATA: () = @Fun0()

// Full name: test_crate::Ops
trait Ops<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn ZERO = test_crate::Ops::ZERO<Self>[Self]
    fn ntt_multiply = test_crate::Ops::ntt_multiply<Self>[Self]
    non-dyn-compatible
}

fn test_crate::Ops::ZERO<Self>() -> Self
where
    [@TraitClause0]: Ops<Self>,

fn test_crate::Ops::ntt_multiply<Self>() -> Self
where
    [@TraitClause0]: Ops<Self>,

// Full name: test_crate::Portable
struct Portable {}

// Full name: test_crate::Portable::{impl Drop for Portable}
impl Drop for Portable {
    parent_clause0 = MetaSized<Portable>
    fn drop<'_0> = {impl Drop for Portable}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::Portable::{impl Drop for Portable}::drop
fn {impl Drop for Portable}::drop<'_0>(@1: &'_0 mut (Portable))
{
    let @0: (); // return
    let @1: *mut Portable; // arg #1
    let @2: &'_ mut (Portable); // anonymous local

    storage_live(@2)
    @0 := ()
    @2 := &mut *(@1)
    return
}

// Full name: test_crate::{impl Ops for Portable}::ZERO
fn {impl Ops for Portable}::ZERO() -> Portable
{
    let @0: Portable; // return

    @0 := Portable {  }
    return
}

fn test_crate::ntt_multiply() -> Portable
{
    let @0: Portable; // return

    @0 := {impl Ops for Portable}::ZERO()
    return
}

// Full name: test_crate::{impl Ops for Portable}::ntt_multiply
fn {impl Ops for Portable}::ntt_multiply() -> Portable
{
    let @0: Portable; // return

    @0 := test_crate::ntt_multiply()
    return
}

// Full name: test_crate::{impl Ops for Portable}
impl Ops for Portable {
    parent_clause0 = MetaSized<Portable>
    fn ZERO = {impl Ops for Portable}::ZERO
    fn ntt_multiply = {impl Ops for Portable}::ntt_multiply
    non-dyn-compatible
}



