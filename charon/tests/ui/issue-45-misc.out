# Final LLBC before serialization:

fn test_crate::map::closure<'_0>(@1: &'_0 mut (()), @2: (i32)) -> i32
{
    let @0: i32; // return
    let state@1: &'_0 mut (()); // arg #1
    let v@2: i32; // arg #2

    @0 := copy (v@2)
    return
}

trait core::marker::Sized<Self>

trait core::marker::Tuple<Self>

trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once : core::ops::function::FnOnce::call_once
}

trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut : core::ops::function::FnMut::call_mut
}

fn core::array::{Array<T, const N : usize>}#23::map<T, F, U, const N : usize>(@1: Array<T, const N : usize>, @2: F) -> Array<U, const N : usize>
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,
    // Local clauses:
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T)>,
    @TraitClause3::parent_clause0::Output = U,

fn test_crate::map(@1: Array<i32, 256 : usize>) -> Array<i32, 256 : usize>
{
    let @0: Array<i32, 256 : usize>; // return
    let x@1: Array<i32, 256 : usize>; // arg #1
    let @2: Array<i32, 256 : usize>; // anonymous local
    let @3: fn(i32) -> i32; // anonymous local

    @2 := copy (x@1)
    @3 := {test_crate::map::closure} {}
    @0 := core::array::{Array<T, const N : usize>}#23::map<i32, fn(i32) -> i32, i32, 256 : usize>[core::marker::Sized<fn(i32) -> i32>, core::marker::Sized<i32>, core::ops::function::FnMut<fn(i32) -> i32, (i32)>, core::marker::Sized<i32>](move (@2), move (@3))
    drop @3
    drop @2
    return
}

fn test_crate::array<const LEN : usize>() -> Array<u8, const LEN : usize>
{
    let @0: Array<u8, const LEN : usize>; // return

    @0 := @ArrayRepeat<'_, u8, const LEN : usize>(const (0 : u8))
    return
}

struct core::ops::range::Range<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
}

enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


enum core::result::Result<T, E>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::marker::Sized<E>,
 =
|  Ok(T)
|  Err(E)


opaque type core::array::iter::IntoIter<T, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<T>,

trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone : core::clone::Clone::clone
    fn clone_from : core::clone::Clone::clone_from
}

trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

trait core::num::nonzero::private::Sealed<Self>

trait core::num::nonzero::ZeroablePrimitive<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Copy<Self>
    parent_clause2 : [@TraitClause2]: core::num::nonzero::private::Sealed<Self>
    parent_clause3 : [@TraitClause3]: core::marker::Copy<Self::NonZeroInner>
    parent_clause4 : [@TraitClause4]: core::clone::Clone<Self::NonZeroInner>
    parent_clause5 : [@TraitClause5]: core::marker::Sized<Self::NonZeroInner>
    type NonZeroInner
}

opaque type core::num::nonzero::NonZero<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
      [@TraitClause1]: core::num::nonzero::ZeroablePrimitive<T>,

fn core::clone::impls::{impl core::clone::Clone for usize}#5::clone<'_0>(@1: &'_0 (usize)) -> usize

impl core::clone::impls::{impl core::clone::Clone for usize}#5 : core::clone::Clone<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    fn clone = core::clone::impls::{impl core::clone::Clone for usize}#5::clone
}

impl core::marker::{impl core::marker::Copy for usize}#37 : core::marker::Copy<usize>
{
    parent_clause0 = core::clone::impls::{impl core::clone::Clone for usize}#5
}

impl core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#25 : core::num::nonzero::private::Sealed<usize>

opaque type core::num::nonzero::private::NonZeroUsizeInner

fn core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26::clone<'_0>(@1: &'_0 (core::num::nonzero::private::NonZeroUsizeInner)) -> core::num::nonzero::private::NonZeroUsizeInner

impl core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26 : core::clone::Clone<core::num::nonzero::private::NonZeroUsizeInner>
{
    parent_clause0 = core::marker::Sized<core::num::nonzero::private::NonZeroUsizeInner>
    fn clone = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26::clone
}

impl core::num::nonzero::private::{impl core::marker::Copy for core::num::nonzero::private::NonZeroUsizeInner}#27 : core::marker::Copy<core::num::nonzero::private::NonZeroUsizeInner>
{
    parent_clause0 = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26
}

impl core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26 : core::num::nonzero::ZeroablePrimitive<usize>
{
    parent_clause0 = core::marker::Sized<usize>
    parent_clause1 = core::marker::{impl core::marker::Copy for usize}#37
    parent_clause2 = core::num::nonzero::{impl core::num::nonzero::private::Sealed for usize}#25
    parent_clause3 = core::num::nonzero::private::{impl core::marker::Copy for core::num::nonzero::private::NonZeroUsizeInner}#27
    parent_clause4 = core::num::nonzero::private::{impl core::clone::Clone for core::num::nonzero::private::NonZeroUsizeInner}#26
    parent_clause5 = core::marker::Sized<core::num::nonzero::private::NonZeroUsizeInner>
    type NonZeroInner = core::num::nonzero::private::NonZeroUsizeInner
}

opaque type core::iter::adapters::step_by::StepBy<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::chain::Chain<A, B>
  where
      [@TraitClause0]: core::marker::Sized<A>,
      [@TraitClause1]: core::marker::Sized<B>,

opaque type core::iter::adapters::zip::Zip<A, B>
  where
      [@TraitClause0]: core::marker::Sized<A>,
      [@TraitClause1]: core::marker::Sized<B>,

opaque type core::iter::adapters::map::Map<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

opaque type core::iter::adapters::filter::Filter<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

opaque type core::iter::adapters::filter_map::FilterMap<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

opaque type core::iter::adapters::enumerate::Enumerate<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::skip_while::SkipWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

opaque type core::iter::adapters::take_while::TakeWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

opaque type core::iter::adapters::map_while::MapWhile<I, P>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<P>,

opaque type core::iter::adapters::skip::Skip<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::take::Take<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::scan::Scan<I, St, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<St>,
      [@TraitClause2]: core::marker::Sized<F>,

opaque type core::iter::adapters::fuse::Fuse<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::inspect::Inspect<I, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,

trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual : core::ops::try_trait::FromResidual::from_residual
}

enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output : core::ops::try_trait::Try::from_output
    fn branch : core::ops::try_trait::Try::branch
}

trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause1::Residual = Self,
    Self::parent_clause1::Output = O,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::ops::try_trait::Try<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::FromResidual<Self::TryType, Self>
    parent_clause3 : [@TraitClause3]: core::marker::Sized<Self::TryType>
    type TryType
}

trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default : core::default::Default::default
}

trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq : core::cmp::PartialEq::eq
    fn ne : core::cmp::PartialEq::ne
}

trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
    fn assert_receiver_is_total_eq : core::cmp::Eq::assert_receiver_is_total_eq
}

enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp : core::cmp::PartialOrd::partial_cmp
    fn lt : core::cmp::PartialOrd::lt
    fn le : core::cmp::PartialOrd::le
    fn gt : core::cmp::PartialOrd::gt
    fn ge : core::cmp::PartialOrd::ge
}

trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp : core::cmp::Ord::cmp
    fn max : core::cmp::Ord::max
    fn min : core::cmp::Ord::min
    fn clamp : core::cmp::Ord::clamp
}

opaque type core::iter::adapters::rev::Rev<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,

opaque type core::iter::adapters::copied::Copied<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::cloned::Cloned<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

opaque type core::iter::adapters::cycle::Cycle<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,

trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next : core::iter::traits::iterator::Iterator::next
    fn next_chunk : core::iter::traits::iterator::Iterator::next_chunk
    fn size_hint : core::iter::traits::iterator::Iterator::size_hint
    fn count : core::iter::traits::iterator::Iterator::count
    fn last : core::iter::traits::iterator::Iterator::last
    fn advance_by : core::iter::traits::iterator::Iterator::advance_by
    fn nth : core::iter::traits::iterator::Iterator::nth
    fn step_by : core::iter::traits::iterator::Iterator::step_by
    fn chain : core::iter::traits::iterator::Iterator::chain
    fn zip : core::iter::traits::iterator::Iterator::zip
    fn intersperse : core::iter::traits::iterator::Iterator::intersperse
    fn intersperse_with : core::iter::traits::iterator::Iterator::intersperse_with
    fn map : core::iter::traits::iterator::Iterator::map
    fn for_each : core::iter::traits::iterator::Iterator::for_each
    fn filter : core::iter::traits::iterator::Iterator::filter
    fn filter_map : core::iter::traits::iterator::Iterator::filter_map
    fn enumerate : core::iter::traits::iterator::Iterator::enumerate
    fn peekable : core::iter::traits::iterator::Iterator::peekable
    fn skip_while : core::iter::traits::iterator::Iterator::skip_while
    fn take_while : core::iter::traits::iterator::Iterator::take_while
    fn map_while : core::iter::traits::iterator::Iterator::map_while
    fn skip : core::iter::traits::iterator::Iterator::skip
    fn take : core::iter::traits::iterator::Iterator::take
    fn scan : core::iter::traits::iterator::Iterator::scan
    fn flat_map : core::iter::traits::iterator::Iterator::flat_map
    fn flatten : core::iter::traits::iterator::Iterator::flatten
    fn map_windows : core::iter::traits::iterator::Iterator::map_windows
    fn fuse : core::iter::traits::iterator::Iterator::fuse
    fn inspect : core::iter::traits::iterator::Iterator::inspect
    fn by_ref : core::iter::traits::iterator::Iterator::by_ref
    fn collect : core::iter::traits::iterator::Iterator::collect
    fn try_collect : core::iter::traits::iterator::Iterator::try_collect
    fn collect_into : core::iter::traits::iterator::Iterator::collect_into
    fn partition : core::iter::traits::iterator::Iterator::partition
    fn partition_in_place : core::iter::traits::iterator::Iterator::partition_in_place
    fn is_partitioned : core::iter::traits::iterator::Iterator::is_partitioned
    fn try_fold : core::iter::traits::iterator::Iterator::try_fold
    fn try_for_each : core::iter::traits::iterator::Iterator::try_for_each
    fn fold : core::iter::traits::iterator::Iterator::fold
    fn reduce : core::iter::traits::iterator::Iterator::reduce
    fn try_reduce : core::iter::traits::iterator::Iterator::try_reduce
    fn all : core::iter::traits::iterator::Iterator::all
    fn any : core::iter::traits::iterator::Iterator::any
    fn find : core::iter::traits::iterator::Iterator::find
    fn find_map : core::iter::traits::iterator::Iterator::find_map
    fn try_find : core::iter::traits::iterator::Iterator::try_find
    fn position : core::iter::traits::iterator::Iterator::position
    fn rposition : core::iter::traits::iterator::Iterator::rposition
    fn max : core::iter::traits::iterator::Iterator::max
    fn min : core::iter::traits::iterator::Iterator::min
    fn max_by_key : core::iter::traits::iterator::Iterator::max_by_key
    fn max_by : core::iter::traits::iterator::Iterator::max_by
    fn min_by_key : core::iter::traits::iterator::Iterator::min_by_key
    fn min_by : core::iter::traits::iterator::Iterator::min_by
    fn rev : core::iter::traits::iterator::Iterator::rev
    fn unzip : core::iter::traits::iterator::Iterator::unzip
    fn copied : core::iter::traits::iterator::Iterator::copied
    fn cloned : core::iter::traits::iterator::Iterator::cloned
    fn cycle : core::iter::traits::iterator::Iterator::cycle
    fn array_chunks : core::iter::traits::iterator::Iterator::array_chunks
    fn sum : core::iter::traits::iterator::Iterator::sum
    fn product : core::iter::traits::iterator::Iterator::product
    fn cmp : core::iter::traits::iterator::Iterator::cmp
    fn cmp_by : core::iter::traits::iterator::Iterator::cmp_by
    fn partial_cmp : core::iter::traits::iterator::Iterator::partial_cmp
    fn partial_cmp_by : core::iter::traits::iterator::Iterator::partial_cmp_by
    fn eq : core::iter::traits::iterator::Iterator::eq
    fn eq_by : core::iter::traits::iterator::Iterator::eq_by
    fn ne : core::iter::traits::iterator::Iterator::ne
    fn lt : core::iter::traits::iterator::Iterator::lt
    fn le : core::iter::traits::iterator::Iterator::le
    fn gt : core::iter::traits::iterator::Iterator::gt
    fn ge : core::iter::traits::iterator::Iterator::ge
    fn is_sorted : core::iter::traits::iterator::Iterator::is_sorted
    fn is_sorted_by : core::iter::traits::iterator::Iterator::is_sorted_by
    fn is_sorted_by_key : core::iter::traits::iterator::Iterator::is_sorted_by_key
    fn __iterator_get_unchecked : core::iter::traits::iterator::Iterator::__iterator_get_unchecked
}

trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause1::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter : core::iter::traits::collect::IntoIterator::into_iter
}

opaque type core::iter::adapters::intersperse::Intersperse<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::clone::Clone<@TraitClause1::Item>,

opaque type core::iter::adapters::intersperse::IntersperseWith<I, G>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<G>,
      [@TraitClause2]: core::iter::traits::iterator::Iterator<I>,

opaque type core::iter::adapters::peekable::Peekable<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

opaque type core::iter::adapters::flatten::FlatMap<I, U, F>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<U>,
      [@TraitClause2]: core::marker::Sized<F>,
      [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,

opaque type core::iter::adapters::flatten::Flatten<I>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
      [@TraitClause2]: core::iter::traits::collect::IntoIterator<@TraitClause1::Item>,

opaque type core::iter::adapters::map_windows::MapWindows<I, F, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::marker::Sized<F>,
      [@TraitClause2]: core::iter::traits::iterator::Iterator<I>,

trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter : core::iter::traits::collect::FromIterator::from_iter
}

trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend : core::iter::traits::collect::Extend::extend
    fn extend_one : core::iter::traits::collect::Extend::extend_one
    fn extend_reserve : core::iter::traits::collect::Extend::extend_reserve
    fn extend_one_unchecked : core::iter::traits::collect::Extend::extend_one_unchecked
}

trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back : core::iter::traits::double_ended::DoubleEndedIterator::next_back
    fn advance_back_by : core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by
    fn nth_back : core::iter::traits::double_ended::DoubleEndedIterator::nth_back
    fn try_rfold : core::iter::traits::double_ended::DoubleEndedIterator::try_rfold
    fn rfold : core::iter::traits::double_ended::DoubleEndedIterator::rfold
    fn rfind : core::iter::traits::double_ended::DoubleEndedIterator::rfind
}

trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn len : core::iter::traits::exact_size::ExactSizeIterator::len
    fn is_empty : core::iter::traits::exact_size::ExactSizeIterator::is_empty
}

opaque type core::iter::adapters::array_chunks::ArrayChunks<I, const N : usize>
  where
      [@TraitClause0]: core::marker::Sized<I>,
      [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum : core::iter::traits::accum::Sum::sum
}

trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product : core::iter::traits::accum::Product::product
}

trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
    fn size : core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size
}

fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter<I>(@1: I) -> I
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

impl<I> core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause1
    parent_clause2 = @TraitClause0
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1::into_iter
}

trait core::iter::range::Step<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<Self>
    parent_clause2 : [@TraitClause2]: core::cmp::PartialOrd<Self, Self>
    fn steps_between : core::iter::range::Step::steps_between
    fn forward_checked : core::iter::range::Step::forward_checked
    fn backward_checked : core::iter::range::Step::backward_checked
    fn forward : core::iter::range::Step::forward
    fn forward_unchecked : core::iter::range::Step::forward_unchecked
    fn backward : core::iter::range::Step::backward
    fn backward_unchecked : core::iter::range::Step::backward_unchecked
}

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0])) -> core::option::Option<A>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::size_hint<'_0, A>(@1: &'_0 (core::ops::range::Range<A>[@TraitClause0])) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::count<A>(@1: core::ops::range::Range<A>[@TraitClause0]) -> usize
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::last<A>(@1: core::ops::range::Range<A>[@TraitClause0]) -> core::option::Option<A>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::advance_by<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0]), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::nth<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0]), @2: usize) -> core::option::Option<A>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::max<A>(@1: core::ops::range::Range<A>[@TraitClause0]) -> core::option::Option<A>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
    // Local clauses:
    [@TraitClause2]: core::cmp::Ord<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::min<A>(@1: core::ops::range::Range<A>[@TraitClause0]) -> core::option::Option<A>[@TraitClause0]
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
    // Local clauses:
    [@TraitClause2]: core::cmp::Ord<A>,

fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::is_sorted<A>(@1: core::ops::range::Range<A>[@TraitClause0]) -> bool
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

unsafe fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::__iterator_get_unchecked<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0]), @2: usize) -> core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<A>[@TraitClause0, @TraitClause1]::Item
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
    // Local clauses:
    [@TraitClause2]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<core::ops::range::Range<A>[@TraitClause0]>,

impl<A> core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<A> : core::iter::traits::iterator::Iterator<core::ops::range::Range<A>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
{
    parent_clause0 = @TraitClause0
    type Item = A
    fn next = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next
    fn size_hint = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::size_hint
    fn count = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::count
    fn last = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::last
    fn advance_by = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::advance_by
    fn nth = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::nth
    fn max = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::max
    fn min = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::min
    fn is_sorted = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::is_sorted
    fn __iterator_get_unchecked = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::__iterator_get_unchecked
}

fn core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0>(@1: &'_0 (u8)) -> u8

impl core::clone::impls::{impl core::clone::Clone for u8}#6 : core::clone::Clone<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    fn clone = core::clone::impls::{impl core::clone::Clone for u8}#6::clone
}

fn core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

fn core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::ne<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22 : core::cmp::PartialEq<u8, u8>
{
    fn eq = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq
    fn ne = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::ne
}

fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::partial_cmp<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::lt<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::le<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::gt<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::ge<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60 : core::cmp::PartialOrd<u8, u8>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22
    fn partial_cmp = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::partial_cmp
    fn lt = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::lt
    fn le = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::le
    fn gt = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::gt
    fn ge = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::ge
}

fn core::iter::range::{impl core::iter::range::Step for u8}#35::steps_between<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> core::option::Option<usize>[core::marker::Sized<usize>]

fn core::iter::range::{impl core::iter::range::Step for u8}#35::forward_checked(@1: u8, @2: usize) -> core::option::Option<u8>[core::marker::Sized<u8>]

fn core::iter::range::{impl core::iter::range::Step for u8}#35::backward_checked(@1: u8, @2: usize) -> core::option::Option<u8>[core::marker::Sized<u8>]

fn core::iter::range::{impl core::iter::range::Step for u8}#35::forward(@1: u8, @2: usize) -> u8

unsafe fn core::iter::range::{impl core::iter::range::Step for u8}#35::forward_unchecked(@1: u8, @2: usize) -> u8

fn core::iter::range::{impl core::iter::range::Step for u8}#35::backward(@1: u8, @2: usize) -> u8

unsafe fn core::iter::range::{impl core::iter::range::Step for u8}#35::backward_unchecked(@1: u8, @2: usize) -> u8

impl core::iter::range::{impl core::iter::range::Step for u8}#35 : core::iter::range::Step<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for u8}#6
    parent_clause2 = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60
    fn steps_between = core::iter::range::{impl core::iter::range::Step for u8}#35::steps_between
    fn forward_checked = core::iter::range::{impl core::iter::range::Step for u8}#35::forward_checked
    fn backward_checked = core::iter::range::{impl core::iter::range::Step for u8}#35::backward_checked
    fn forward = core::iter::range::{impl core::iter::range::Step for u8}#35::forward
    fn forward_unchecked = core::iter::range::{impl core::iter::range::Step for u8}#35::forward_unchecked
    fn backward = core::iter::range::{impl core::iter::range::Step for u8}#35::backward
    fn backward_unchecked = core::iter::range::{impl core::iter::range::Step for u8}#35::backward_unchecked
}

fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

fn test_crate::cbd(@1: Array<u8, 33 : usize>)
{
    let @0: (); // return
    let prf_input@1: Array<u8, 33 : usize>; // arg #1
    let @2: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // anonymous local
    let @3: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // anonymous local
    let iter@4: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // local
    let @5: (); // anonymous local
    let @6: (); // anonymous local
    let @7: core::option::Option<u8>[core::marker::Sized<u8>]; // anonymous local
    let @8: &'_ mut (core::ops::range::Range<u8>[core::marker::Sized<u8>]); // anonymous local
    let @9: &'_ mut (core::ops::range::Range<u8>[core::marker::Sized<u8>]); // anonymous local
    let i@10: u8; // local
    let @11: u8; // anonymous local
    let @12: usize; // anonymous local
    let @13: (); // anonymous local
    let @14: (); // anonymous local
    let @15: (); // anonymous local
    let @16: &'_ mut (Array<u8, 33 : usize>); // anonymous local
    let @17: &'_ mut (u8); // anonymous local

    @3 := core::ops::range::Range { start: const (0 : u8), end: const (3 : u8) }
    @2 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}#1<core::ops::range::Range<u8>[core::marker::Sized<u8>]>[core::marker::Sized<core::ops::range::Range<u8>[core::marker::Sized<u8>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<u8>[core::marker::Sized<u8>, core::iter::range::{impl core::iter::range::Step for u8}#35]]::into_iter(move (@3))
    drop @3
    @fake_read(@2)
    iter@4 := move (@2)
    loop {
        @9 := &mut iter@4
        @8 := &two-phase-mut *(@9)
        @7 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<u8>[core::marker::Sized<u8>, core::iter::range::{impl core::iter::range::Step for u8}#35]::next(move (@8))
        drop @8
        @fake_read(@7)
        match @7 {
            0 => {
                break 0
            },
            1 => {
                i@10 := copy ((@7 as variant @1).0)
                @11 := copy (i@10)
                @12 := const (0 : usize)
                @16 := &mut prf_input@1
                @17 := @ArrayIndexMut<'_, u8, 33 : usize>(move (@16), copy (@12))
                *(@17) := move (@11)
                drop @11
                drop @12
                @14 := ()
                @6 := move (@14)
                drop i@10
                drop @9
                drop @7
                drop @6
                @15 := ()
                @5 := move (@15)
                continue 0
            },
        }
    }
    @13 := ()
    @0 := move (@13)
    drop @9
    drop @7
    drop @6
    drop iter@4
    drop @2
    @0 := ()
    return
}

enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

fn core::slice::{Slice<T>}::len<'_0, T>(@1: &'_0 (Slice<T>)) -> usize
where
    // Inherited clauses:
    [@TraitClause0]: core::marker::Sized<T>,

fn test_crate::select<'_0, '_1>(@1: &'_0 (Slice<u8>), @2: &'_1 (Slice<u8>))
{
    let @0: (); // return
    let lhs@1: &'_ (Slice<u8>); // arg #1
    let rhs@2: &'_ (Slice<u8>); // arg #2
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: (); // anonymous local
    let @6: (&'_ (usize), &'_ (usize)); // anonymous local
    let @7: &'_ (usize); // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (Slice<u8>); // anonymous local
    let @10: &'_ (usize); // anonymous local
    let @11: usize; // anonymous local
    let @12: &'_ (Slice<u8>); // anonymous local
    let left_val@13: &'_ (usize); // local
    let right_val@14: &'_ (usize); // local
    let @15: bool; // anonymous local
    let @16: usize; // anonymous local
    let @17: usize; // anonymous local
    let kind@18: core::panicking::AssertKind; // local
    let @19: core::panicking::AssertKind; // anonymous local
    let @20: &'_ (usize); // anonymous local
    let @21: &'_ (usize); // anonymous local
    let @22: &'_ (usize); // anonymous local
    let @23: &'_ (usize); // anonymous local
    let @24: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local
    let @25: (); // anonymous local
    let @26: (); // anonymous local
    let @27: (); // anonymous local
    let @28: (); // anonymous local

    @4 := const (false)
    if move (@4) {
        @9 := &*(lhs@1)
        @8 := core::slice::{Slice<T>}::len<u8>[core::marker::Sized<u8>](move (@9))
        drop @9
        @7 := &@8
        @12 := &*(rhs@2)
        @11 := core::slice::{Slice<T>}::len<u8>[core::marker::Sized<u8>](move (@12))
        drop @12
        @10 := &@11
        @6 := (move (@7), move (@10))
        drop @10
        drop @7
        @fake_read(@6)
        left_val@13 := copy ((@6).0)
        right_val@14 := copy ((@6).1)
        @16 := copy (*(left_val@13))
        @17 := copy (*(right_val@14))
        @15 := move (@16) == move (@17)
        if move (@15) {
            drop @17
            drop @16
            @27 := ()
            @5 := move (@27)
            drop @15
            drop right_val@14
            drop left_val@13
            drop @11
            drop @8
            drop @6
            drop @5
            @28 := ()
            @3 := move (@28)
        }
        else {
            drop @17
            drop @16
            kind@18 := core::panicking::AssertKind::Eq {  }
            @fake_read(kind@18)
            @19 := move (kind@18)
            @21 := &*(left_val@13)
            @20 := &*(@21)
            @23 := &*(right_val@14)
            @22 := &*(@23)
            @24 := core::option::Option::None {  }
            panic(core::panicking::assert_failed)
        }
    }
    else {
        @25 := ()
        @3 := move (@25)
    }
    drop @4
    drop @3
    @26 := ()
    @0 := move (@26)
    @0 := ()
    return
}

fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

fn core::iter::range::Step::steps_between<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::option::Option<usize>[core::marker::Sized<usize>]

fn core::iter::range::Step::forward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

fn core::iter::range::Step::forward<Self>(@1: Self, @2: usize) -> Self

unsafe fn core::iter::range::Step::forward_unchecked<Self>(@1: Self, @2: usize) -> Self

fn core::iter::range::Step::backward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

fn core::iter::range::Step::backward<Self>(@1: Self, @2: usize) -> Self

unsafe fn core::iter::range::Step::backward_unchecked<Self>(@1: Self, @2: usize) -> Self

fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

fn core::clone::Clone::clone_from<'_0, '_1, Self>(@1: &'_0 mut (Self), @2: &'_1 (Self))

fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

fn core::cmp::PartialOrd::lt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::le<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::gt<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialOrd::ge<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::cmp::PartialEq::ne<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

fn core::iter::traits::iterator::Iterator::next_chunk<'_0, Self, const N : usize>(@1: &'_0 mut (Self)) -> core::result::Result<Array<Self::Item, const N : usize>, core::array::iter::IntoIter<Self::Item, const N : usize>[Self::parent_clause0]>[core::marker::Sized<Array<Self::Item, const N : usize>>, core::marker::Sized<core::array::iter::IntoIter<Self::Item, const N : usize>[Self::parent_clause0]>]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::step_by<Self>(@1: Self, @2: usize) -> core::iter::adapters::step_by::StepBy<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::chain<Self, U>(@1: Self, @2: U) -> core::iter::adapters::chain::Chain<Self, @TraitClause2::IntoIter>[@TraitClause1, @TraitClause2::parent_clause2]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,
    @TraitClause2::Item = Self::Item,

fn core::iter::traits::iterator::Iterator::zip<Self, U>(@1: Self, @2: U) -> core::iter::adapters::zip::Zip<Self, @TraitClause2::IntoIter>[@TraitClause1, @TraitClause2::parent_clause2]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::collect::IntoIterator<U>,

fn core::iter::traits::iterator::Iterator::intersperse<Self>(@1: Self, @2: Self::Item) -> core::iter::adapters::intersperse::Intersperse<Self>[@TraitClause0, Self, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::clone::Clone<Self::Item>,

fn core::iter::traits::iterator::Iterator::intersperse_with<Self, G>(@1: Self, @2: G) -> core::iter::adapters::intersperse::IntersperseWith<Self, G>[@TraitClause1, @TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<G>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<G, ()>,
    @TraitClause2::parent_clause0::Output = Self::Item,

fn core::iter::traits::iterator::Iterator::map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::map::Map<Self, F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = B,

fn core::iter::traits::iterator::Iterator::for_each<Self, F>(@1: Self, @2: F)
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = (),

fn core::iter::traits::iterator::Iterator::filter<Self, P>(@1: Self, @2: P) -> core::iter::adapters::filter::Filter<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::filter_map<Self, B, F>(@1: Self, @2: F) -> core::iter::adapters::filter_map::FilterMap<Self, F>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

fn core::iter::traits::iterator::Iterator::enumerate<Self>(@1: Self) -> core::iter::adapters::enumerate::Enumerate<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::peekable<Self>(@1: Self) -> core::iter::adapters::peekable::Peekable<Self>[@TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::skip_while<Self, P>(@1: Self, @2: P) -> core::iter::adapters::skip_while::SkipWhile<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::take_while<Self, P>(@1: Self, @2: P) -> core::iter::adapters::take_while::TakeWhile<Self, P>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::map_while<Self, B, P>(@1: Self, @2: P) -> core::iter::adapters::map_while::MapWhile<Self, P>[@TraitClause2, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

fn core::iter::traits::iterator::Iterator::skip<Self>(@1: Self, @2: usize) -> core::iter::adapters::skip::Skip<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::take<Self>(@1: Self, @2: usize) -> core::iter::adapters::take::Take<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::scan<Self, St, B, F>(@1: Self, @2: St, @3: F) -> core::iter::adapters::scan::Scan<Self, St, F>[@TraitClause3, @TraitClause0, @TraitClause2]
where
    [@TraitClause0]: core::marker::Sized<St>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<F>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 mut (St), Self::Item)>,
    for<'_1_0> @TraitClause4::parent_clause0::Output = core::option::Option<B>[@TraitClause1],

fn core::iter::traits::iterator::Iterator::flat_map<Self, U, F>(@1: Self, @2: F) -> core::iter::adapters::flatten::FlatMap<Self, U, F>[@TraitClause2, @TraitClause0, @TraitClause1, @TraitClause3]
where
    [@TraitClause0]: core::marker::Sized<U>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<U>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause4::parent_clause0::Output = U,

fn core::iter::traits::iterator::Iterator::flatten<Self>(@1: Self) -> core::iter::adapters::flatten::Flatten<Self>[@TraitClause0, Self, @TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<Self::Item>,

fn core::iter::traits::iterator::Iterator::map_windows<Self, F, R, const N : usize>(@1: Self, @2: F) -> core::iter::adapters::map_windows::MapWindows<Self, F, const N : usize>[@TraitClause2, @TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (Array<Self::Item, const N : usize>))>,
    for<'_1_0> @TraitClause3::parent_clause0::Output = R,

fn core::iter::traits::iterator::Iterator::fuse<Self>(@1: Self) -> core::iter::adapters::fuse::Fuse<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::inspect<Self, F>(@1: Self, @2: F) -> core::iter::adapters::inspect::Inspect<Self, F>[@TraitClause1, @TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = (),

fn core::iter::traits::iterator::Iterator::by_ref<'_0, Self>(@1: &'_0 mut (Self)) -> &'_0 mut (Self)
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::collect<Self, B>(@1: Self) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::iter::traits::collect::FromIterator<B, Self::Item>,
    [@TraitClause2]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::try_collect<'_0, Self, B>(@1: &'_0 mut (Self)) -> @TraitClause3::TryType
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::try_trait::Try<Self::Item>,
    [@TraitClause3]: core::ops::try_trait::Residual<@TraitClause2::Residual, B>,
    [@TraitClause4]: core::iter::traits::collect::FromIterator<B, @TraitClause2::Output>,

fn core::iter::traits::iterator::Iterator::collect_into<'_0, Self, E>(@1: Self, @2: &'_0 mut (E)) -> &'_0 mut (E)
where
    [@TraitClause0]: core::marker::Sized<E>,
    [@TraitClause1]: core::iter::traits::collect::Extend<E, Self::Item>,
    [@TraitClause2]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::partition<Self, B, F>(@1: Self, @2: F) -> (B, B)
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::default::Default<B>,
    [@TraitClause4]: core::iter::traits::collect::Extend<B, Self::Item>,
    [@TraitClause5]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause5::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::partition_in_place<'a, Self, T, P>(@1: Self, @2: P) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<P>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,
    [@TraitClause4]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (T))>,
    T : 'a,
    Self::Item = &'a mut (T),
    for<'_1_0> @TraitClause4::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::is_partitioned<Self, P>(@1: Self, @2: P) -> bool
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::try_fold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = B,

fn core::iter::traits::iterator::Iterator::try_for_each<'_0, Self, F, R>(@1: &'_0 mut (Self), @2: F) -> R
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::ops::try_trait::Try<R>,
    @TraitClause3::parent_clause0::Output = R,
    @TraitClause4::Output = (),

fn core::iter::traits::iterator::Iterator::fold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::Item)>,
    @TraitClause3::parent_clause0::Output = B,

fn core::iter::traits::iterator::Iterator::reduce<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item, Self::Item)>,
    @TraitClause2::parent_clause0::Output = Self::Item,

fn core::iter::traits::iterator::Iterator::try_reduce<'_0, Self, R, impl FnMut(Self::Item, Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(Self::Item, Self::Item) -> R) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<R>,
    [@TraitClause1]: core::marker::Sized<impl FnMut(Self::Item, Self::Item) -> R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::try_trait::Try<R>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>,
    [@TraitClause5]: core::ops::function::FnMut<impl FnMut(Self::Item, Self::Item) -> R, (Self::Item, Self::Item)>,
    @TraitClause3::Output = Self::Item,
    @TraitClause5::parent_clause0::Output = R,

fn core::iter::traits::iterator::Iterator::all<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::any<'_0, Self, F>(@1: &'_0 mut (Self), @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::find<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::find_map<'_0, Self, B, F>(@1: &'_0 mut (Self), @2: F) -> core::option::Option<B>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    @TraitClause3::parent_clause0::Output = core::option::Option<B>[@TraitClause0],

fn core::iter::traits::iterator::Iterator::try_find<'_0, Self, R, impl FnMut(&Self::Item) -> R>(@1: &'_0 mut (Self), @2: impl FnMut(&Self::Item) -> R) -> @TraitClause4::TryType
where
    [@TraitClause0]: core::marker::Sized<R>,
    [@TraitClause1]: core::marker::Sized<impl FnMut(&Self::Item) -> R>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::try_trait::Try<R>,
    [@TraitClause4]: core::ops::try_trait::Residual<@TraitClause3::Residual, core::option::Option<Self::Item>[Self::parent_clause0]>,
    [@TraitClause5]: for<'_1_0> core::ops::function::FnMut<impl FnMut(&Self::Item) -> R, (&'_1_0 (Self::Item))>,
    @TraitClause3::Output = bool,
    for<'_1_0> @TraitClause5::parent_clause0::Output = R,

fn core::iter::traits::iterator::Iterator::position<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::ops::function::FnMut<P, (Self::Item)>,
    @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::rposition<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<usize>[core::marker::Sized<usize>]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::ops::function::FnMut<P, (Self::Item)>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::exact_size::ExactSizeIterator<Self>,
    [@TraitClause4]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,
    @TraitClause1::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::max_by_key<Self, B, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::cmp::Ord<B>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause4::parent_clause0::Output = B,

fn core::iter::traits::iterator::Iterator::max_by<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0, '_1_1> core::ops::function::FnMut<F, (&'_1_0 (Self::Item), &'_1_1 (Self::Item))>,
    for<'_1_0, '_1_1> @TraitClause2::parent_clause0::Output = core::cmp::Ordering,

fn core::iter::traits::iterator::Iterator::min_by_key<Self, B, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::cmp::Ord<B>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: for<'_1_0> core::ops::function::FnMut<F, (&'_1_0 (Self::Item))>,
    for<'_1_0> @TraitClause4::parent_clause0::Output = B,

fn core::iter::traits::iterator::Iterator::min_by<Self, F>(@1: Self, @2: F) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0, '_1_1> core::ops::function::FnMut<F, (&'_1_0 (Self::Item), &'_1_1 (Self::Item))>,
    for<'_1_0, '_1_1> @TraitClause2::parent_clause0::Output = core::cmp::Ordering,

fn core::iter::traits::iterator::Iterator::rev<Self>(@1: Self) -> core::iter::adapters::rev::Rev<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::iter::traits::double_ended::DoubleEndedIterator<Self>,

fn core::iter::traits::iterator::Iterator::unzip<Self, A, B, FromA, FromB>(@1: Self) -> (FromA, FromB)
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::marker::Sized<B>,
    [@TraitClause2]: core::marker::Sized<FromA>,
    [@TraitClause3]: core::marker::Sized<FromB>,
    [@TraitClause4]: core::default::Default<FromA>,
    [@TraitClause5]: core::iter::traits::collect::Extend<FromA, A>,
    [@TraitClause6]: core::default::Default<FromB>,
    [@TraitClause7]: core::iter::traits::collect::Extend<FromB, B>,
    [@TraitClause8]: core::marker::Sized<Self>,
    [@TraitClause9]: core::iter::traits::iterator::Iterator<Self>,
    Self::Item = (A, B),

fn core::iter::traits::iterator::Iterator::copied<'a, Self, T>(@1: Self) -> core::iter::adapters::copied::Copied<Self>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::marker::Copy<T>,
    T : 'a,
    Self::Item = &'a (T),

fn core::iter::traits::iterator::Iterator::cloned<'a, Self, T>(@1: Self) -> core::iter::adapters::cloned::Cloned<Self>[@TraitClause1]
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::iterator::Iterator<Self>,
    [@TraitClause3]: core::clone::Clone<T>,
    T : 'a,
    Self::Item = &'a (T),

fn core::iter::traits::iterator::Iterator::cycle<Self>(@1: Self) -> core::iter::adapters::cycle::Cycle<Self>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::clone::Clone<Self>,

fn core::iter::traits::iterator::Iterator::array_chunks<Self, const N : usize>(@1: Self) -> core::iter::adapters::array_chunks::ArrayChunks<Self, const N : usize>[@TraitClause0, Self]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::sum<Self, S>(@1: Self) -> S
where
    [@TraitClause0]: core::marker::Sized<S>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::accum::Sum<S, Self::Item>,

fn core::iter::traits::iterator::Iterator::product<Self, P>(@1: Self) -> P
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: core::iter::traits::accum::Product<P, Self::Item>,

fn core::iter::traits::iterator::Iterator::cmp<Self, I>(@1: Self, @2: I) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::Ord<Self::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,
    @TraitClause1::Item = Self::Item,

fn core::iter::traits::iterator::Iterator::cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::cmp::Ordering
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = core::cmp::Ordering,

fn core::iter::traits::iterator::Iterator::partial_cmp<Self, I>(@1: Self, @2: I) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::partial_cmp_by<Self, I, F>(@1: Self, @2: I, @3: F) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>],

fn core::iter::traits::iterator::Iterator::eq<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::eq_by<Self, I, F>(@1: Self, @2: I, @3: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause4]: core::ops::function::FnMut<F, (Self::Item, @TraitClause3::Item)>,
    @TraitClause4::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::ne<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialEq<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::lt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::le<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::gt<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::ge<Self, I>(@1: Self, @2: I) -> bool
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<I>,
    [@TraitClause2]: core::cmp::PartialOrd<Self::Item, @TraitClause1::Item>,
    [@TraitClause3]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::is_sorted_by<Self, F>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0, '_1_1> core::ops::function::FnMut<F, (&'_1_0 (Self::Item), &'_1_1 (Self::Item))>,
    for<'_1_0, '_1_1> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::iterator::Iterator::is_sorted_by_key<Self, F, K>(@1: Self, @2: F) -> bool
where
    [@TraitClause0]: core::marker::Sized<F>,
    [@TraitClause1]: core::marker::Sized<K>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (Self::Item)>,
    [@TraitClause4]: core::cmp::PartialOrd<K, K>,
    @TraitClause3::parent_clause0::Output = K,

fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

fn core::cmp::Ord::max<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::cmp::Ord::min<Self>(@1: Self, @2: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::cmp::Ord::clamp<Self>(@1: Self, @2: Self, @3: Self) -> Self
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::cmp::Eq::assert_receiver_is_total_eq<'_0, Self>(@1: &'_0 (Self))

fn core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size<'_0, Self>(@1: &'_0 (Self)) -> usize
where
    [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>,

fn core::iter::traits::iterator::Iterator::size_hint<'_0, Self>(@1: &'_0 (Self)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

fn core::iter::traits::iterator::Iterator::count<Self>(@1: Self) -> usize
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::last<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::iter::traits::iterator::Iterator::advance_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>]

fn core::iter::traits::iterator::Iterator::nth<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::Item>[Self::parent_clause0]

fn core::iter::traits::iterator::Iterator::max<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

fn core::iter::traits::iterator::Iterator::min<Self>(@1: Self) -> core::option::Option<Self::Item>[Self::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::Ord<Self::Item>,

fn core::iter::traits::iterator::Iterator::is_sorted<Self>(@1: Self) -> bool
where
    [@TraitClause0]: core::marker::Sized<Self>,
    [@TraitClause1]: core::cmp::PartialOrd<Self::Item, Self::Item>,

unsafe fn core::iter::traits::iterator::Iterator::__iterator_get_unchecked<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> Self::Item
where
    [@TraitClause0]: core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>,

fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

fn core::iter::traits::collect::Extend::extend_one<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)

fn core::iter::traits::collect::Extend::extend_reserve<'_0, Self, A>(@1: &'_0 mut (Self), @2: usize)

unsafe fn core::iter::traits::collect::Extend::extend_one_unchecked<'_0, Self, A>(@1: &'_0 mut (Self), @2: A)
where
    [@TraitClause0]: core::marker::Sized<Self>,

fn core::default::Default::default<Self>() -> Self

fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]

fn core::iter::traits::double_ended::DoubleEndedIterator::advance_back_by<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::result::Result<(), core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>[core::marker::Sized<()>, core::marker::Sized<core::num::nonzero::NonZero<usize>[core::marker::Sized<usize>, core::num::nonzero::{impl core::num::nonzero::ZeroablePrimitive for usize}#26]>]

fn core::iter::traits::double_ended::DoubleEndedIterator::nth_back<'_0, Self>(@1: &'_0 mut (Self), @2: usize) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]

fn core::iter::traits::double_ended::DoubleEndedIterator::try_rfold<'_0, Self, B, F, R>(@1: &'_0 mut (Self), @2: B, @3: F) -> R
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<R>,
    [@TraitClause3]: core::marker::Sized<Self>,
    [@TraitClause4]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>,
    [@TraitClause5]: core::ops::try_trait::Try<R>,
    @TraitClause4::parent_clause0::Output = R,
    @TraitClause5::Output = B,

fn core::iter::traits::double_ended::DoubleEndedIterator::rfold<Self, B, F>(@1: Self, @2: B, @3: F) -> B
where
    [@TraitClause0]: core::marker::Sized<B>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<Self>,
    [@TraitClause3]: core::ops::function::FnMut<F, (B, Self::parent_clause0::Item)>,
    @TraitClause3::parent_clause0::Output = B,

fn core::iter::traits::double_ended::DoubleEndedIterator::rfind<'_0, Self, P>(@1: &'_0 mut (Self), @2: P) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]
where
    [@TraitClause0]: core::marker::Sized<P>,
    [@TraitClause1]: core::marker::Sized<Self>,
    [@TraitClause2]: for<'_1_0> core::ops::function::FnMut<P, (&'_1_0 (Self::parent_clause0::Item))>,
    for<'_1_0> @TraitClause2::parent_clause0::Output = bool,

fn core::iter::traits::exact_size::ExactSizeIterator::len<'_0, Self>(@1: &'_0 (Self)) -> usize

fn core::iter::traits::exact_size::ExactSizeIterator::is_empty<'_0, Self>(@1: &'_0 (Self)) -> bool

fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,



