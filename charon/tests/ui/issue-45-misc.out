# Final LLBC before serialization:

fn test_crate::map::closure<'_0>(@1: &'_0 mut (()), @2: i32) -> i32
{
    let @0: i32; // return
    let state@1: &'_0 mut (()); // arg #1
    let v@2: i32; // arg #2

    @0 := copy (v@2)
    return
}

#[lang_item("sized")]
pub trait core::marker::Sized<Self>

#[lang_item("tuple_trait")]
pub trait core::marker::Tuple<Self>

#[lang_item("fn_once")]
pub trait core::ops::function::FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Args>
    parent_clause1 : [@TraitClause1]: core::marker::Tuple<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>
}

#[lang_item("fn_mut")]
pub trait core::ops::function::FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: core::ops::function::FnOnce<Self, Args>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Args>
    parent_clause2 : [@TraitClause2]: core::marker::Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>
}

pub fn core::array::{Array<T, const N : usize>}#23::map<T, F, U, const N : usize>(@1: Array<T, const N : usize>, @2: F) -> Array<U, const N : usize>
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::marker::Sized<F>,
    [@TraitClause2]: core::marker::Sized<U>,
    [@TraitClause3]: core::ops::function::FnMut<F, (T)>,
    @TraitClause3::parent_clause0::Output = U,

pub fn test_crate::map(@1: Array<i32, 256 : usize>) -> Array<i32, 256 : usize>
{
    let @0: Array<i32, 256 : usize>; // return
    let x@1: Array<i32, 256 : usize>; // arg #1
    let @2: Array<i32, 256 : usize>; // anonymous local
    let @3: fn(i32) -> i32; // anonymous local

    storage_live(@2)
    @2 := copy (x@1)
    storage_live(@3)
    @3 := {test_crate::map::closure} {}
    @0 := core::array::{Array<T, const N : usize>}#23::map<i32, fn(i32) -> i32, i32, 256 : usize>[core::marker::Sized<i32>, core::marker::Sized<fn(i32) -> i32>, core::marker::Sized<i32>, core::ops::function::FnMut<fn(i32) -> i32, (i32)>](move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    return
}

pub fn test_crate::array<const LEN : usize>() -> Array<u8, const LEN : usize>
{
    let @0: Array<u8, const LEN : usize>; // return

    @0 := @ArrayRepeat<'_, u8, const LEN : usize>(const (0 : u8))
    return
}

#[lang_item("Range")]
pub struct core::ops::range::Range<Idx>
  where
      [@TraitClause0]: core::marker::Sized<Idx>,
 =
{
  start: Idx,
  end: Idx,
}

#[lang_item("Option")]
pub enum core::option::Option<T>
  where
      [@TraitClause0]: core::marker::Sized<T>,
 =
|  None()
|  Some(T)


#[lang_item("iterator")]
pub trait core::iter::traits::iterator::Iterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    type Item
    fn next<'_0> = core::iter::traits::iterator::Iterator::next<'_0_0, Self>
}

pub fn core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>(@1: I) -> I
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,

#[lang_item("clone")]
pub trait core::clone::Clone<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn clone<'_0> = core::clone::Clone::clone<'_0_0, Self>
}

#[lang_item("eq")]
pub trait core::cmp::PartialEq<Self, Rhs>
{
    fn eq<'_0, '_1> = core::cmp::PartialEq::eq<'_0_0, '_0_1, Self, Rhs>
}

#[lang_item("Ordering")]
pub enum core::cmp::Ordering =
|  Less()
|  Equal()
|  Greater()


#[lang_item("partial_ord")]
pub trait core::cmp::PartialOrd<Self, Rhs>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Rhs>
    fn partial_cmp<'_0, '_1> = core::cmp::PartialOrd::partial_cmp<'_0_0, '_0_1, Self, Rhs>
}

pub trait core::iter::range::Step<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::clone::Clone<Self>
    parent_clause2 : [@TraitClause2]: core::cmp::PartialOrd<Self, Self>
    fn steps_between<'_0, '_1> = core::iter::range::Step::steps_between<'_0_0, '_0_1, Self>
    fn forward_checked = core::iter::range::Step::forward_checked<Self>
    fn backward_checked = core::iter::range::Step::backward_checked<Self>
}

pub fn core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_0, A>(@1: &'_0 mut (core::ops::range::Range<A>[@TraitClause0])) -> core::option::Option<A>[@TraitClause0]
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,

impl core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<A> : core::iter::traits::iterator::Iterator<core::ops::range::Range<A>[@TraitClause0]>
where
    [@TraitClause0]: core::marker::Sized<A>,
    [@TraitClause1]: core::iter::range::Step<A>,
{
    parent_clause0 = @TraitClause0
    type Item = A
    fn next<'_0> = core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_0_0, A>[@TraitClause0, @TraitClause1]
}

pub fn core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0>(@1: &'_0 (u8)) -> u8

impl core::clone::impls::{impl core::clone::Clone for u8}#6 : core::clone::Clone<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    fn clone<'_0> = core::clone::impls::{impl core::clone::Clone for u8}#6::clone<'_0_0>
}

pub fn core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> bool

impl core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22 : core::cmp::PartialEq<u8, u8>
{
    fn eq<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22::eq<'_0_0, '_0_1>
}

pub fn core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::partial_cmp<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

impl core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60 : core::cmp::PartialOrd<u8, u8>
{
    parent_clause0 = core::cmp::impls::{impl core::cmp::PartialEq<u8> for u8}#22
    fn partial_cmp<'_0, '_1> = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60::partial_cmp<'_0_0, '_0_1>
}

pub fn core::iter::range::{impl core::iter::range::Step for u8}#35::steps_between<'_0, '_1>(@1: &'_0 (u8), @2: &'_1 (u8)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::{impl core::iter::range::Step for u8}#35::forward_checked(@1: u8, @2: usize) -> core::option::Option<u8>[core::marker::Sized<u8>]

pub fn core::iter::range::{impl core::iter::range::Step for u8}#35::backward_checked(@1: u8, @2: usize) -> core::option::Option<u8>[core::marker::Sized<u8>]

impl core::iter::range::{impl core::iter::range::Step for u8}#35 : core::iter::range::Step<u8>
{
    parent_clause0 = core::marker::Sized<u8>
    parent_clause1 = core::clone::impls::{impl core::clone::Clone for u8}#6
    parent_clause2 = core::cmp::impls::{impl core::cmp::PartialOrd<u8> for u8}#60
    fn steps_between<'_0, '_1> = core::iter::range::{impl core::iter::range::Step for u8}#35::steps_between<'_0_0, '_0_1>
    fn forward_checked = core::iter::range::{impl core::iter::range::Step for u8}#35::forward_checked
    fn backward_checked = core::iter::range::{impl core::iter::range::Step for u8}#35::backward_checked
}

fn test_crate::cbd(@1: Array<u8, 33 : usize>)
{
    let @0: (); // return
    let prf_input@1: Array<u8, 33 : usize>; // arg #1
    let @2: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // anonymous local
    let @3: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // anonymous local
    let iter@4: core::ops::range::Range<u8>[core::marker::Sized<u8>]; // local
    let @5: (); // anonymous local
    let @6: core::option::Option<u8>[core::marker::Sized<u8>]; // anonymous local
    let @7: &'_ mut (core::ops::range::Range<u8>[core::marker::Sized<u8>]); // anonymous local
    let @8: &'_ mut (core::ops::range::Range<u8>[core::marker::Sized<u8>]); // anonymous local
    let i@9: u8; // local
    let @10: u8; // anonymous local
    let @11: usize; // anonymous local
    let @12: &'_ mut (Array<u8, 33 : usize>); // anonymous local
    let @13: &'_ mut (u8); // anonymous local

    storage_live(@7)
    storage_live(i@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(@13)
    storage_live(@2)
    storage_live(@3)
    @3 := core::ops::range::Range { start: const (0 : u8), end: const (3 : u8) }
    @2 := core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<core::ops::range::Range<u8>[core::marker::Sized<u8>]>[core::marker::Sized<core::ops::range::Range<u8>[core::marker::Sized<u8>]>, core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6<u8>[core::marker::Sized<u8>, core::iter::range::{impl core::iter::range::Step for u8}#35]](move (@3))
    storage_dead(@3)
    storage_live(iter@4)
    iter@4 := move (@2)
    loop {
        storage_live(@5)
        storage_live(@6)
        storage_live(@7)
        storage_live(@8)
        @8 := &mut iter@4
        @7 := &two-phase-mut *(@8)
        @6 := core::iter::range::{impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>[@TraitClause0]}#6::next<'_, u8>[core::marker::Sized<u8>, core::iter::range::{impl core::iter::range::Step for u8}#35](move (@7))
        storage_dead(@7)
        match @6 {
            0 => {
                break 0
            },
            1 => {
                storage_live(i@9)
                i@9 := copy ((@6 as variant @1).0)
                storage_live(@10)
                @10 := copy (i@9)
                storage_live(@11)
                @11 := const (0 : usize)
                storage_live(@12)
                @12 := &mut prf_input@1
                storage_live(@13)
                @13 := @ArrayIndexMut<'_, u8, 33 : usize>(move (@12), copy (@11))
                *(@13) := move (@10)
                storage_dead(@10)
                storage_dead(@11)
                storage_dead(i@9)
                storage_dead(@8)
                storage_dead(@6)
                storage_dead(@5)
                continue 0
            },
        }
    }
    @0 := ()
    storage_dead(@8)
    storage_dead(@6)
    storage_dead(@5)
    storage_dead(iter@4)
    storage_dead(@2)
    @0 := ()
    return
}

pub enum core::panicking::AssertKind =
|  Eq()
|  Ne()
|  Match()


#[lang_item("format_arguments")]
pub opaque type core::fmt::Arguments<'a>
  where
      'a : 'a,

#[lang_item("slice_len_fn")]
pub fn core::slice::{Slice<T>}::len<'_0, T>(@1: &'_0 (Slice<T>)) -> usize
where
    [@TraitClause0]: core::marker::Sized<T>,

fn test_crate::select<'_0, '_1>(@1: &'_0 (Slice<u8>), @2: &'_1 (Slice<u8>))
{
    let @0: (); // return
    let lhs@1: &'_ (Slice<u8>); // arg #1
    let rhs@2: &'_ (Slice<u8>); // arg #2
    let @3: (); // anonymous local
    let @4: bool; // anonymous local
    let @5: (); // anonymous local
    let @6: (&'_ (usize), &'_ (usize)); // anonymous local
    let @7: &'_ (usize); // anonymous local
    let @8: usize; // anonymous local
    let @9: &'_ (Slice<u8>); // anonymous local
    let @10: &'_ (usize); // anonymous local
    let @11: usize; // anonymous local
    let @12: &'_ (Slice<u8>); // anonymous local
    let left_val@13: &'_ (usize); // local
    let right_val@14: &'_ (usize); // local
    let @15: bool; // anonymous local
    let @16: usize; // anonymous local
    let @17: usize; // anonymous local
    let kind@18: core::panicking::AssertKind; // local
    let @19: core::panicking::AssertKind; // anonymous local
    let @20: &'_ (usize); // anonymous local
    let @21: &'_ (usize); // anonymous local
    let @22: &'_ (usize); // anonymous local
    let @23: &'_ (usize); // anonymous local
    let @24: core::option::Option<core::fmt::Arguments<'_>>[core::marker::Sized<core::fmt::Arguments<'_>>]; // anonymous local

    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    storage_live(left_val@13)
    storage_live(right_val@14)
    storage_live(@15)
    storage_live(@16)
    storage_live(@17)
    storage_live(kind@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    storage_live(@23)
    storage_live(@24)
    storage_live(@3)
    storage_live(@4)
    @4 := const (false)
    if move (@4) {
        storage_live(@5)
        storage_live(@6)
        storage_live(@7)
        storage_live(@8)
        storage_live(@9)
        @9 := &*(lhs@1)
        @8 := core::slice::{Slice<T>}::len<'_, u8>[core::marker::Sized<u8>](move (@9))
        storage_dead(@9)
        @7 := &@8
        storage_live(@10)
        storage_live(@11)
        storage_live(@12)
        @12 := &*(rhs@2)
        @11 := core::slice::{Slice<T>}::len<'_, u8>[core::marker::Sized<u8>](move (@12))
        storage_dead(@12)
        @10 := &@11
        @6 := (move (@7), move (@10))
        storage_dead(@10)
        storage_dead(@7)
        storage_live(left_val@13)
        left_val@13 := copy ((@6).0)
        storage_live(right_val@14)
        right_val@14 := copy ((@6).1)
        storage_live(@15)
        storage_live(@16)
        @16 := copy (*(left_val@13))
        storage_live(@17)
        @17 := copy (*(right_val@14))
        @15 := move (@16) == move (@17)
        if move (@15) {
        }
        else {
            storage_dead(@17)
            storage_dead(@16)
            storage_live(kind@18)
            kind@18 := core::panicking::AssertKind::Eq {  }
            storage_live(@19)
            @19 := move (kind@18)
            storage_live(@20)
            storage_live(@21)
            @21 := &*(left_val@13)
            @20 := &*(@21)
            storage_live(@22)
            storage_live(@23)
            @23 := &*(right_val@14)
            @22 := &*(@23)
            storage_live(@24)
            @24 := core::option::Option::None {  }
            panic(core::panicking::assert_failed)
        }
        storage_dead(@17)
        storage_dead(@16)
        storage_dead(@15)
        storage_dead(right_val@14)
        storage_dead(left_val@13)
        storage_dead(@11)
        storage_dead(@8)
        storage_dead(@6)
        storage_dead(@5)
    }
    else {
    }
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    @0 := ()
    return
}

#[lang_item("IntoIterator")]
pub trait core::iter::traits::collect::IntoIterator<Self>
where
    Self::parent_clause2::Item = Self::Item,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self::Item>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::IntoIter>
    parent_clause2 : [@TraitClause2]: core::iter::traits::iterator::Iterator<Self::IntoIter>
    type Item
    type IntoIter
    fn into_iter = core::iter::traits::collect::IntoIterator::into_iter<Self>
}

#[lang_item("into_iter")]
pub fn core::iter::traits::collect::IntoIterator::into_iter<Self>(@1: Self) -> Self::IntoIter

impl core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}<I> : core::iter::traits::collect::IntoIterator<I>
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    parent_clause1 = @TraitClause0
    parent_clause2 = @TraitClause1
    type Item = @TraitClause1::Item
    type IntoIter = I
    fn into_iter = core::iter::traits::collect::{impl core::iter::traits::collect::IntoIterator for I}::into_iter<I>[@TraitClause0, @TraitClause1]
}

#[lang_item("next")]
pub fn core::iter::traits::iterator::Iterator::next<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::Item>[Self::parent_clause0]

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> Self::parent_clause0::Output

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> Self::Output

pub fn core::iter::range::Step::steps_between<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> (usize, core::option::Option<usize>[core::marker::Sized<usize>])

pub fn core::iter::range::Step::forward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

pub fn core::iter::range::Step::backward_checked<Self>(@1: Self, @2: usize) -> core::option::Option<Self>[Self::parent_clause0]

#[lang_item("clone_fn")]
pub fn core::clone::Clone::clone<'_0, Self>(@1: &'_0 (Self)) -> Self

#[lang_item("cmp_partialord_cmp")]
pub fn core::cmp::PartialOrd::partial_cmp<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> core::option::Option<core::cmp::Ordering>[core::marker::Sized<core::cmp::Ordering>]

#[lang_item("cmp_partialeq_eq")]
pub fn core::cmp::PartialEq::eq<'_0, '_1, Self, Rhs>(@1: &'_0 (Self), @2: &'_1 (Rhs)) -> bool

#[lang_item("Eq")]
pub trait core::cmp::Eq<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::PartialEq<Self, Self>
}

#[lang_item("Ord")]
pub trait core::cmp::Ord<Self>
{
    parent_clause0 : [@TraitClause0]: core::cmp::Eq<Self>
    parent_clause1 : [@TraitClause1]: core::cmp::PartialOrd<Self, Self>
    fn cmp<'_0, '_1> = core::cmp::Ord::cmp<'_0_0, '_0_1, Self>
}

pub trait core::iter::adapters::zip::TrustedRandomAccessNoCoerce<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    const MAY_HAVE_SIDE_EFFECT : bool
}

#[lang_item("ord_cmp_method")]
pub fn core::cmp::Ord::cmp<'_0, '_1, Self>(@1: &'_0 (Self), @2: &'_1 (Self)) -> core::cmp::Ordering

#[lang_item("FromIterator")]
pub trait core::iter::traits::collect::FromIterator<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn from_iter<T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::FromIterator::from_iter<Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("FromResidual")]
pub trait core::ops::try_trait::FromResidual<Self, R>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<R>
    fn from_residual = core::ops::try_trait::FromResidual::from_residual<Self, R>
}

#[lang_item("ControlFlow")]
pub enum core::ops::control_flow::ControlFlow<B, C>
  where
      [@TraitClause0]: core::marker::Sized<B>,
      [@TraitClause1]: core::marker::Sized<C>,
 =
|  Continue(C)
|  Break(B)


#[lang_item("Try")]
pub trait core::ops::try_trait::Try<Self>
{
    parent_clause0 : [@TraitClause0]: core::ops::try_trait::FromResidual<Self, Self::Residual>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::Output>
    parent_clause2 : [@TraitClause2]: core::marker::Sized<Self::Residual>
    type Output
    type Residual
    fn from_output = core::ops::try_trait::Try::from_output<Self>
    fn branch = core::ops::try_trait::Try::branch<Self>
}

pub trait core::ops::try_trait::Residual<Self, O>
where
    Self::parent_clause2::Output = O,
    Self::parent_clause2::Residual = Self,
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<O>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<Self::TryType>
    parent_clause2 : [@TraitClause2]: core::ops::try_trait::Try<Self::TryType>
    type TryType
}

pub trait core::iter::traits::collect::Extend<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<A>
    fn extend<'_0, T, [@TraitClause0]: core::marker::Sized<T>, [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>, @TraitClause1_1::Item = A> = core::iter::traits::collect::Extend::extend<'_0_0, Self, A, T>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("Default")]
pub trait core::default::Default<Self>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    fn default = core::default::Default::default<Self>
}

#[lang_item("DoubleEndedIterator")]
pub trait core::iter::traits::double_ended::DoubleEndedIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
    fn next_back<'_0> = core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0_0, Self>
}

pub trait core::iter::traits::exact_size::ExactSizeIterator<Self>
{
    parent_clause0 : [@TraitClause0]: core::iter::traits::iterator::Iterator<Self>
}

#[lang_item("copy")]
pub trait core::marker::Copy<Self>
{
    parent_clause0 : [@TraitClause0]: core::clone::Clone<Self>
}

pub trait core::iter::traits::accum::Sum<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn sum<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Sum::sum<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

pub trait core::iter::traits::accum::Product<Self, A>
{
    parent_clause0 : [@TraitClause0]: core::marker::Sized<Self>
    parent_clause1 : [@TraitClause1]: core::marker::Sized<A>
    fn product<I, [@TraitClause0]: core::marker::Sized<I>, [@TraitClause1]: core::iter::traits::iterator::Iterator<I>, @TraitClause1_1::Item = A> = core::iter::traits::accum::Product::product<Self, A, I>[@TraitClause0_0, @TraitClause0_1]
}

#[lang_item("default_fn")]
pub fn core::default::Default::default<Self>() -> Self

#[lang_item("from_output")]
pub fn core::ops::try_trait::Try::from_output<Self>(@1: Self::Output) -> Self

#[lang_item("branch")]
pub fn core::ops::try_trait::Try::branch<Self>(@1: Self) -> core::ops::control_flow::ControlFlow<Self::Residual, Self::Output>[Self::parent_clause0::parent_clause0, Self::parent_clause1]

#[lang_item("from_residual")]
pub fn core::ops::try_trait::FromResidual::from_residual<Self, R>(@1: R) -> Self

pub fn core::iter::traits::accum::Sum::sum<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::accum::Product::product<Self, A, I>(@1: I) -> Self
where
    [@TraitClause0]: core::marker::Sized<I>,
    [@TraitClause1]: core::iter::traits::iterator::Iterator<I>,
    @TraitClause1::Item = A,

#[lang_item("from_iter_fn")]
pub fn core::iter::traits::collect::FromIterator::from_iter<Self, A, T>(@1: T) -> Self
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::collect::Extend::extend<'_0, Self, A, T>(@1: &'_0 mut (Self), @2: T)
where
    [@TraitClause0]: core::marker::Sized<T>,
    [@TraitClause1]: core::iter::traits::collect::IntoIterator<T>,
    @TraitClause1::Item = A,

pub fn core::iter::traits::double_ended::DoubleEndedIterator::next_back<'_0, Self>(@1: &'_0 mut (Self)) -> core::option::Option<Self::parent_clause0::Item>[Self::parent_clause0::parent_clause0]



